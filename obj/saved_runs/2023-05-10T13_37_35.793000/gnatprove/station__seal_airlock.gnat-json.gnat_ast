(* Module for axiomatizing type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlock_door  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlock_door,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref  = { mutable airlock_door__content : airlock_door }
  
  function   airlock_door__ref_airlock_door__content__projection
    (a : airlock_door__ref) requires {  } ensures  {  } returns
    airlock_door = a.airlock_door__content
  
  meta model_projection function airlock_door__ref_airlock_door__content__projection
  
  meta inline:no function airlock_door__ref_airlock_door__content__projection
  
  function   airlock_door__havoc (x : airlock_door__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door__rep
  
  use        Station__airlock_door
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "station_record" defined at station.ads:8, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Station__station_record__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  type __split_fields  = { [model_trace:.921]
                           [name:Door1]rec__station__station_record__door1 : Station__airlock_door.airlock_door;
                           [model_trace:.927]
                           [name:Door2]rec__station__station_record__door2 : Station__airlock_door.airlock_door }
  
  function [model_trace:.921] [name:Door1] 
    __split_fields_rec__station__station_record__door1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door1
  
  meta model_projection function __split_fields_rec__station__station_record__door1__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door1__projection
  
  function [model_trace:.927] [name:Door2] 
    __split_fields_rec__station__station_record__door2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door2
  
  meta model_projection function __split_fields_rec__station__station_record__door2__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door2__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   station__station_record__door1__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door1_ (a : __rep) requires
    { (station__station_record__door1__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door1) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__door2__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door2_ (a : __rep) requires
    { (station__station_record__door2__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door2) }
    returns Station__airlock_door.airlock_door
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Station__airlock_door__rep.to_rep
                a.__split_fields.rec__station__station_record__door1)
               = (Station__airlock_door__rep.to_rep
                    b.__split_fields.rec__station__station_record__door1)) /\
              ((Station__airlock_door__rep.to_rep
                  a.__split_fields.rec__station__station_record__door2)
                 = (Station__airlock_door__rep.to_rep
                      b.__split_fields.rec__station__station_record__door2)))
           then True  else False)

end

(* Module for axiomatizing type "station_record" defined at station.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record
  
  use export Station__station_record__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type station_record  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   station__station_record__door1__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door1__first__bit_axiom : ((station__station_record__door1__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door1__last__bit_axiom : ((station__station_record__door1__last__bit
                                                              )
                                                             > (station__station_record__door1__first__bit
                                                                  ))
  
  axiom station__station_record__door1__position_axiom : ((station__station_record__door1__position
                                                             ) >= 0)
  
  function   station__station_record__door2__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door2__first__bit_axiom : ((station__station_record__door2__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door2__last__bit_axiom : ((station__station_record__door2__last__bit
                                                              )
                                                             > (station__station_record__door2__first__bit
                                                                  ))
  
  axiom station__station_record__door2__position_axiom : ((station__station_record__door2__position
                                                             ) >= 0)
  
  function   user_eq (a : station_record b : station_record) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns station_record
  
  type station_record__ref  = { mutable station_record__content : station_record }
  
  function   station_record__ref_station_record__content__projection
    (a : station_record__ref) requires {  } ensures  {  } returns
    station_record = a.station_record__content
  
  meta model_projection function station_record__ref_station_record__content__projection
  
  meta inline:no function station_record__ref_station_record__content__projection
  
  function   station_record__havoc (x : station_record__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "station_record" defined at station.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__station_record
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_174) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_175) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Station__station_record.station__station_record__door1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_175))
        then
        (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_175).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
           = ( 1))
        ) /\
          (if
          (Station__station_record.station__station_record__door2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_175))
          then
          (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_175).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
             = ( 1))
          ))

end

(* Module for defining a ref holding the value of variable "s" defined at station.ads:19, created in Gnat2Why.Decls.Translate_Variable *)
module Station__seal_airlock__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  val s__split_fields [model_projected] [name:S]
  [model_trace:989] [sloc:station.ads:19]: Station__station_record.__split_fields

end

(* Module giving axioms for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__airlock_door___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__airlock_door
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last))
       then
       (Station__airlock_door.dynamic_property Station__airlock_door.first
          Station__airlock_door.last ([mlw:proxy_symbol]
          [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s" defined at station.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__seal_airlock__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "seal_airlock" defined at station.ads:19, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Station__seal_airlock__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__seal_airlock__s
  use        Station__airlock_door
  use        Station__airlock_door__rep
  use        Station__airlock_door___axiom
  use        Station__station_record___axiom
  use        Station__seal_airlock__s___axiom
  
  function [GP_Subp:station.ads:19] [sloc:station.ads:19] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:station.ads:21] ([GP_Reason:VC_POSTCONDITION]
                             [comment:     Post => S.Door1 = Closed and S.Door2 = Closed;              ^ station.ads:21:14:VC_POSTCONDITION]
                             [GP_Sloc:station.ads:21:14] [model_vc_post]
                             [GP_Id:1]
                             [GP_Shape:pragargs__and] (([GP_Sloc:station.ads:21:14]
                                                       [GP_Pretty_Ada:1028] (
                                                       (Station__airlock_door__rep.to_rep
                                                          ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                                                         = 1)) /\
                                                         ([GP_Sloc:station.ads:21:35]
                                                         [GP_Pretty_Ada:1034] (
                                                         (Station__airlock_door__rep.to_rep
                                                            ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                                                           = 1))))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram station.ads:19 *);
        assume
        { (Station__station_record___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram station.ads:19 *);
        (* Check for RTE in the Pre of the subprogram station.ads:19 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.orb
                          (_gnatprove_standard.Boolean.andb
                             ((Station__airlock_door__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                                = 0)
                             ((Station__airlock_door__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                                = 1))
                          (_gnatprove_standard.Boolean.andb
                             ((Station__airlock_door__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                                = 0)
                             ((Station__airlock_door__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                                = 1)))
                       in ())  end;
        (* Assume Pre of the subprogram station.ads:19 *);
        assume
        { ([GP_Pretty_Ada:11877] ((((Station__airlock_door__rep.to_rep
                                       ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                                      = 0) /\
                                     ((Station__airlock_door__rep.to_rep
                                         ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                                        = 1)) \/
                                    (((Station__airlock_door__rep.to_rep
                                         ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                                        = 0) /\
                                       ((Station__airlock_door__rep.to_rep
                                           ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                                          = 1)))) };
        (try
        ();
          ([GP_Sloc:station.adb:19:10] ([sloc:station.adb:19] (if
                                                              ([sloc:station.adb:19] ([branch_id=875]
                                                              _gnatprove_standard.Main.spark__branch
                                                              :=
                                                              ((Station__airlock_door__rep.to_rep
                                                                  ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                                                                 = 0)));
                                                              ([branch_id=875] _gnatprove_standard.Main.spark__branch).bool__content
                                                              then
                                                              ();
                                                              ([GP_Sloc:station.adb:20:18] 
                                                              ([sloc:station.adb:20] (let ([mlw:proxy_symbol]
                                                              [introduced] temp___199)
                                                              =
                                                              (let ([mlw:proxy_symbol]
                                                                [introduced] temp___198)
                                                                =
                                                                ( --pp_record_aggregate NOT IMPLEMENTED)
                                                                in abstract
                                                                ensures
                                                                { True } begin 
                                                                 (let _ =
                                                                ([mlw:proxy_symbol]
                                                                  [introduced] temp___198).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1
                                                                in ())  end;
                                                                --pp_record_update NOT IMPLEMENTED)
                                                              in (
                                                              Station__seal_airlock__s.s__split_fields
                                                              :=
                                                              ([mlw:proxy_symbol]
                                                                [introduced] temp___199).Station__station_record.__split_fields))))
                                                               else
                                                              ([GP_Sloc:station.adb:21:7] 
                                                              (if
                                                              ([sloc:station.adb:21] ([branch_id=887]
                                                              _gnatprove_standard.Main.spark__branch
                                                              :=
                                                              ((Station__airlock_door__rep.to_rep
                                                                  ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                                                                 = 0)));
                                                              ([branch_id=887] _gnatprove_standard.Main.spark__branch).bool__content
                                                              then
                                                              ();
                                                              ([GP_Sloc:station.adb:22:18] 
                                                              ([sloc:station.adb:22] (let ([mlw:proxy_symbol]
                                                              [introduced] temp___202)
                                                              =
                                                              (let ([mlw:proxy_symbol]
                                                                [introduced] temp___201)
                                                                =
                                                                ( --pp_record_aggregate NOT IMPLEMENTED)
                                                                in abstract
                                                                ensures
                                                                { True } begin 
                                                                 (let _ =
                                                                ([mlw:proxy_symbol]
                                                                  [introduced] temp___201).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2
                                                                in ())  end;
                                                                --pp_record_update NOT IMPLEMENTED)
                                                              in (
                                                              Station__seal_airlock__s.s__split_fields
                                                              :=
                                                              ([mlw:proxy_symbol]
                                                                [introduced] temp___202).Station__station_record.__split_fields))))
                                                               else ())))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          ((Station__airlock_door__rep.to_rep
                              ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                             = 1)
                          ((Station__airlock_door__rep.to_rep
                              ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                             = 1))
                       in ())  end

end
