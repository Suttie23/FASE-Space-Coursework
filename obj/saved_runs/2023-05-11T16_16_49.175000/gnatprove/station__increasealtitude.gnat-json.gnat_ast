(* Module for axiomatizing type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlock_door  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlock_door,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref  = { mutable airlock_door__content : airlock_door }
  
  function   airlock_door__ref_airlock_door__content__projection
    (a : airlock_door__ref) requires {  } ensures  {  } returns
    airlock_door = a.airlock_door__content
  
  meta model_projection function airlock_door__ref_airlock_door__content__projection
  
  meta inline:no function airlock_door__ref_airlock_door__content__projection
  
  function   airlock_door__havoc (x : airlock_door__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door__rep
  
  use        Station__airlock_door
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "altituderange" defined at station.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Station__altituderange
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type altituderange  = <range 820000 920000>
  
  function   first () requires { True } ensures  { True } returns
    int = 820000
  
  function   last () requires { True } ensures  { True } returns int = 920000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = altituderange,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type altituderange__ref  = { mutable altituderange__content : altituderange }
  
  function   altituderange__ref_altituderange__content__projection
    (a : altituderange__ref) requires {  } ensures  {  } returns
    altituderange = a.altituderange__content
  
  meta model_projection function altituderange__ref_altituderange__content__projection
  
  meta inline:no function altituderange__ref_altituderange__content__projection
  
  function   altituderange__havoc (x : altituderange__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "altituderange" defined at station.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Station__altituderange__rep
  
  use        Station__altituderange
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Station__altituderange.altituderange) requires
    { True } ensures  { True } returns
    int = (Station__altituderange.altituderange'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__altituderange.altituderange,
    predicate in_range = Station__altituderange.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "station_record" defined at station.ads:16, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Station__station_record__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__airlock_door
  use        Station__airlock_door__rep
  use        Station__altituderange
  use        Station__altituderange__rep
  
  type __split_fields  = { [model_trace:.980]
                           [name:Door1]rec__station__station_record__door1 : Station__airlock_door.airlock_door;
                           [model_trace:.986]
                           [name:Door2]rec__station__station_record__door2 : Station__airlock_door.airlock_door;
                           [name:Altitude]
                           [model_trace:.991]rec__station__station_record__altitude : Station__altituderange.altituderange }
  
  function [model_trace:.980] [name:Door1] 
    __split_fields_rec__station__station_record__door1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door1
  
  meta model_projection function __split_fields_rec__station__station_record__door1__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door1__projection
  
  function [model_trace:.986] [name:Door2] 
    __split_fields_rec__station__station_record__door2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door2
  
  meta model_projection function __split_fields_rec__station__station_record__door2__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door2__projection
  
  function [name:Altitude] [model_trace:.991] 
    __split_fields_rec__station__station_record__altitude__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__altituderange.altituderange = a.rec__station__station_record__altitude
  
  meta model_projection function __split_fields_rec__station__station_record__altitude__projection
  
  meta inline:no function __split_fields_rec__station__station_record__altitude__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   station__station_record__door1__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door1_ (a : __rep) requires
    { (station__station_record__door1__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door1) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__door2__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door2_ (a : __rep) requires
    { (station__station_record__door2__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door2) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__altitude__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__altitude_ (a : __rep) requires
    { (station__station_record__altitude__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__altitude) }
    returns Station__altituderange.altituderange
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Station__airlock_door__rep.to_rep
                a.__split_fields.rec__station__station_record__door1)
               = (Station__airlock_door__rep.to_rep
                    b.__split_fields.rec__station__station_record__door1)) /\
              ((Station__airlock_door__rep.to_rep
                  a.__split_fields.rec__station__station_record__door2)
                 = (Station__airlock_door__rep.to_rep
                      b.__split_fields.rec__station__station_record__door2))
              /\
              ((Station__altituderange__rep.to_rep
                  a.__split_fields.rec__station__station_record__altitude)
                 = (Station__altituderange__rep.to_rep
                      b.__split_fields.rec__station__station_record__altitude)))
           then True  else False)

end

(* Module for axiomatizing type "station_record" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record
  
  use export Station__station_record__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type station_record  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   station__station_record__door1__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door1__first__bit_axiom : ((station__station_record__door1__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door1__last__bit_axiom : ((station__station_record__door1__last__bit
                                                              )
                                                             > (station__station_record__door1__first__bit
                                                                  ))
  
  axiom station__station_record__door1__position_axiom : ((station__station_record__door1__position
                                                             ) >= 0)
  
  function   station__station_record__door2__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door2__first__bit_axiom : ((station__station_record__door2__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door2__last__bit_axiom : ((station__station_record__door2__last__bit
                                                              )
                                                             > (station__station_record__door2__first__bit
                                                                  ))
  
  axiom station__station_record__door2__position_axiom : ((station__station_record__door2__position
                                                             ) >= 0)
  
  function   station__station_record__altitude__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__altitude__first__bit_axiom : ((station__station_record__altitude__first__bit
                                                                  ) >= 0)
  
  axiom station__station_record__altitude__last__bit_axiom : ((station__station_record__altitude__last__bit
                                                                 )
                                                                > (station__station_record__altitude__first__bit
                                                                    ))
  
  axiom station__station_record__altitude__position_axiom : ((station__station_record__altitude__position
                                                                ) >= 0)
  
  function   user_eq (a : station_record b : station_record) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns station_record
  
  type station_record__ref  = { mutable station_record__content : station_record }
  
  function   station_record__ref_station_record__content__projection
    (a : station_record__ref) requires {  } ensures  {  } returns
    station_record = a.station_record__content
  
  meta model_projection function station_record__ref_station_record__content__projection
  
  meta inline:no function station_record__ref_station_record__content__projection
  
  function   station_record__havoc (x : station_record__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "s" defined at station.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Station__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  val s__split_fields [model_projected] [model_trace:997]
  [name:S] [sloc:station.ads:22]: Station__station_record.__split_fields

end

(* Module giving axioms for type "station_record" defined at station.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__station_record
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_182) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___is_init_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_180) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_181) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_183) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_184) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Station__station_record.station__station_record__door1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_183))
        then
        (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_183).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
           = ( 1))
        ) /\
          (if
          (Station__station_record.station__station_record__door2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_183))
          then
          (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_183).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
             = ( 1))
          ))

end

(* Module for possibly declaring a logic function for "sealedinvariant" defined at station.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Station__sealedinvariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  function   sealedinvariant
    (Station__s___s__split_fields___ : Station__station_record.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   sealedinvariant__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : bool
    Station__s___s__split_fields___ : Station__station_record.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "sealedinvariant" defined at station.ads:24, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Station__sealedinvariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__s
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__sealedinvariant
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   sealedinvariant (__void_param : unit) requires { True } ensures 
    { ((result
          = (Station__sealedinvariant.sealedinvariant
               !Station__s.s__split_fields)) /\
         (Station__sealedinvariant.sealedinvariant__function_guard result
            !Station__s.s__split_fields) /\
         (result
            = (((Station__airlock_door__rep.to_rep
                   ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                  = 1) /\
                 ((Station__airlock_door__rep.to_rep
                     ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                    = 1)))) } returns bool
  
  axiom sealedinvariant__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom sealedinvariant__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__airlock_door___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__airlock_door
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_166) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_167) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_164) = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last))
       then
       (Station__airlock_door.dynamic_property Station__airlock_door.first
          Station__airlock_door.last ([mlw:proxy_symbol]
          [introduced] temp___expr_168))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_169) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_170) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "altituderange" defined at station.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__altituderange___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__altituderange
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_173) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_174) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_171) = True) \/
          (Station__altituderange.first <= Station__altituderange.last))
       then
       (Station__altituderange.dynamic_property Station__altituderange.first
          Station__altituderange.last ([mlw:proxy_symbol]
          [introduced] temp___expr_175))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_176) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_177) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s" defined at station.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "increasealtitude" defined at station.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Station__increasealtitude__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Station__s
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__sealedinvariant___axiom
  use        Station__altituderange
  use        Station__altituderange__rep
  use        Station__airlock_door___axiom
  use        Station__altituderange___axiom
  use        Station__station_record___axiom
  use        Station__s___axiom
  use        Station__sealedinvariant___axiom
  
  function [GP_Subp:station.ads:38] [sloc:station.ads:38] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:station.ads:41] ([GP_Reason:VC_POSTCONDITION]
                             [comment:     Post => (S.Altitude = S.Altitude'Old + 1);              ^ station.ads:41:14:VC_POSTCONDITION]
                             [GP_Shape:pragargs__cmp]
                             [GP_Sloc:station.ads:41:14] [model_vc_post]
                             [GP_Id:3] ([GP_Pretty_Ada:12121]
                                       [GP_Sloc:station.ads:41:14] ((Station__altituderange__rep.to_rep
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                                                                    = (
                                                                    (Station__altituderange__rep.to_rep
                                                                    --pp_tagged NOT IMPLEMENTED)
                                                                    + 1))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram station.ads:38 *);
        assume
        { (Station__station_record___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram station.ads:38 *);
        (* Check for RTE in the Pre of the subprogram station.ads:38 *);
        abstract ensures
        { True } begin  (let _ =
                       ((Station__altituderange__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                          < 920000)
                       in ())  end;
        (* Assume Pre of the subprogram station.ads:38 *);
        assume
        { ([GP_Pretty_Ada:12104] ((Station__altituderange__rep.to_rep
                                     ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                                    < 920000)) };
        (let ([mlw:proxy_symbol] [introduced] temp___old_215) =
        ( (Station__altituderange__rep.to_rep
             ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude))
        in (try
        ();
          ([GP_Sloc:station.adb:30:31] ([sloc:station.adb:30] ()));
          ([GP_Sloc:station.adb:30:11] ([sloc:station.adb:30] ()));
          ([GP_Sloc:station.adb:30:7] ([sloc:station.adb:30] (if
                                                             ([sloc:station.adb:30] ([branch_id=902]
                                                             _gnatprove_standard.Main.spark__branch
                                                             :=
                                                             (_gnatprove_standard.Boolean.andb
                                                                (Station__sealedinvariant___axiom.sealedinvariant
                                                                   ())
                                                                ((Station__altituderange__rep.to_rep
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                                                                   < 920000))));
                                                             ([branch_id=902] _gnatprove_standard.Main.spark__branch).bool__content
                                                             then
                                                             ();
                                                             ([GP_Sloc:station.adb:32:10] 
                                                             ([sloc:station.adb:32] ()));
                                                             ([GP_Sloc:station.adb:32:24] 
                                                             ([sloc:station.adb:32] ()));
                                                             ([GP_Sloc:station.adb:32:21] 
                                                             ([sloc:station.adb:32] (let ([mlw:proxy_symbol]
                                                             [introduced] temp___214)
                                                             =
                                                             (let ([mlw:proxy_symbol]
                                                               [introduced] temp___213)
                                                               =
                                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                                               in abstract
                                                               ensures
                                                               { True } begin 
                                                                (let _ =
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___213).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude
                                                               in ())  end;
                                                               --pp_record_update NOT IMPLEMENTED)
                                                             in (
                                                             Station__s.s__split_fields
                                                             :=
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___214).Station__station_record.__split_fields))))
                                                              else ())));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Station__altituderange__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                          = (([mlw:proxy_symbol] [introduced] temp___old_215)
                               + 1))
                       in ())  end)

end
