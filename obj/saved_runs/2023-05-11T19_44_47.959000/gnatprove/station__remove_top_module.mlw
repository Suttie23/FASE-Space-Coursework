module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type airlock_door
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = airlock_door,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref = { mutable airlock_door__content : airlock_door }
  
  function airlock_door__ref_airlock_door__content__projection (a: airlock_door__ref) : airlock_door =
    a.airlock_door__content
  
  meta "model_projection" function airlock_door__ref_airlock_door__content__projection
  
  meta "inline:no" function airlock_door__ref_airlock_door__content__projection
  
  val airlock_door__havoc (x: airlock_door__ref) : unit
    writes { x }
end

module Station__airlock_door__rep
  use Station__airlock_door as Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__module
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type module__
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = module__,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type module____ref = { mutable module____content : module__ }
  
  function module____ref_module____content__projection (a: module____ref) : module__ =
    a.module____content
  
  meta "model_projection" function module____ref_module____content__projection
  
  meta "inline:no" function module____ref_module____content__projection
  
  val module____havoc (x: module____ref) : unit
    writes { x }
end

module Station__module__rep
  use Station__module as Station__module
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__module.module__,
    predicate in_range = Station__module.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Station__module
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__module as Station__module
  use Station__module__rep as Station__module__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Station__module.module__
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_161 : int.
          if ((a__first <= temp___idx_161) /\ (temp___idx_161 <= a__last)) then
            ((Station__module__rep.to_rep ((get a) temp___idx_161))
               = (Station__module__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_161))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_161 : int.
                 if ((a__first <= temp___idx_161) /\
                       (temp___idx_161 <= a__last)) then
                   ((Station__module__rep.to_rep ((get a) temp___idx_161))
                      = (Station__module__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_161))))
                 else true)))
end

module Station__module_array
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__module as Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  
  type component_type = Station__module.module__
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Station__module.map,
    function array_bool_eq = Array__Int__Station__module.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Station__station_record__T3s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t3s = <range 820000 920000>
  
  val function first : int
    ensures { result = (820000 : int) }
  
  val function last : int
    ensures { result = (920000 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t3s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t3s__ref = { mutable t3s__content : t3s }
  
  function t3s__ref_t3s__content__projection (a: t3s__ref) : t3s =
    a.t3s__content
  
  meta "model_projection" function t3s__ref_t3s__content__projection
  
  meta "inline:no" function t3s__ref_t3s__content__projection
  
  val t3s__havoc (x: t3s__ref) : unit
    writes { x }
end

module Station__station_record__T3s__rep
  use Station__station_record__T3s as Station__station_record__T3s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Station__station_record__T3s.t3s) : int =
    Station__station_record__T3s.t3s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__station_record__T3s.t3s,
    predicate in_range = Station__station_record__T3s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__T4s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t4s = <range 0 3>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t4s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t4s__ref = { mutable t4s__content : t4s }
  
  function t4s__ref_t4s__content__projection (a: t4s__ref) : t4s =
    a.t4s__content
  
  meta "model_projection" function t4s__ref_t4s__content__projection
  
  meta "inline:no" function t4s__ref_t4s__content__projection
  
  val t4s__havoc (x: t4s__ref) : unit
    writes { x }
end

module Station__station_record__T4s__rep
  use Station__station_record__T4s as Station__station_record__T4s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Station__station_record__T4s.t4s) : int =
    Station__station_record__T4s.t4s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__station_record__T4s.t4s,
    predicate in_range = Station__station_record__T4s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Station__module_array as Station__module_array
  use Station__station_record__T3s as Station__station_record__T3s
  use Station__station_record__T3s__rep as Station__station_record__T3s__rep
  use Station__station_record__T4s as Station__station_record__T4s
  use Station__station_record__T4s__rep as Station__station_record__T4s__rep
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  
  type __split_fields = {
                       rec__station__station_record__door1 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__door2 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__altitude :
                         Station__station_record__T3s.t3s;
                       rec__station__station_record__modules :
                         Array__Int__Station__module.map;
                       rec__station__station_record__top_module_index :
                         Station__station_record__T4s.t4s
                       }
  
  function __split_fields_rec__station__station_record__door1__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door1
  
  meta "model_projection" function __split_fields_rec__station__station_record__door1__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door1__projection
  
  function __split_fields_rec__station__station_record__door2__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door2
  
  meta "model_projection" function __split_fields_rec__station__station_record__door2__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door2__projection
  
  function __split_fields_rec__station__station_record__altitude__projection (a: __split_fields) : 
    Station__station_record__T3s.t3s =
    a.rec__station__station_record__altitude
  
  meta "model_projection" function __split_fields_rec__station__station_record__altitude__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__altitude__projection
  
  function __split_fields_rec__station__station_record__modules__projection (a: __split_fields) : 
    Array__Int__Station__module.map =
    a.rec__station__station_record__modules
  
  meta "model_projection" function __split_fields_rec__station__station_record__modules__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__modules__projection
  
  function __split_fields_rec__station__station_record__top_module_index__projection (a: __split_fields) : 
    Station__station_record__T4s.t4s =
    a.rec__station__station_record__top_module_index
  
  meta "model_projection" function __split_fields_rec__station__station_record__top_module_index__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__top_module_index__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate station__station_record__door1__pred (a: __rep) = true
  
  val station__station_record__door1__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door1__pred (a : __rep)) }
  
  val rec__station__station_record__door1_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door1__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door1)) }
  
  predicate station__station_record__door2__pred (a: __rep) = true
  
  val station__station_record__door2__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door2__pred (a : __rep)) }
  
  val rec__station__station_record__door2_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door2__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door2)) }
  
  predicate station__station_record__altitude__pred (a: __rep) = true
  
  val station__station_record__altitude__pred (a: __rep) : bool
    ensures { result
                <->
                (station__station_record__altitude__pred (a : __rep)) }
  
  val rec__station__station_record__altitude_ (a: __rep) : Station__station_record__T3s.t3s
    requires { station__station_record__altitude__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__altitude)) }
  
  predicate station__station_record__modules__pred (a: __rep) = true
  
  val station__station_record__modules__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__modules__pred (a : __rep)) }
  
  val rec__station__station_record__modules_ (a: __rep) : Array__Int__Station__module.map
    requires { station__station_record__modules__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__modules)) }
  
  predicate station__station_record__top_module_index__pred (a: __rep) = true
  
  val station__station_record__top_module_index__pred (a: __rep) : bool
    ensures { result
                <->
                (station__station_record__top_module_index__pred (a : __rep)) }
  
  val rec__station__station_record__top_module_index_ (a: __rep) : Station__station_record__T4s.t4s
    requires { station__station_record__top_module_index__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__top_module_index)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Station__airlock_door__rep.to_rep
             ((__split_fields a).rec__station__station_record__door1))
            = (Station__airlock_door__rep.to_rep
                 ((__split_fields b).rec__station__station_record__door1))) /\
           ((Station__airlock_door__rep.to_rep
               ((__split_fields a).rec__station__station_record__door2))
              = (Station__airlock_door__rep.to_rep
                   ((__split_fields b).rec__station__station_record__door2)))) /\
          ((((Station__station_record__T3s__rep.to_rep
                ((__split_fields a).rec__station__station_record__altitude))
               = (Station__station_record__T3s__rep.to_rep
                    ((__split_fields b).rec__station__station_record__altitude))) /\
              ((Station__module_array.bool_eq
                  ((__split_fields a).rec__station__station_record__modules))
                 ((__split_fields b).rec__station__station_record__modules))) /\
             ((Station__station_record__T4s__rep.to_rep
                 ((__split_fields a).rec__station__station_record__top_module_index))
                = (Station__station_record__T4s__rep.to_rep
                     ((__split_fields b).rec__station__station_record__top_module_index))))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Station__station_record
  use export Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type station_record = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function station__station_record__door1__first__bit : int
  
  val function station__station_record__door1__last__bit : int
  
  val function station__station_record__door1__position : int
  
  axiom station__station_record__door1__first__bit_axiom:
    (station__station_record__door1__first__bit >= (0 : int))
  
  axiom station__station_record__door1__last__bit_axiom:
    (station__station_record__door1__last__bit
       > station__station_record__door1__first__bit)
  
  axiom station__station_record__door1__position_axiom:
    (station__station_record__door1__position >= (0 : int))
  
  val function station__station_record__door2__first__bit : int
  
  val function station__station_record__door2__last__bit : int
  
  val function station__station_record__door2__position : int
  
  axiom station__station_record__door2__first__bit_axiom:
    (station__station_record__door2__first__bit >= (0 : int))
  
  axiom station__station_record__door2__last__bit_axiom:
    (station__station_record__door2__last__bit
       > station__station_record__door2__first__bit)
  
  axiom station__station_record__door2__position_axiom:
    (station__station_record__door2__position >= (0 : int))
  
  val function station__station_record__altitude__first__bit : int
  
  val function station__station_record__altitude__last__bit : int
  
  val function station__station_record__altitude__position : int
  
  axiom station__station_record__altitude__first__bit_axiom:
    (station__station_record__altitude__first__bit >= (0 : int))
  
  axiom station__station_record__altitude__last__bit_axiom:
    (station__station_record__altitude__last__bit
       > station__station_record__altitude__first__bit)
  
  axiom station__station_record__altitude__position_axiom:
    (station__station_record__altitude__position >= (0 : int))
  
  val function station__station_record__modules__first__bit : int
  
  val function station__station_record__modules__last__bit : int
  
  val function station__station_record__modules__position : int
  
  axiom station__station_record__modules__first__bit_axiom:
    (station__station_record__modules__first__bit >= (0 : int))
  
  axiom station__station_record__modules__last__bit_axiom:
    (station__station_record__modules__last__bit
       > station__station_record__modules__first__bit)
  
  axiom station__station_record__modules__position_axiom:
    (station__station_record__modules__position >= (0 : int))
  
  val function station__station_record__top_module_index__first__bit : 
    int
  
  val function station__station_record__top_module_index__last__bit : 
    int
  
  val function station__station_record__top_module_index__position : 
    int
  
  axiom station__station_record__top_module_index__first__bit_axiom:
    (station__station_record__top_module_index__first__bit >= (0 : int))
  
  axiom station__station_record__top_module_index__last__bit_axiom:
    (station__station_record__top_module_index__last__bit
       > station__station_record__top_module_index__first__bit)
  
  axiom station__station_record__top_module_index__position_axiom:
    (station__station_record__top_module_index__position >= (0 : int))
  
  val function user_eq (a: station_record) (b: station_record) : bool
  
  val function dummy : station_record
  
  type station_record__ref = {
                            mutable station_record__content : station_record
                            }
  
  function station_record__ref_station_record__content__projection (a: station_record__ref) : station_record =
    a.station_record__content
  
  meta "model_projection" function station_record__ref_station_record__content__projection
  
  meta "inline:no" function station_record__ref_station_record__content__projection
  
  val station_record__havoc (x: station_record__ref) : unit
    writes { x }
end

module Station__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Station__station_record___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__station_record as Station__station_record
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Station__station_record__T4s as Station__station_record__T4s
  use Station__station_record__T4s__rep as Station__station_record__T4s__rep
  
  predicate dynamic_invariant (temp___expr_193: Station__station_record.station_record) (temp___is_init_189: bool) (temp___skip_constant_190: bool) (temp___do_toplevel_191: bool) (temp___do_typ_inv_192: bool) =
    true
  
  val dynamic_invariant (temp___expr_193: Station__station_record.station_record) (temp___is_init_189: bool) (temp___skip_constant_190: bool) (temp___do_toplevel_191: bool) (temp___do_typ_inv_192: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_193 :
                          Station__station_record.station_record))
                      (temp___is_init_189 : bool))
                     (temp___skip_constant_190 : bool))
                    (temp___do_toplevel_191 : bool))
                   (temp___do_typ_inv_192 : bool)) }
  
  predicate default_initial_assumption (temp___expr_195: Station__station_record.station_record) (temp___skip_top_level_196: bool) =
    (((if (Station__station_record.station__station_record__door1__pred
             temp___expr_195) then
         ((Station__airlock_door__rep.to_rep
             ((Station__station_record.__split_fields temp___expr_195).
                Station__station_record.rec__station__station_record__door1))
            = (1 : int))
       else true) /\
        (if (Station__station_record.station__station_record__door2__pred
               temp___expr_195) then
           ((Station__airlock_door__rep.to_rep
               ((Station__station_record.__split_fields temp___expr_195).
                  Station__station_record.rec__station__station_record__door2))
              = (1 : int))
         else true)) /\
       (if (Station__station_record.station__station_record__top_module_index__pred
              temp___expr_195) then
          ((Station__station_record__T4s__rep.to_rep
              ((Station__station_record.__split_fields temp___expr_195).
                 Station__station_record.rec__station__station_record__top_module_index))
             = (0 : int))
        else true))
  
  val default_initial_assumption (temp___expr_195: Station__station_record.station_record) (temp___skip_top_level_196: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_195 : Station__station_record.station_record))
                   (temp___skip_top_level_196 : bool)) }
end

module Station__sealedinvariant
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val function sealedinvariant (Station__s___s__split_fields___: Station__station_record.__split_fields) : 
    bool
  
  val predicate sealedinvariant__function_guard (temp___result_162: bool) (Station__s___s__split_fields___: 
    Station__station_record.__split_fields)
end

module Station__sealedinvariant___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__s as Station__s
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__sealedinvariant as Station__sealedinvariant
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  val sealedinvariant (__void_param: unit) : bool
    reads { Station__s.s__split_fields }
    requires { true }
    writes {  }
    ensures { (((result
                   = (Station__sealedinvariant.sealedinvariant
                        (Station__station_record.__split_fields__content
                            Station__s.s__split_fields))) /\
                  ((Station__sealedinvariant.sealedinvariant__function_guard
                      result)
                     (Station__station_record.__split_fields__content
                         Station__s.s__split_fields))) /\
                 (result
                    = (((((Station__airlock_door__rep.to_rep
                             ((Station__station_record.__split_fields
                                  { Station__station_record.__split_fields =
                                      (Station__station_record.__split_fields__content
                                          Station__s.s__split_fields) }).
                                Station__station_record.rec__station__station_record__door1))
                            = (0 : int)) /\
                           ((Station__airlock_door__rep.to_rep
                               ((Station__station_record.__split_fields
                                    { Station__station_record.__split_fields =
                                        (Station__station_record.__split_fields__content
                                            Station__s.s__split_fields) }).
                                  Station__station_record.rec__station__station_record__door2))
                              = (1 : int))) \/
                          (((Station__airlock_door__rep.to_rep
                               ((Station__station_record.__split_fields
                                    { Station__station_record.__split_fields =
                                        (Station__station_record.__split_fields__content
                                            Station__s.s__split_fields) }).
                                  Station__station_record.rec__station__station_record__door1))
                              = (1 : int)) /\
                             ((Station__airlock_door__rep.to_rep
                                 ((Station__station_record.__split_fields
                                      { Station__station_record.__split_fields =
                                          (Station__station_record.__split_fields__content
                                              Station__s.s__split_fields) }).
                                    Station__station_record.rec__station__station_record__door2))
                                = (0 : int)))) \/
                         (((Station__airlock_door__rep.to_rep
                              ((Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__door1))
                             = (1 : int)) /\
                            ((Station__airlock_door__rep.to_rep
                                ((Station__station_record.__split_fields
                                     { Station__station_record.__split_fields =
                                         (Station__station_record.__split_fields__content
                                             Station__s.s__split_fields) }).
                                   Station__station_record.rec__station__station_record__door2))
                               = (1 : int)))))) }
  
  axiom sealedinvariant__post_axiom:
    forall Station__s___s__split_fields___ : Station__station_record.__split_fields
          [Station__sealedinvariant.sealedinvariant
             Station__s___s__split_fields___].
      ((((((Station__station_record___axiom.dynamic_invariant
              { Station__station_record.__split_fields =
                  Station__s___s__split_fields___ })
             True)
            True)
           True)
          True) ->
         (let result =
            Station__sealedinvariant.sealedinvariant
              Station__s___s__split_fields___ in
          if ((Station__sealedinvariant.sealedinvariant__function_guard
                 result)
                Station__s___s__split_fields___) then
            ((true /\ true) /\ true)
          else true))
  
  axiom sealedinvariant__def_axiom:
    forall Station__s___s__split_fields___ : Station__station_record.__split_fields
          [Station__sealedinvariant.sealedinvariant
             Station__s___s__split_fields___].
      ((Station__sealedinvariant.sealedinvariant
          Station__s___s__split_fields___)
         = (((((Station__airlock_door__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
                 = (0 : int)) /\
                ((Station__airlock_door__rep.to_rep
                    ((Station__station_record.__split_fields
                         { Station__station_record.__split_fields =
                             Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                   = (1 : int))) \/
               (((Station__airlock_door__rep.to_rep
                    ((Station__station_record.__split_fields
                         { Station__station_record.__split_fields =
                             Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
                   = (1 : int)) /\
                  ((Station__airlock_door__rep.to_rep
                      ((Station__station_record.__split_fields
                           { Station__station_record.__split_fields =
                               Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                     = (0 : int)))) \/
              (((Station__airlock_door__rep.to_rep
                   ((Station__station_record.__split_fields
                        { Station__station_record.__split_fields =
                            Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
                  = (1 : int)) /\
                 ((Station__airlock_door__rep.to_rep
                     ((Station__station_record.__split_fields
                          { Station__station_record.__split_fields =
                              Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                    = (1 : int)))))
end

module Station__remove_top_module__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Ada___ada__text_io__line_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function line_length (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) : int
  
  val predicate line_length__function_guard (temp___result_163: int) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private)
end

module Ada___ada__text_io__page_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function page_length (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) : int
  
  val predicate page_length__function_guard (temp___result_164: int) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private)
end

module Ada___ada__text_io__standard_in
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_in : Main.__private__ref
end

module Ada___ada__text_io__standard_out
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_out : Main.__private__ref
end

module Ada___ada__text_io__standard_err
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_err : Main.__private__ref
end

module Ada___ada__text_io__current_in
  use _gnatprove_standard.Main
  use int.Int
  
  val current_in : Main.__private__ref
end

module Ada___ada__text_io__current_out
  use _gnatprove_standard.Main
  use int.Int
  
  val current_out : Main.__private__ref
end

module Ada___ada__text_io__current_err
  use _gnatprove_standard.Main
  use int.Int
  
  val current_err : Main.__private__ref
end

module Ada___ada__text_io__file_system
  use _gnatprove_standard.Main
  use int.Int
  
  val file_system : Main.__private__ref
end

module Ada___ada__text_io__put_line__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  
  val put_line (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system }
    requires { true }
    writes { Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err, Ada___ada__text_io__file_system.file_system }
    ensures { (([@GP_Pretty_Ada:3825]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out))
                          (Main.__private__content
                              Ada___ada__text_io__current_err.current_err))
                         (Main.__private__content
                             Ada___ada__text_io__file_system.file_system)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err))
                        (Main.__private__content
                            Ada___ada__text_io__file_system.file_system)))) /\
                 ([@GP_Pretty_Ada:3831]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__standard_in.standard_in))
                                (Main.__private__content
                                    Ada___ada__text_io__standard_out.standard_out))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_err.standard_err))
                              (Main.__private__content
                                  Ada___ada__text_io__current_in.current_in))
                             (Main.__private__content
                                 Ada___ada__text_io__current_out.current_out))
                            (Main.__private__content
                                Ada___ada__text_io__current_err.current_err))
                           (Main.__private__content
                               Ada___ada__text_io__file_system.file_system)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__standard_in.standard_in))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_out.standard_out))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_err.standard_err))
                             (Main.__private__content
                                 Ada___ada__text_io__current_in.current_in))
                            (Main.__private__content
                                Ada___ada__text_io__current_out.current_out))
                           (Main.__private__content
                               Ada___ada__text_io__current_err.current_err))
                          (Main.__private__content
                              Ada___ada__text_io__file_system.file_system))))) }
end

module Station__remove_top_module__L_2__i
  use _gnatprove_standard.Main
  use int.Int
  
  val i : int__ref
end

module Station__remove_top_module__L_2
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_2
end

module Temp___String_Literal_373
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_373 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_373__def_axiom:
    forall __void_param : unit [temp___String_Literal_373 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_373 __void_param))
               (1 : int)))
           = (87 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_373 __void_param))
                 (2 : int)))
             = (65 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_373 __void_param))
                      (3 : int)))
                  = (82 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_373 __void_param))
                        (4 : int)))
                    = (78 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_373 __void_param))
                        (5 : int)))
                    = (73 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (6 : int)))
                      = (78 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_373 __void_param))
                        (7 : int)))
                    = (71 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (8 : int)))
                      = (58 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_373 __void_param))
                         (9 : int)))
                     = (32 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_373 __void_param))
                        (10 : int)))
                    = (67 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (11 : int)))
                      = (65 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (12 : int)))
                      = (78 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (13 : int)))
                        = (78 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (14 : int)))
                      = (79 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (15 : int)))
                        = (84 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_373 __void_param))
                           (16 : int)))
                       = (32 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_373 __void_param))
                        (17 : int)))
                    = (82 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (18 : int)))
                      = (69 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (19 : int)))
                      = (77 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (20 : int)))
                        = (79 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (21 : int)))
                      = (86 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (22 : int)))
                        = (69 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_373 __void_param))
                           (23 : int)))
                       = (32 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (24 : int)))
                      = (84 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (25 : int)))
                        = (72 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_373 __void_param))
                           (26 : int)))
                       = (69 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (27 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (28 : int)))
                          = (79 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_373 __void_param))
                             (29 : int)))
                         = (78 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_373 __void_param))
                        (30 : int)))
                    = (76 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (31 : int)))
                      = (89 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (32 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (33 : int)))
                        = (82 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (34 : int)))
                      = (69 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (35 : int)))
                        = (77 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_373 __void_param))
                           (36 : int)))
                       = (65 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (37 : int)))
                      = (73 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (38 : int)))
                        = (78 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (39 : int)))
                        = (73 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (40 : int)))
                          = (78 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (41 : int)))
                        = (71 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (42 : int)))
                          = (32 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_373 __void_param))
                             (43 : int)))
                         = (83 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_373 __void_param))
                          (44 : int)))
                      = (84 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (45 : int)))
                        = (65 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (46 : int)))
                        = (84 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (47 : int)))
                          = (73 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (48 : int)))
                        = (79 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (49 : int)))
                          = (78 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_373 __void_param))
                             (50 : int)))
                         = (32 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_373 __void_param))
                            (51 : int)))
                        = (77 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (52 : int)))
                          = (79 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_373 __void_param))
                             (53 : int)))
                         = (68 : int))) /\
                     ((((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_373 __void_param))
                              (54 : int)))
                          = (85 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_373 __void_param))
                                (55 : int)))
                            = (76 : int))) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_373 __void_param))
                               (56 : int)))
                           = (69 : int))))))))
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Station__remove_top_module__L_2__i___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__remove_top_module__L_2___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__airlock_door___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__airlock_door as Station__airlock_door
  
  predicate dynamic_invariant (temp___expr_169: int) (temp___is_init_165: bool) (temp___skip_constant_166: bool) (temp___do_toplevel_167: bool) (temp___do_typ_inv_168: bool) =
    if ((temp___is_init_165 = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last)) then
      (((Station__airlock_door.dynamic_property Station__airlock_door.first)
          Station__airlock_door.last)
         temp___expr_169)
    else true
  
  val dynamic_invariant (temp___expr_169: int) (temp___is_init_165: bool) (temp___skip_constant_166: bool) (temp___do_toplevel_167: bool) (temp___do_typ_inv_168: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_169 : int))
                      (temp___is_init_165 : bool))
                     (temp___skip_constant_166 : bool))
                    (temp___do_toplevel_167 : bool))
                   (temp___do_typ_inv_168 : bool)) }
  
  predicate default_initial_assumption (temp___expr_170: int) (temp___skip_top_level_171: bool) =
    true
  
  val default_initial_assumption (temp___expr_170: int) (temp___skip_top_level_171: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_170 : int))
                   (temp___skip_top_level_171 : bool)) }
end

module Station__module___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__module as Station__module
  
  predicate dynamic_invariant (temp___expr_176: int) (temp___is_init_172: bool) (temp___skip_constant_173: bool) (temp___do_toplevel_174: bool) (temp___do_typ_inv_175: bool) =
    if ((temp___is_init_172 = True) \/
          (Station__module.first <= Station__module.last)) then
      (((Station__module.dynamic_property Station__module.first)
          Station__module.last)
         temp___expr_176)
    else true
  
  val dynamic_invariant (temp___expr_176: int) (temp___is_init_172: bool) (temp___skip_constant_173: bool) (temp___do_toplevel_174: bool) (temp___do_typ_inv_175: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_176 : int))
                      (temp___is_init_172 : bool))
                     (temp___skip_constant_173 : bool))
                    (temp___do_toplevel_174 : bool))
                   (temp___do_typ_inv_175 : bool)) }
  
  predicate default_initial_assumption (temp___expr_177: int) (temp___skip_top_level_178: bool) =
    true
  
  val default_initial_assumption (temp___expr_177: int) (temp___skip_top_level_178: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_177 : int))
                   (temp___skip_top_level_178 : bool)) }
end

module Station__module_array___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  
  predicate dynamic_invariant (temp___expr_183: Array__Int__Station__module.map) (temp___is_init_179: bool) (temp___skip_constant_180: bool) (temp___do_toplevel_181: bool) (temp___do_typ_inv_182: bool) =
    true
  
  val dynamic_invariant (temp___expr_183: Array__Int__Station__module.map) (temp___is_init_179: bool) (temp___skip_constant_180: bool) (temp___do_toplevel_181: bool) (temp___do_typ_inv_182: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_183 : Array__Int__Station__module.map))
                      (temp___is_init_179 : bool))
                     (temp___skip_constant_180 : bool))
                    (temp___do_toplevel_181 : bool))
                   (temp___do_typ_inv_182 : bool)) }
  
  predicate default_initial_assumption (temp___expr_185: Array__Int__Station__module.map) (temp___skip_top_level_186: bool) =
    true
  
  val default_initial_assumption (temp___expr_185: Array__Int__Station__module.map) (temp___skip_top_level_186: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_185 : Array__Int__Station__module.map))
                   (temp___skip_top_level_186 : bool)) }
end

module Station__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__remove_top_module__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Ada___ada__text_io__count
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type count = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = count,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type count__ref = { mutable count__content : count }
  
  function count__ref_count__content__projection (a: count__ref) : count =
    a.count__content
  
  meta "model_projection" function count__ref_count__content__projection
  
  meta "inline:no" function count__ref_count__content__projection
  
  val count__havoc (x: count__ref) : unit
    writes { x }
end

module Ada___ada__text_io__count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Ada___ada__text_io__count as Ada___ada__text_io__count
  
  predicate dynamic_invariant (temp___expr_231: int) (temp___is_init_227: bool) (temp___skip_constant_228: bool) (temp___do_toplevel_229: bool) (temp___do_typ_inv_230: bool) =
    if ((temp___is_init_227 = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last)) then
      (((Ada___ada__text_io__count.dynamic_property
           Ada___ada__text_io__count.first)
          Ada___ada__text_io__count.last)
         temp___expr_231)
    else true
  
  val dynamic_invariant (temp___expr_231: int) (temp___is_init_227: bool) (temp___skip_constant_228: bool) (temp___do_toplevel_229: bool) (temp___do_typ_inv_230: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_231 : int))
                      (temp___is_init_227 : bool))
                     (temp___skip_constant_228 : bool))
                    (temp___do_toplevel_229 : bool))
                   (temp___do_typ_inv_230 : bool)) }
  
  predicate default_initial_assumption (temp___expr_232: int) (temp___skip_top_level_233: bool) =
    true
  
  val default_initial_assumption (temp___expr_232: int) (temp___skip_top_level_233: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_232 : int))
                   (temp___skip_top_level_233 : bool)) }
end

module Ada___ada__text_io__line_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  
  val line_length (__void_param: unit) : int
    reads { Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err))
                        (Main.__private__content
                            Ada___ada__text_io__file_system.file_system))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom line_length__post_axiom:
    forall Ada___ada__text_io__standard_in___standard_in___ : Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private, Ada___ada__text_io__file_system___file_system___ : 
          Main.__private
          [((((((Ada___ada__text_io__line_length__2.line_length
                   Ada___ada__text_io__standard_in___standard_in___)
                  Ada___ada__text_io__standard_out___standard_out___)
                 Ada___ada__text_io__standard_err___standard_err___)
                Ada___ada__text_io__current_in___current_in___)
               Ada___ada__text_io__current_out___current_out___)
              Ada___ada__text_io__current_err___current_err___)
             Ada___ada__text_io__file_system___file_system___].
      let result =
        ((((((Ada___ada__text_io__line_length__2.line_length
                Ada___ada__text_io__standard_in___standard_in___)
               Ada___ada__text_io__standard_out___standard_out___)
              Ada___ada__text_io__standard_err___standard_err___)
             Ada___ada__text_io__current_in___current_in___)
            Ada___ada__text_io__current_out___current_out___)
           Ada___ada__text_io__current_err___current_err___)
          Ada___ada__text_io__file_system___file_system___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Ada___ada__text_io__page_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  
  val page_length (__void_param: unit) : int
    reads { Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__page_length__2.page_length
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err))
                        (Main.__private__content
                            Ada___ada__text_io__file_system.file_system))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom page_length__post_axiom:
    forall Ada___ada__text_io__standard_in___standard_in___ : Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private, Ada___ada__text_io__file_system___file_system___ : 
          Main.__private
          [((((((Ada___ada__text_io__page_length__2.page_length
                   Ada___ada__text_io__standard_in___standard_in___)
                  Ada___ada__text_io__standard_out___standard_out___)
                 Ada___ada__text_io__standard_err___standard_err___)
                Ada___ada__text_io__current_in___current_in___)
               Ada___ada__text_io__current_out___current_out___)
              Ada___ada__text_io__current_err___current_err___)
             Ada___ada__text_io__file_system___file_system___].
      let result =
        ((((((Ada___ada__text_io__page_length__2.page_length
                Ada___ada__text_io__standard_in___standard_in___)
               Ada___ada__text_io__standard_out___standard_out___)
              Ada___ada__text_io__standard_err___standard_err___)
             Ada___ada__text_io__current_in___current_in___)
            Ada___ada__text_io__current_out___current_out___)
           Ada___ada__text_io__current_err___current_err___)
          Ada___ada__text_io__file_system___file_system___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Station__station_record__T3s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__station_record__T4s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__remove_top_module__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__string as Standard__string
  use Station__s as Station__s
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__sealedinvariant as Station__sealedinvariant
  use Station__sealedinvariant___axiom as Station__sealedinvariant___axiom
  use Station__remove_top_module__s as Station__remove_top_module__s
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Station__remove_top_module__L_2__i as Station__remove_top_module__L_2__i
  use Station__module as Station__module
  use Station__module__rep as Station__module__rep
  use Array__Int__Station__module as Array__Int__Station__module
  use Station__station_record__T4s as Station__station_record__T4s
  use Station__station_record__T4s__rep as Station__station_record__T4s__rep
  use Station__remove_top_module__L_2 as Station__remove_top_module__L_2
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  use Temp___String_Literal_373 as Temp___String_Literal_373
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  use Array__Int__Station__module as Array__Int__Station__module
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Station__remove_top_module__L_2__i___axiom as Station__remove_top_module__L_2__i___axiom
  use Station__remove_top_module__L_2___axiom as Station__remove_top_module__L_2___axiom
  use Station__airlock_door___axiom as Station__airlock_door___axiom
  use Station__module___axiom as Station__module___axiom
  use Station__module_array___axiom as Station__module_array___axiom
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__s___axiom as Station__s___axiom
  use Station__sealedinvariant___axiom as Station__sealedinvariant___axiom
  use Station__remove_top_module__s___axiom as Station__remove_top_module__s___axiom
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
  use Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Station__station_record__T3s___axiom as Station__station_record__T3s___axiom
  use Station__station_record__T4s___axiom as Station__station_record__T4s___axiom
  
  let def (__void_param : unit)
    requires { [#"station.ads" 55 0 0] true }
    ensures { [#"station.ads" 55 0 0]
              [#"station.ads" 57 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@comment:     Post => S.Top_Module_Index >= 1;              ^ station.ads:57:14:VC_POSTCONDITION]
              [@GP_Id:13]
              [@GP_Sloc:station.ads:57:14]
              [@GP_Shape:pragargs__cmp]
              [@model_vc_post]
              [@GP_Sloc:station.ads:57:14]
              [@GP_Pretty_Ada:12536]
              ((Station__station_record__T4s__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__remove_top_module__s.s__split_fields) }).
                     Station__station_record.rec__station__station_record__top_module_index))
                 >= (1 : int)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram station.ads:55]
      ());
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__s.s__split_fields) })
            True)
           False)
          True)
         True };
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__remove_top_module__s.s__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram station.ads:55]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram station.ads:55]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               (Station__sealedinvariant___axiom.sealedinvariant ()))
              ((Boolean.andb
                  ((Station__station_record__T4s__rep.to_rep
                      ((Station__station_record.__split_fields
                           { Station__station_record.__split_fields =
                               (Station__station_record.__split_fields__content
                                   Station__remove_top_module__s.s__split_fields) }).
                         Station__station_record.rec__station__station_record__top_module_index))
                     >= (1 : int)))
                 ((Station__station_record__T4s__rep.to_rep
                     ((Station__station_record.__split_fields
                          { Station__station_record.__split_fields =
                              (Station__station_record.__split_fields__content
                                  Station__remove_top_module__s.s__split_fields) }).
                        Station__station_record.rec__station__station_record__top_module_index))
                    <= (3 : int))) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram station.ads:55] ());
     assume {
       (([@GP_Pretty_Ada:1505]
         ((epsilon temp___result_383: bool.
             ((temp___result_383
                 = (Station__sealedinvariant.sealedinvariant
                      (Station__station_record.__split_fields__content
                          Station__s.s__split_fields))) /\
                ((Station__sealedinvariant.sealedinvariant__function_guard
                    temp___result_383)
                   (Station__station_record.__split_fields__content
                       Station__s.s__split_fields))))
            = True)) /\
          (([@GP_Pretty_Ada:1511]
            ((Station__station_record__T4s__rep.to_rep
                ((Station__station_record.__split_fields
                     { Station__station_record.__split_fields =
                         (Station__station_record.__split_fields__content
                             Station__remove_top_module__s.s__split_fields) }).
                   Station__station_record.rec__station__station_record__top_module_index))
               >= (1 : int))) /\
             ([@GP_Pretty_Ada:1517]
              ((Station__station_record__T4s__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__remove_top_module__s.s__split_fields) }).
                     Station__station_record.rec__station__station_record__top_module_index))
                 <= (3 : int))))) };
     (try
        ([#"station.adb" 89 0 0] ());
        ([@GP_Sloc:station.adb:89:37]
         [#"station.adb" 89 0 0]
         (let temp___361 = 1 : int in
          let temp___362 = 3 : int in
          ([@GNAT-comment:Translation of an unrolled Ada loop from station.adb:89]
           ());
          ([#"station.adb" 89 0 0]
           (try
              let temp___loop_entry_378 =
                { Station__station_record.__split_fields =
                    (Station__station_record.__split_fields__content
                        Station__remove_top_module__s.s__split_fields) } in
              ([@GNAT-comment:Unrolling of the loop statements of loop station.adb:89]
               ());
              ([#"station.adb" 89 0 0]
               (Station__remove_top_module__L_2__i.i.int__content <-
                  (3 : int)));
              ([@GP_Sloc:station.adb:90:7]
               [#"station.adb" 90 0 0]
               (if (([#"station.adb" 90 0 0]
                     [#"station.adb" 90 0 0]
                     (([@branch_id=1115] Main.spark__branch).bool__content <-
                        ((Station__module__rep.to_rep
                            (let temp___377 =
                               (Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__remove_top_module__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__modules in
                             (Array__Int__Station__module.get temp___377)
                               (Station__remove_top_module__L_2__i.i.int__content)))
                           <> (3 : int))));
                    (([@branch_id=1115] Main.spark__branch).bool__content)) then
                  (([@GP_Sloc:station.adb:91:26]
                    [#"station.adb" 91 0 0]
                    (let temp___366 =
                       let temp___365 =
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__remove_top_module__s.s__split_fields) } in
                       ([#"station.adb" 91 0 0]
                        (begin
                           ensures { true }
                           let _ =
                             let _ =
                               (Station__station_record.__split_fields
                                   temp___365).Station__station_record.rec__station__station_record__modules in
                             () in
                           ()
                         end));
                       ({ temp___365 with
                          Station__station_record.__split_fields =
                            ({ (Station__station_record.__split_fields
                                   temp___365) with
                               Station__station_record.rec__station__station_record__modules =
                                 (let temp___364 =
                                    (Station__station_record.__split_fields
                                        { Station__station_record.__split_fields =
                                            (Station__station_record.__split_fields__content
                                                Station__remove_top_module__s.s__split_fields) }).
                                      Station__station_record.rec__station__station_record__modules in
                                  ((Array__Int__Station__module.set
                                      ((Station__station_record.__split_fields
                                           { Station__station_record.__split_fields =
                                               (Station__station_record.__split_fields__content
                                                   Station__remove_top_module__s.s__split_fields) }).
                                         Station__station_record.rec__station__station_record__modules))
                                     (Station__remove_top_module__L_2__i.i.int__content))
                                    (Station__module__rep.of_rep (3 : int))) }) }) in
                     [#"station.adb" 91 0 0]
                     (Station__remove_top_module__s.s__split_fields.Station__station_record.__split_fields__content <-
                        (Station__station_record.__split_fields temp___366))));
                   ([@GP_Sloc:station.adb:92:32]
                    [#"station.adb" 92 0 0]
                    (let temp___369 =
                       let temp___368 =
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__remove_top_module__s.s__split_fields) } in
                       ([#"station.adb" 92 0 0]
                        (begin
                           ensures { true }
                           let _ =
                             let _ =
                               (Station__station_record.__split_fields
                                   temp___368).Station__station_record.rec__station__station_record__top_module_index in
                             () in
                           ()
                         end));
                       ({ temp___368 with
                          Station__station_record.__split_fields =
                            ({ (Station__station_record.__split_fields
                                   temp___368) with
                               Station__station_record.rec__station__station_record__top_module_index =
                                 (Station__station_record__T4s__rep.of_rep
                                    ([#"station.adb" 92 0 0]
                                     [@GP_Id:12]
                                     [@vc:annotation]
                                     [@GP_Shape:L_2_while__if__s_assign__sub]
                                     [@GP_Sloc:station.adb:92:54]
                                     [@GP_Reason:VC_RANGE_CHECK]
                                     [@comment:            S.Top_Module_Index := S.Top_Module_Index - 1;                                                      ^ station.adb:92:54:VC_RANGE_CHECK]
                                     (Station__station_record__T4s.range_check_
                                        ((Station__station_record__T4s__rep.to_rep
                                            ((Station__station_record.__split_fields
                                                 { Station__station_record.__split_fields =
                                                     (Station__station_record.__split_fields__content
                                                         Station__remove_top_module__s.s__split_fields) }).
                                               Station__station_record.rec__station__station_record__top_module_index))
                                           - (1 : int))))) }) }) in
                     Station__remove_top_module__s.s__split_fields.Station__station_record.__split_fields__content <-
                       (Station__station_record.__split_fields temp___369)));
                   ([@GP_Sloc:station.adb:93:13]
                    [#"station.adb" 93 0 0]
                    [#"station.adb" 93 0 0]
                    (raise Station__remove_top_module__L_2.L_2)))
                else
                  ([@GP_Sloc:station.adb:94:10]
                   (if (([#"station.adb" 94 0 0]
                         [#"station.adb" 94 0 0]
                         (([@branch_id=1141] Main.spark__branch).bool__content <-
                            ((Boolean.andb
                                ((Boolean.andb
                                    ((Station__station_record__T4s__rep.to_rep
                                        ((Station__station_record.__split_fields
                                             { Station__station_record.__split_fields =
                                                 (Station__station_record.__split_fields__content
                                                     Station__remove_top_module__s.s__split_fields) }).
                                           Station__station_record.rec__station__station_record__top_module_index))
                                       = (1 : int)))
                                   ((Station__module__rep.to_rep
                                       (let temp___375 =
                                          (Station__station_record.__split_fields
                                              { Station__station_record.__split_fields =
                                                  (Station__station_record.__split_fields__content
                                                      Station__remove_top_module__s.s__split_fields) }).
                                            Station__station_record.rec__station__station_record__modules in
                                        (Array__Int__Station__module.get
                                           temp___375)
                                          (2 : int)))
                                      = (3 : int))))
                               ((Station__module__rep.to_rep
                                   (let temp___376 =
                                      (Station__station_record.__split_fields
                                          { Station__station_record.__split_fields =
                                              (Station__station_record.__split_fields__content
                                                  Station__remove_top_module__s.s__split_fields) }).
                                        Station__station_record.rec__station__station_record__modules in
                                    (Array__Int__Station__module.get
                                       temp___376)
                                      (3 : int)))
                                  = (3 : int)))));
                        (([@branch_id=1141] Main.spark__branch).bool__content)) then
                      (([@GP_Sloc:station.adb:95:32]
                        [#"station.adb" 95 0 0]
                        (let temp___372 =
                           let temp___371 =
                             { Station__station_record.__split_fields =
                                 (Station__station_record.__split_fields__content
                                     Station__remove_top_module__s.s__split_fields) } in
                           ([#"station.adb" 95 0 0]
                            (begin
                               ensures { true }
                               let _ =
                                 let _ =
                                   (Station__station_record.__split_fields
                                       temp___371).Station__station_record.rec__station__station_record__top_module_index in
                                 () in
                               ()
                             end));
                           ({ temp___371 with
                              Station__station_record.__split_fields =
                                ({ (Station__station_record.__split_fields
                                       temp___371) with
                                   Station__station_record.rec__station__station_record__top_module_index =
                                     (1 : Station__station_record__T4s.t4s) }) }) in
                         [#"station.adb" 95 0 0]
                         (Station__remove_top_module__s.s__split_fields.
                            Station__station_record.__split_fields__content <-
                            (Station__station_record.__split_fields
                                temp___372))));
                       ([@GP_Sloc:station.adb:96:13]
                        [#"station.adb" 96 0 0] ());
                       ([@GP_Sloc:station.adb:96:13]
                        [#"station.adb" 96 0 0]
                        (([#"station.adb" 96 0 0] (val _f : unit in
                                                   _f));
                         (Ada___ada__text_io__put_line__2___axiom.put_line
                            (let temp___374 =
                               Temp___String_Literal_373.temp___String_Literal_373
                                 () in
                             ((Standard__string.of_array temp___374)
                                (1 : int))
                               (56 : int)))));
                       ([@GP_Sloc:station.adb:97:13]
                        [#"station.adb" 97 0 0]
                        [#"station.adb" 97 0 0]
                        (raise Station__remove_top_module__L_2.L_2)))
                    else ()))));
              (Station__remove_top_module__L_2__i.i.int__content <- (2 : int));
              ([@GP_Sloc:station.adb:90:7]
               [#"station.adb" 90 0 0]
               (if (([#"station.adb" 90 0 0]
                     [#"station.adb" 90 0 0]
                     (([@branch_id=1115] Main.spark__branch).bool__content <-
                        ((Station__module__rep.to_rep
                            (let temp___377 =
                               (Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__remove_top_module__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__modules in
                             (Array__Int__Station__module.get temp___377)
                               (Station__remove_top_module__L_2__i.i.int__content)))
                           <> (3 : int))));
                    (([@branch_id=1115] Main.spark__branch).bool__content)) then
                  (([@GP_Sloc:station.adb:91:26]
                    [#"station.adb" 91 0 0]
                    (let temp___366 =
                       let temp___365 =
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__remove_top_module__s.s__split_fields) } in
                       ([#"station.adb" 91 0 0]
                        (begin
                           ensures { true }
                           let _ =
                             let _ =
                               (Station__station_record.__split_fields
                                   temp___365).Station__station_record.rec__station__station_record__modules in
                             () in
                           ()
                         end));
                       ({ temp___365 with
                          Station__station_record.__split_fields =
                            ({ (Station__station_record.__split_fields
                                   temp___365) with
                               Station__station_record.rec__station__station_record__modules =
                                 (let temp___364 =
                                    (Station__station_record.__split_fields
                                        { Station__station_record.__split_fields =
                                            (Station__station_record.__split_fields__content
                                                Station__remove_top_module__s.s__split_fields) }).
                                      Station__station_record.rec__station__station_record__modules in
                                  ((Array__Int__Station__module.set
                                      ((Station__station_record.__split_fields
                                           { Station__station_record.__split_fields =
                                               (Station__station_record.__split_fields__content
                                                   Station__remove_top_module__s.s__split_fields) }).
                                         Station__station_record.rec__station__station_record__modules))
                                     (Station__remove_top_module__L_2__i.i.int__content))
                                    (Station__module__rep.of_rep (3 : int))) }) }) in
                     [#"station.adb" 91 0 0]
                     (Station__remove_top_module__s.s__split_fields.Station__station_record.__split_fields__content <-
                        (Station__station_record.__split_fields temp___366))));
                   ([@GP_Sloc:station.adb:92:32]
                    [#"station.adb" 92 0 0]
                    (let temp___369 =
                       let temp___368 =
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__remove_top_module__s.s__split_fields) } in
                       ([#"station.adb" 92 0 0]
                        (begin
                           ensures { true }
                           let _ =
                             let _ =
                               (Station__station_record.__split_fields
                                   temp___368).Station__station_record.rec__station__station_record__top_module_index in
                             () in
                           ()
                         end));
                       ({ temp___368 with
                          Station__station_record.__split_fields =
                            ({ (Station__station_record.__split_fields
                                   temp___368) with
                               Station__station_record.rec__station__station_record__top_module_index =
                                 (Station__station_record__T4s__rep.of_rep
                                    ([#"station.adb" 92 0 0]
                                     [@GP_Id:12]
                                     [@vc:annotation]
                                     [@GP_Shape:L_2_while__if__s_assign__sub]
                                     [@GP_Sloc:station.adb:92:54]
                                     [@GP_Reason:VC_RANGE_CHECK]
                                     [@comment:            S.Top_Module_Index := S.Top_Module_Index - 1;                                                      ^ station.adb:92:54:VC_RANGE_CHECK]
                                     (Station__station_record__T4s.range_check_
                                        ((Station__station_record__T4s__rep.to_rep
                                            ((Station__station_record.__split_fields
                                                 { Station__station_record.__split_fields =
                                                     (Station__station_record.__split_fields__content
                                                         Station__remove_top_module__s.s__split_fields) }).
                                               Station__station_record.rec__station__station_record__top_module_index))
                                           - (1 : int))))) }) }) in
                     Station__remove_top_module__s.s__split_fields.Station__station_record.__split_fields__content <-
                       (Station__station_record.__split_fields temp___369)));
                   ([@GP_Sloc:station.adb:93:13]
                    [#"station.adb" 93 0 0]
                    [#"station.adb" 93 0 0]
                    (raise Station__remove_top_module__L_2.L_2)))
                else
                  ([@GP_Sloc:station.adb:94:10]
                   (if (([#"station.adb" 94 0 0]
                         [#"station.adb" 94 0 0]
                         (([@branch_id=1141] Main.spark__branch).bool__content <-
                            ((Boolean.andb
                                ((Boolean.andb
                                    ((Station__station_record__T4s__rep.to_rep
                                        ((Station__station_record.__split_fields
                                             { Station__station_record.__split_fields =
                                                 (Station__station_record.__split_fields__content
                                                     Station__remove_top_module__s.s__split_fields) }).
                                           Station__station_record.rec__station__station_record__top_module_index))
                                       = (1 : int)))
                                   ((Station__module__rep.to_rep
                                       (let temp___375 =
                                          (Station__station_record.__split_fields
                                              { Station__station_record.__split_fields =
                                                  (Station__station_record.__split_fields__content
                                                      Station__remove_top_module__s.s__split_fields) }).
                                            Station__station_record.rec__station__station_record__modules in
                                        (Array__Int__Station__module.get
                                           temp___375)
                                          (2 : int)))
                                      = (3 : int))))
                               ((Station__module__rep.to_rep
                                   (let temp___376 =
                                      (Station__station_record.__split_fields
                                          { Station__station_record.__split_fields =
                                              (Station__station_record.__split_fields__content
                                                  Station__remove_top_module__s.s__split_fields) }).
                                        Station__station_record.rec__station__station_record__modules in
                                    (Array__Int__Station__module.get
                                       temp___376)
                                      (3 : int)))
                                  = (3 : int)))));
                        (([@branch_id=1141] Main.spark__branch).bool__content)) then
                      (([@GP_Sloc:station.adb:95:32]
                        [#"station.adb" 95 0 0]
                        (let temp___372 =
                           let temp___371 =
                             { Station__station_record.__split_fields =
                                 (Station__station_record.__split_fields__content
                                     Station__remove_top_module__s.s__split_fields) } in
                           ([#"station.adb" 95 0 0]
                            (begin
                               ensures { true }
                               let _ =
                                 let _ =
                                   (Station__station_record.__split_fields
                                       temp___371).Station__station_record.rec__station__station_record__top_module_index in
                                 () in
                               ()
                             end));
                           ({ temp___371 with
                              Station__station_record.__split_fields =
                                ({ (Station__station_record.__split_fields
                                       temp___371) with
                                   Station__station_record.rec__station__station_record__top_module_index =
                                     (1 : Station__station_record__T4s.t4s) }) }) in
                         [#"station.adb" 95 0 0]
                         (Station__remove_top_module__s.s__split_fields.
                            Station__station_record.__split_fields__content <-
                            (Station__station_record.__split_fields
                                temp___372))));
                       ([@GP_Sloc:station.adb:96:13]
                        [#"station.adb" 96 0 0] ());
                       ([@GP_Sloc:station.adb:96:13]
                        [#"station.adb" 96 0 0]
                        (([#"station.adb" 96 0 0] (val _f : unit in
                                                   _f));
                         (Ada___ada__text_io__put_line__2___axiom.put_line
                            (let temp___374 =
                               Temp___String_Literal_373.temp___String_Literal_373
                                 () in
                             ((Standard__string.of_array temp___374)
                                (1 : int))
                               (56 : int)))));
                       ([@GP_Sloc:station.adb:97:13]
                        [#"station.adb" 97 0 0]
                        [#"station.adb" 97 0 0]
                        (raise Station__remove_top_module__L_2.L_2)))
                    else ()))));
              (Station__remove_top_module__L_2__i.i.int__content <- (1 : int));
              ([@GP_Sloc:station.adb:90:7]
               [#"station.adb" 90 0 0]
               (if (([#"station.adb" 90 0 0]
                     [#"station.adb" 90 0 0]
                     (([@branch_id=1115] Main.spark__branch).bool__content <-
                        ((Station__module__rep.to_rep
                            (let temp___377 =
                               (Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__remove_top_module__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__modules in
                             (Array__Int__Station__module.get temp___377)
                               (Station__remove_top_module__L_2__i.i.int__content)))
                           <> (3 : int))));
                    (([@branch_id=1115] Main.spark__branch).bool__content)) then
                  (([@GP_Sloc:station.adb:91:26]
                    [#"station.adb" 91 0 0]
                    (let temp___366 =
                       let temp___365 =
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__remove_top_module__s.s__split_fields) } in
                       ([#"station.adb" 91 0 0]
                        (begin
                           ensures { true }
                           let _ =
                             let _ =
                               (Station__station_record.__split_fields
                                   temp___365).Station__station_record.rec__station__station_record__modules in
                             () in
                           ()
                         end));
                       ({ temp___365 with
                          Station__station_record.__split_fields =
                            ({ (Station__station_record.__split_fields
                                   temp___365) with
                               Station__station_record.rec__station__station_record__modules =
                                 (let temp___364 =
                                    (Station__station_record.__split_fields
                                        { Station__station_record.__split_fields =
                                            (Station__station_record.__split_fields__content
                                                Station__remove_top_module__s.s__split_fields) }).
                                      Station__station_record.rec__station__station_record__modules in
                                  ((Array__Int__Station__module.set
                                      ((Station__station_record.__split_fields
                                           { Station__station_record.__split_fields =
                                               (Station__station_record.__split_fields__content
                                                   Station__remove_top_module__s.s__split_fields) }).
                                         Station__station_record.rec__station__station_record__modules))
                                     (Station__remove_top_module__L_2__i.i.int__content))
                                    (Station__module__rep.of_rep (3 : int))) }) }) in
                     [#"station.adb" 91 0 0]
                     (Station__remove_top_module__s.s__split_fields.Station__station_record.__split_fields__content <-
                        (Station__station_record.__split_fields temp___366))));
                   ([@GP_Sloc:station.adb:92:32]
                    [#"station.adb" 92 0 0]
                    (let temp___369 =
                       let temp___368 =
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__remove_top_module__s.s__split_fields) } in
                       ([#"station.adb" 92 0 0]
                        (begin
                           ensures { true }
                           let _ =
                             let _ =
                               (Station__station_record.__split_fields
                                   temp___368).Station__station_record.rec__station__station_record__top_module_index in
                             () in
                           ()
                         end));
                       ({ temp___368 with
                          Station__station_record.__split_fields =
                            ({ (Station__station_record.__split_fields
                                   temp___368) with
                               Station__station_record.rec__station__station_record__top_module_index =
                                 (Station__station_record__T4s__rep.of_rep
                                    ([#"station.adb" 92 0 0]
                                     [@GP_Id:12]
                                     [@vc:annotation]
                                     [@GP_Shape:L_2_while__if__s_assign__sub]
                                     [@GP_Sloc:station.adb:92:54]
                                     [@GP_Reason:VC_RANGE_CHECK]
                                     [@comment:            S.Top_Module_Index := S.Top_Module_Index - 1;                                                      ^ station.adb:92:54:VC_RANGE_CHECK]
                                     (Station__station_record__T4s.range_check_
                                        ((Station__station_record__T4s__rep.to_rep
                                            ((Station__station_record.__split_fields
                                                 { Station__station_record.__split_fields =
                                                     (Station__station_record.__split_fields__content
                                                         Station__remove_top_module__s.s__split_fields) }).
                                               Station__station_record.rec__station__station_record__top_module_index))
                                           - (1 : int))))) }) }) in
                     Station__remove_top_module__s.s__split_fields.Station__station_record.__split_fields__content <-
                       (Station__station_record.__split_fields temp___369)));
                   ([@GP_Sloc:station.adb:93:13]
                    [#"station.adb" 93 0 0]
                    [#"station.adb" 93 0 0]
                    (raise Station__remove_top_module__L_2.L_2)))
                else
                  ([@GP_Sloc:station.adb:94:10]
                   (if (([#"station.adb" 94 0 0]
                         [#"station.adb" 94 0 0]
                         (([@branch_id=1141] Main.spark__branch).bool__content <-
                            ((Boolean.andb
                                ((Boolean.andb
                                    ((Station__station_record__T4s__rep.to_rep
                                        ((Station__station_record.__split_fields
                                             { Station__station_record.__split_fields =
                                                 (Station__station_record.__split_fields__content
                                                     Station__remove_top_module__s.s__split_fields) }).
                                           Station__station_record.rec__station__station_record__top_module_index))
                                       = (1 : int)))
                                   ((Station__module__rep.to_rep
                                       (let temp___375 =
                                          (Station__station_record.__split_fields
                                              { Station__station_record.__split_fields =
                                                  (Station__station_record.__split_fields__content
                                                      Station__remove_top_module__s.s__split_fields) }).
                                            Station__station_record.rec__station__station_record__modules in
                                        (Array__Int__Station__module.get
                                           temp___375)
                                          (2 : int)))
                                      = (3 : int))))
                               ((Station__module__rep.to_rep
                                   (let temp___376 =
                                      (Station__station_record.__split_fields
                                          { Station__station_record.__split_fields =
                                              (Station__station_record.__split_fields__content
                                                  Station__remove_top_module__s.s__split_fields) }).
                                        Station__station_record.rec__station__station_record__modules in
                                    (Array__Int__Station__module.get
                                       temp___376)
                                      (3 : int)))
                                  = (3 : int)))));
                        (([@branch_id=1141] Main.spark__branch).bool__content)) then
                      (([@GP_Sloc:station.adb:95:32]
                        [#"station.adb" 95 0 0]
                        (let temp___372 =
                           let temp___371 =
                             { Station__station_record.__split_fields =
                                 (Station__station_record.__split_fields__content
                                     Station__remove_top_module__s.s__split_fields) } in
                           ([#"station.adb" 95 0 0]
                            (begin
                               ensures { true }
                               let _ =
                                 let _ =
                                   (Station__station_record.__split_fields
                                       temp___371).Station__station_record.rec__station__station_record__top_module_index in
                                 () in
                               ()
                             end));
                           ({ temp___371 with
                              Station__station_record.__split_fields =
                                ({ (Station__station_record.__split_fields
                                       temp___371) with
                                   Station__station_record.rec__station__station_record__top_module_index =
                                     (1 : Station__station_record__T4s.t4s) }) }) in
                         [#"station.adb" 95 0 0]
                         (Station__remove_top_module__s.s__split_fields.
                            Station__station_record.__split_fields__content <-
                            (Station__station_record.__split_fields
                                temp___372))));
                       ([@GP_Sloc:station.adb:96:13]
                        [#"station.adb" 96 0 0] ());
                       ([@GP_Sloc:station.adb:96:13]
                        [#"station.adb" 96 0 0]
                        (([#"station.adb" 96 0 0] (val _f : unit in
                                                   _f));
                         (Ada___ada__text_io__put_line__2___axiom.put_line
                            (let temp___374 =
                               Temp___String_Literal_373.temp___String_Literal_373
                                 () in
                             ((Standard__string.of_array temp___374)
                                (1 : int))
                               (56 : int)))));
                       ([@GP_Sloc:station.adb:97:13]
                        [#"station.adb" 97 0 0]
                        [#"station.adb" 97 0 0]
                        (raise Station__remove_top_module__L_2.L_2)))
                    else ()))))
            with Station__remove_top_module__L_2.L_2 -> ()
            end))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Station__station_record__T4s__rep.to_rep
                ((Station__station_record.__split_fields
                     { Station__station_record.__split_fields =
                         (Station__station_record.__split_fields__content
                             Station__remove_top_module__s.s__split_fields) }).
                   Station__station_record.rec__station__station_record__top_module_index))
               >= (1 : int)) in
          () in
        ()
      end))
end
