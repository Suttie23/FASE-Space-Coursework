(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
  
  use import int.Int
  use        Standard__string
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_string (x : _gnatprove_standard.Main.__image s : int)
    requires { True } ensures  { True } returns Standard__string.string__
  
  function   from_string (x : Standard__string.string__) requires { True }
    ensures  { True } returns _gnatprove_standard.Main.__image
  
  axiom to_string__first : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom to_string__length : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Array__Int__Standard__character
  
  function   index_Index_one () requires { True } ensures  { True } returns
    int = 1
  
  clone export _gnatprove_standard.Array__1__Concat with axiom . type component_type = Array__Int__Standard__character.component_type,
    type map = Array__Int__Standard__character.map, type Index.t = int,
    predicate Index.le = <=, predicate Index.lt = <, predicate Index.gt = >,
    function Index.add = +, function Index.sub = -,
    function Index.one = index_Index_one,
    function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlock_door  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlock_door,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref  = { mutable airlock_door__content : airlock_door }
  
  function   airlock_door__ref_airlock_door__content__projection
    (a : airlock_door__ref) requires {  } ensures  {  } returns
    airlock_door = a.airlock_door__content
  
  meta model_projection function airlock_door__ref_airlock_door__content__projection
  
  meta inline:no function airlock_door__ref_airlock_door__content__projection
  
  function   airlock_door__havoc (x : airlock_door__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door__rep
  
  use        Station__airlock_door
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "T1s" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T1s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t1s  = <range 820000 920000>
  
  function   first () requires { True } ensures  { True } returns
    int = 820000
  
  function   last () requires { True } ensures  { True } returns int = 920000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t1s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t1s__ref  = { mutable t1s__content : t1s }
  
  function   t1s__ref_t1s__content__projection (a : t1s__ref) requires {  }
    ensures  {  } returns t1s = a.t1s__content
  
  meta model_projection function t1s__ref_t1s__content__projection
  
  meta inline:no function t1s__ref_t1s__content__projection
  
  function   t1s__havoc (x : t1s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T1s" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T1s__rep
  
  use        Station__station_record__T1s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Station__station_record__T1s.t1s) requires { True }
    ensures  { True } returns int = (Station__station_record__T1s.t1s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__station_record__T1s.t1s,
    predicate in_range = Station__station_record__T1s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "station_record" defined at station.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Station__station_record__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__airlock_door
  use        Station__airlock_door__rep
  use        Station__station_record__T1s
  use        Station__station_record__T1s__rep
  
  type __split_fields  = { [model_trace:.1077]
                           [name:Door1]rec__station__station_record__door1 : Station__airlock_door.airlock_door;
                           [name:Door2]
                           [model_trace:.1083]rec__station__station_record__door2 : Station__airlock_door.airlock_door;
                           [name:Altitude]
                           [model_trace:.1088]rec__station__station_record__altitude : Station__station_record__T1s.t1s }
  
  function [model_trace:.1077] [name:Door1] 
    __split_fields_rec__station__station_record__door1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door1
  
  meta model_projection function __split_fields_rec__station__station_record__door1__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door1__projection
  
  function [name:Door2] [model_trace:.1083] 
    __split_fields_rec__station__station_record__door2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door2
  
  meta model_projection function __split_fields_rec__station__station_record__door2__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door2__projection
  
  function [name:Altitude] [model_trace:.1088] 
    __split_fields_rec__station__station_record__altitude__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__station_record__T1s.t1s = a.rec__station__station_record__altitude
  
  meta model_projection function __split_fields_rec__station__station_record__altitude__projection
  
  meta inline:no function __split_fields_rec__station__station_record__altitude__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   station__station_record__door1__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door1_ (a : __rep) requires
    { (station__station_record__door1__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door1) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__door2__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door2_ (a : __rep) requires
    { (station__station_record__door2__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door2) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__altitude__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__altitude_ (a : __rep) requires
    { (station__station_record__altitude__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__altitude) }
    returns Station__station_record__T1s.t1s
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Station__airlock_door__rep.to_rep
                a.__split_fields.rec__station__station_record__door1)
               = (Station__airlock_door__rep.to_rep
                    b.__split_fields.rec__station__station_record__door1)) /\
              ((Station__airlock_door__rep.to_rep
                  a.__split_fields.rec__station__station_record__door2)
                 = (Station__airlock_door__rep.to_rep
                      b.__split_fields.rec__station__station_record__door2))
              /\
              ((Station__station_record__T1s__rep.to_rep
                  a.__split_fields.rec__station__station_record__altitude)
                 = (Station__station_record__T1s__rep.to_rep
                      b.__split_fields.rec__station__station_record__altitude)))
           then True  else False)

end

(* Module for axiomatizing type "station_record" defined at station.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record
  
  use export Station__station_record__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type station_record  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   station__station_record__door1__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door1__first__bit_axiom : ((station__station_record__door1__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door1__last__bit_axiom : ((station__station_record__door1__last__bit
                                                              )
                                                             > (station__station_record__door1__first__bit
                                                                  ))
  
  axiom station__station_record__door1__position_axiom : ((station__station_record__door1__position
                                                             ) >= 0)
  
  function   station__station_record__door2__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door2__first__bit_axiom : ((station__station_record__door2__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door2__last__bit_axiom : ((station__station_record__door2__last__bit
                                                              )
                                                             > (station__station_record__door2__first__bit
                                                                  ))
  
  axiom station__station_record__door2__position_axiom : ((station__station_record__door2__position
                                                             ) >= 0)
  
  function   station__station_record__altitude__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__altitude__first__bit_axiom : ((station__station_record__altitude__first__bit
                                                                  ) >= 0)
  
  axiom station__station_record__altitude__last__bit_axiom : ((station__station_record__altitude__last__bit
                                                                 )
                                                                > (station__station_record__altitude__first__bit
                                                                    ))
  
  axiom station__station_record__altitude__position_axiom : ((station__station_record__altitude__position
                                                                ) >= 0)
  
  function   user_eq (a : station_record b : station_record) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns station_record
  
  type station_record__ref  = { mutable station_record__content : station_record }
  
  function   station_record__ref_station_record__content__projection
    (a : station_record__ref) requires {  } ensures  {  } returns
    station_record = a.station_record__content
  
  meta model_projection function station_record__ref_station_record__content__projection
  
  meta inline:no function station_record__ref_station_record__content__projection
  
  function   station_record__havoc (x : station_record__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "station_record" defined at station.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__station_record
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_174) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_175) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Station__station_record.station__station_record__door1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_175))
        then
        (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_175).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
           = ( 1))
        ) /\
          (if
          (Station__station_record.station__station_record__door2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_175))
          then
          (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_175).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
             = ( 1))
          ))

end

(* Module for defining a ref holding the value of variable "s" defined at station.ads:30, created in Gnat2Why.Decls.Translate_Variable *)
module Station__update_height__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  val s__split_fields [model_projected] [name:S]
  [model_trace:1201] [sloc:station.ads:30]: Station__station_record.__split_fields

end

(* Module for defining the constant "new_height" defined at station.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Station__update_height__new_height
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:New_Height] [model_trace:1204] [sloc:station.ads:30]
    new_height () requires {  } ensures  {  } returns int

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:3527] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out
                                     !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:3533] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out
                                       !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for defining a value for string literal  defined at station.adb:53, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_235
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_235 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_235__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:54, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_237
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_237 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_237__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:54, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_238
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_238 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_238__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:55, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_243
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_243 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_243__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:59, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_251
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_251 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_251__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:60, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_253
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_253 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_253__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:60, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_254
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_254 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_254__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:61, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_259
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_259 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_259__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving axioms for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__airlock_door___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__airlock_door
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last))
       then
       (Station__airlock_door.dynamic_property Station__airlock_door.first
          Station__airlock_door.last ([mlw:proxy_symbol]
          [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s" defined at station.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__update_height__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "new_height" defined at station.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__update_height__new_height___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_182) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_180) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_181) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_178) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_182))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_183) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_184) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "T1s" defined at station.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record__T1s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "update_height" defined at station.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Station__update_height__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Integer
  use        _gnatprove_standard.Boolean
  use        Standard_String__Img
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__positive
  use        Array__Int__Standard__character__Concat
  use        Standard__string
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__update_height__s
  use        Station__update_height__new_height
  use        Ada___ada__text_io__put_line__2___axiom
  use        Station__station_record__T1s
  use        Station__station_record__T1s__rep
  use        Temp___String_Literal_235
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_237
  use        Array__Int__Standard__character
  use        Temp___String_Literal_238
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_243
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_251
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_253
  use        Array__Int__Standard__character
  use        Temp___String_Literal_254
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_259
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Station__airlock_door___axiom
  use        Station__station_record___axiom
  use        Station__update_height__s___axiom
  use        Station__update_height__new_height___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Station__station_record__T1s___axiom
  
  function [GP_Subp:station.ads:30] [sloc:station.ads:30] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:station.ads:32] ([GP_Sloc:station.ads:32:14]
                             [GP_Reason:VC_POSTCONDITION] [GP_Id:13]
                             [GP_Shape:pragargs__cmp] [model_vc_post]
                             [comment:     Post => S.Altitude = New_Height;              ^ station.ads:32:14:VC_POSTCONDITION] 
                             ([GP_Sloc:station.ads:32:14]
                             [GP_Pretty_Ada:12118] ((Station__station_record__T1s__rep.to_rep
                                                       ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                                                      = Station__update_height__new_height.new_height)))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram station.ads:30 *);
        assume
        { (Station__station_record___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Station__update_height__new_height.new_height True False True
             True) };
        (* Assume moved pointers in outputs of the subprogram station.ads:30 *);
        (* Check for RTE in the Pre of the subprogram station.ads:30 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (Station__update_height__new_height.new_height
                             >= 820000)
                          (Station__update_height__new_height.new_height
                             <= 920000))
                       in ())  end;
        (* Assume Pre of the subprogram station.ads:30 *);
        assume
        { (([GP_Pretty_Ada:1215] (Station__update_height__new_height.new_height
                                    >= 820000)) /\
             ([GP_Pretty_Ada:1219] (Station__update_height__new_height.new_height
                                      <= 920000))) };
        (try
        ();
          ([GP_Sloc:station.adb:52:7] ([sloc:station.adb:52] (if
                                                             ([sloc:station.adb:52] ([branch_id=986]
                                                             _gnatprove_standard.Main.spark__branch
                                                             :=
                                                             (Station__update_height__new_height.new_height
                                                                < 820000)));
                                                             ([branch_id=986] _gnatprove_standard.Main.spark__branch).bool__content
                                                             then
                                                             ();
                                                             ([GP_Sloc:station.adb:53:10] 
                                                             ([sloc:station.adb:53] ()));
                                                             ([GP_Sloc:station.adb:53:10] 
                                                             ([sloc:station.adb:53] (
                                                              any
                                                               --pp_effects NOT IMPLEMENTED
                                                               pre {}
                                                             post {} return
                                                             unit);
                                                             (Ada___ada__text_io__put_line__2___axiom.put_line
                                                                (let ([mlw:proxy_symbol]
                                                                [introduced] temp___236)
                                                                =
                                                                ( (Temp___String_Literal_235.temp___String_Literal_235
                                                                    ())) in
                                                                (Standard__string.of_array
                                                                   ([mlw:proxy_symbol]
                                                                   [introduced] temp___236)
                                                                   1 0)));
                                                             ()));
                                                             ([GP_Sloc:station.adb:54:10] 
                                                             ([sloc:station.adb:54] ()));
                                                             ([GP_Sloc:station.adb:54:10] 
                                                             ([sloc:station.adb:54] (
                                                              any
                                                               --pp_effects NOT IMPLEMENTED
                                                               pre {}
                                                             post {} return
                                                             unit);
                                                             (Ada___ada__text_io__put_line__2___axiom.put_line
                                                                (let ([mlw:proxy_symbol]
                                                                [introduced] temp___242)
                                                                =
                                                                (Temp___String_Literal_237.temp___String_Literal_237
                                                                   ()) in
                                                                (let ([mlw:proxy_symbol]
                                                                [introduced] temp___241)
                                                                =
                                                                (let ([mlw:proxy_symbol]
                                                                  [introduced] temp___240)
                                                                  =
                                                                  (Standard_String__Img.to_string
                                                                    (Standard__integer.attr__ATTRIBUTE_IMAGE
                                                                    Station__update_height__new_height.new_height)
                                                                    12) in
                                                                  (let ([mlw:proxy_symbol]
                                                                  [introduced] temp___239)
                                                                  =
                                                                  (Temp___String_Literal_238.temp___String_Literal_238
                                                                    ()) in
                                                                  (Standard__string.of_array
                                                                    (Array__Int__Standard__character__Concat.concat
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___239)
                                                                    1 9
                                                                    (Standard__string.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___240))
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___240))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___240)))
                                                                    1
                                                                    ([sloc:station.adb:54] 
                                                                    ([comment:         Put_Line ("WARNING: " & New_Height'Image & " IS TOO LOW, MAINTAINING CURRENT ORBIT");                                ^ station.adb:54:32:VC_RANGE_CHECK]
                                                                    [GP_Shape:if__call_put_line__concat__concat]
                                                                    [vc:annotation]
                                                                    [GP_Sloc:station.adb:54:32]
                                                                    [GP_Reason:VC_RANGE_CHECK]
                                                                    [GP_Id:8] (
                                                                    Standard__positive.range_check_
                                                                    ((1
                                                                    + ((_gnatprove_standard.Integer.length
                                                                    1 9)
                                                                    + (_gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___240))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___240)))))
                                                                    - 1)))))))
                                                                in
                                                                (if
                                                                ((Standard__string.length
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                   = 0)
                                                                then
                                                                (Standard__string.of_array
                                                                   ([mlw:proxy_symbol]
                                                                   [introduced] temp___242)
                                                                   1 38)
                                                                 else
                                                                (Standard__string.of_array
                                                                   (Array__Int__Standard__character__Concat.concat
                                                                    (Standard__string.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___242)
                                                                    1 38)
                                                                   (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                   ([sloc:station.adb:54] 
                                                                   ([vc:annotation]
                                                                   [GP_Reason:VC_RANGE_CHECK]
                                                                   [GP_Shape:if__call_put_line__concat]
                                                                   [comment:         Put_Line ("WARNING: " & New_Height'Image & " IS TOO LOW, MAINTAINING CURRENT ORBIT");                                                   ^ station.adb:54:51:VC_RANGE_CHECK]
                                                                   [GP_Id:9]
                                                                   [GP_Sloc:station.adb:54:51] (
                                                                   Standard__positive.range_check_
                                                                    (((Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                    + ((_gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___241)))
                                                                    + (_gnatprove_standard.Integer.length
                                                                    1 38)))
                                                                    - 1)))))))));
                                                             ()));
                                      ([GP_Sloc:station.adb:55:10] ([sloc:station.adb:55] ()));
                                      ([GP_Sloc:station.adb:55:10] ([sloc:station.adb:55] (
                                                                    any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                                                   post {
                                                                   } return
                                                                   unit);
                                      (Ada___ada__text_io__put_line__2___axiom.put_line
                                         (let ([mlw:proxy_symbol]
                                         [introduced] temp___244) =
                                         ( (Temp___String_Literal_243.temp___String_Literal_243
                                              ())) in
                                         (Standard__string.of_array
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___244) 1 0)));
                                      ()));
          ([GP_Sloc:station.adb:56:21] ([sloc:station.adb:56] (let ([mlw:proxy_symbol]
                                       [introduced] temp___247) =
                                       (let ([mlw:proxy_symbol]
                                         [introduced] temp___246) =
                                         ( --pp_record_aggregate NOT IMPLEMENTED)
                                         in abstract ensures
                                         { True } begin  (let _ =
                                                        ([mlw:proxy_symbol]
                                                          [introduced] temp___246).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude
                                                        in ())  end;
                                         --pp_record_update NOT IMPLEMENTED)
                                       in (
                                       Station__update_height__s.s__split_fields
                                       :=
                                       ([mlw:proxy_symbol]
                                         [introduced] temp___247).Station__station_record.__split_fields))));
          ([GP_Sloc:station.adb:57:10] ([sloc:station.adb:57] abstract
                                       ensures
                                       { True } begin  (let _ = ( 1000000000)
                                                      in ())  end))  else
          ([GP_Sloc:station.adb:58:8] (if
                                      ([sloc:station.adb:58] ([branch_id=1015]
                                      _gnatprove_standard.Main.spark__branch
                                      :=
                                      (Station__update_height__new_height.new_height
                                         > 920000)));
                                      ([branch_id=1015] _gnatprove_standard.Main.spark__branch).bool__content
                                      then
                                      ();
                                      ([GP_Sloc:station.adb:59:10] ([sloc:station.adb:59] ()));
                                      ([GP_Sloc:station.adb:59:10] ([sloc:station.adb:59] (
                                                                    any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                                                   post {
                                                                   } return
                                                                   unit);
                                      (Ada___ada__text_io__put_line__2___axiom.put_line
                                         (let ([mlw:proxy_symbol]
                                         [introduced] temp___252) =
                                         ( (Temp___String_Literal_251.temp___String_Literal_251
                                              ())) in
                                         (Standard__string.of_array
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___252) 1 0)));
                                      ()));
                                      ([GP_Sloc:station.adb:60:10] ([sloc:station.adb:60] ()));
                                      ([GP_Sloc:station.adb:60:10] ([sloc:station.adb:60] (
                                                                    any
                                                                    --pp_effects NOT IMPLEMENTED
                                                                    pre {
                                                                    }
                                                                   post {
                                                                   } return
                                                                   unit);
                                      (Ada___ada__text_io__put_line__2___axiom.put_line
                                         (let ([mlw:proxy_symbol]
                                         [introduced] temp___258) =
                                         (Temp___String_Literal_253.temp___String_Literal_253
                                            ()) in (let ([mlw:proxy_symbol]
                                         [introduced] temp___257) =
                                         (let ([mlw:proxy_symbol]
                                           [introduced] temp___256) =
                                           (Standard_String__Img.to_string
                                              (Standard__integer.attr__ATTRIBUTE_IMAGE
                                                 Station__update_height__new_height.new_height)
                                              12) in (let ([mlw:proxy_symbol]
                                           [introduced] temp___255) =
                                           (Temp___String_Literal_254.temp___String_Literal_254
                                              ()) in
                                           (Standard__string.of_array
                                              (Array__Int__Standard__character__Concat.concat
                                                 ([mlw:proxy_symbol]
                                                 [introduced] temp___255) 1 9
                                                 (Standard__string.to_array
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___256))
                                                 (Standard__string.first
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___256))
                                                 (Standard__string.last
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___256)))
                                              1
                                              ([sloc:station.adb:60] 
                                              ([GP_Id:11]
                                              [comment:         Put_Line ("WARNING: " & New_Height'Image & " IS TOO HIGH, MAINTAINING CURRENT ORBIT");                                ^ station.adb:60:32:VC_RANGE_CHECK]
                                              [GP_Sloc:station.adb:60:32]
                                              [GP_Shape:if__call_put_line__concat__concat]
                                              [vc:annotation]
                                              [GP_Reason:VC_RANGE_CHECK] (
                                              Standard__positive.range_check_
                                                ((1
                                                    + ((_gnatprove_standard.Integer.length
                                                          1 9)
                                                         + (_gnatprove_standard.Integer.length
                                                              (Standard__string.first
                                                                 ([mlw:proxy_symbol]
                                                                 [introduced] temp___256))
                                                              (Standard__string.last
                                                                 ([mlw:proxy_symbol]
                                                                 [introduced] temp___256)))))
                                                   - 1))))))) in
                                         (if
                                         ((Standard__string.length
                                             ([mlw:proxy_symbol]
                                             [introduced] temp___257)) = 0)
                                         then
                                         (Standard__string.of_array
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___258) 1 39)
                                          else
                                         (Standard__string.of_array
                                            (Array__Int__Standard__character__Concat.concat
                                               (Standard__string.to_array
                                                  ([mlw:proxy_symbol]
                                                  [introduced] temp___257))
                                               (Standard__string.first
                                                  ([mlw:proxy_symbol]
                                                  [introduced] temp___257))
                                               (Standard__string.last
                                                  ([mlw:proxy_symbol]
                                                  [introduced] temp___257))
                                               ([mlw:proxy_symbol]
                                               [introduced] temp___258) 1 39)
                                            (Standard__string.first
                                               ([mlw:proxy_symbol]
                                               [introduced] temp___257))
                                            ([sloc:station.adb:60] ([GP_Id:12]
                                                                   [vc:annotation]
                                                                   [comment:         Put_Line ("WARNING: " & New_Height'Image & " IS TOO HIGH, MAINTAINING CURRENT ORBIT");                                                   ^ station.adb:60:51:VC_RANGE_CHECK]
                                                                   [GP_Sloc:station.adb:60:51]
                                                                   [GP_Reason:VC_RANGE_CHECK]
                                                                   [GP_Shape:if__call_put_line__concat] (
                                                                   Standard__positive.range_check_
                                                                    (((Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___257))
                                                                    + ((_gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___257))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___257)))
                                                                    + (_gnatprove_standard.Integer.length
                                                                    1 39)))
                                                                    - 1)))))))));
                                      ()));
          ([GP_Sloc:station.adb:61:10] ([sloc:station.adb:61] ()));
          ([GP_Sloc:station.adb:61:10] ([sloc:station.adb:61] ( any
                                                                 --pp_effects NOT IMPLEMENTED
                                                                 pre {
                                                                 }
                                       post {} return unit);
          (Ada___ada__text_io__put_line__2___axiom.put_line
             (let ([mlw:proxy_symbol] [introduced] temp___260) =
             ( (Temp___String_Literal_259.temp___String_Literal_259 ())) in
             (Standard__string.of_array ([mlw:proxy_symbol]
                [introduced] temp___260) 1 0)));
          ()));
          ([GP_Sloc:station.adb:62:21] ([sloc:station.adb:62] (let ([mlw:proxy_symbol]
                                       [introduced] temp___263) =
                                       (let ([mlw:proxy_symbol]
                                         [introduced] temp___262) =
                                         ( --pp_record_aggregate NOT IMPLEMENTED)
                                         in abstract ensures
                                         { True } begin  (let _ =
                                                        ([mlw:proxy_symbol]
                                                          [introduced] temp___262).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude
                                                        in ())  end;
                                         --pp_record_update NOT IMPLEMENTED)
                                       in (
                                       Station__update_height__s.s__split_fields
                                       :=
                                       ([mlw:proxy_symbol]
                                         [introduced] temp___263).Station__station_record.__split_fields))));
          ([GP_Sloc:station.adb:63:10] ([sloc:station.adb:63] abstract
                                       ensures
                                       { True } begin  (let _ = ( 1000000000)
                                                      in ())  end))  else
          ();
          ([GP_Sloc:station.adb:65:21] ([sloc:station.adb:65] (let ([mlw:proxy_symbol]
                                       [introduced] temp___250) =
                                       (let ([mlw:proxy_symbol]
                                         [introduced] temp___249) =
                                         ( --pp_record_aggregate NOT IMPLEMENTED)
                                         in abstract ensures
                                         { True } begin  (let _ =
                                                        ([mlw:proxy_symbol]
                                                          [introduced] temp___249).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude
                                                        in ())  end;
                                         --pp_record_update NOT IMPLEMENTED)
                                       in (
                                       Station__update_height__s.s__split_fields
                                       :=
                                       ([mlw:proxy_symbol]
                                         [introduced] temp___250).Station__station_record.__split_fields)))))))));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ =
               ((Station__station_record__T1s__rep.to_rep
                   ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                  = Station__update_height__new_height.new_height)
               in ())  end

end
