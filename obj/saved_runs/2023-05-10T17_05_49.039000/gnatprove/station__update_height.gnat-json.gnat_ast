(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlock_door  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlock_door,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref  = { mutable airlock_door__content : airlock_door }
  
  function   airlock_door__ref_airlock_door__content__projection
    (a : airlock_door__ref) requires {  } ensures  {  } returns
    airlock_door = a.airlock_door__content
  
  meta model_projection function airlock_door__ref_airlock_door__content__projection
  
  meta inline:no function airlock_door__ref_airlock_door__content__projection
  
  function   airlock_door__havoc (x : airlock_door__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door__rep
  
  use        Station__airlock_door
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "T1s" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T1s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t1s  = <range 820000 920000>
  
  function   first () requires { True } ensures  { True } returns
    int = 820000
  
  function   last () requires { True } ensures  { True } returns int = 920000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t1s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t1s__ref  = { mutable t1s__content : t1s }
  
  function   t1s__ref_t1s__content__projection (a : t1s__ref) requires {  }
    ensures  {  } returns t1s = a.t1s__content
  
  meta model_projection function t1s__ref_t1s__content__projection
  
  meta inline:no function t1s__ref_t1s__content__projection
  
  function   t1s__havoc (x : t1s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T1s" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T1s__rep
  
  use        Station__station_record__T1s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Station__station_record__T1s.t1s) requires { True }
    ensures  { True } returns int = (Station__station_record__T1s.t1s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__station_record__T1s.t1s,
    predicate in_range = Station__station_record__T1s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "station_record" defined at station.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Station__station_record__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__airlock_door
  use        Station__airlock_door__rep
  use        Station__station_record__T1s
  use        Station__station_record__T1s__rep
  
  type __split_fields  = { [model_trace:.1032]
                           [name:Door1]rec__station__station_record__door1 : Station__airlock_door.airlock_door;
                           [model_trace:.1038]
                           [name:Door2]rec__station__station_record__door2 : Station__airlock_door.airlock_door;
                           [name:Altitude]
                           [model_trace:.1043]rec__station__station_record__altitude : Station__station_record__T1s.t1s }
  
  function [model_trace:.1032] [name:Door1] 
    __split_fields_rec__station__station_record__door1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door1
  
  meta model_projection function __split_fields_rec__station__station_record__door1__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door1__projection
  
  function [model_trace:.1038] [name:Door2] 
    __split_fields_rec__station__station_record__door2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door2
  
  meta model_projection function __split_fields_rec__station__station_record__door2__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door2__projection
  
  function [name:Altitude] [model_trace:.1043] 
    __split_fields_rec__station__station_record__altitude__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__station_record__T1s.t1s = a.rec__station__station_record__altitude
  
  meta model_projection function __split_fields_rec__station__station_record__altitude__projection
  
  meta inline:no function __split_fields_rec__station__station_record__altitude__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   station__station_record__door1__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door1_ (a : __rep) requires
    { (station__station_record__door1__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door1) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__door2__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door2_ (a : __rep) requires
    { (station__station_record__door2__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door2) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__altitude__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__altitude_ (a : __rep) requires
    { (station__station_record__altitude__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__altitude) }
    returns Station__station_record__T1s.t1s
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Station__airlock_door__rep.to_rep
                a.__split_fields.rec__station__station_record__door1)
               = (Station__airlock_door__rep.to_rep
                    b.__split_fields.rec__station__station_record__door1)) /\
              ((Station__airlock_door__rep.to_rep
                  a.__split_fields.rec__station__station_record__door2)
                 = (Station__airlock_door__rep.to_rep
                      b.__split_fields.rec__station__station_record__door2))
              /\
              ((Station__station_record__T1s__rep.to_rep
                  a.__split_fields.rec__station__station_record__altitude)
                 = (Station__station_record__T1s__rep.to_rep
                      b.__split_fields.rec__station__station_record__altitude)))
           then True  else False)

end

(* Module for axiomatizing type "station_record" defined at station.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record
  
  use export Station__station_record__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type station_record  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   station__station_record__door1__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door1__first__bit_axiom : ((station__station_record__door1__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door1__last__bit_axiom : ((station__station_record__door1__last__bit
                                                              )
                                                             > (station__station_record__door1__first__bit
                                                                  ))
  
  axiom station__station_record__door1__position_axiom : ((station__station_record__door1__position
                                                             ) >= 0)
  
  function   station__station_record__door2__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door2__first__bit_axiom : ((station__station_record__door2__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door2__last__bit_axiom : ((station__station_record__door2__last__bit
                                                              )
                                                             > (station__station_record__door2__first__bit
                                                                  ))
  
  axiom station__station_record__door2__position_axiom : ((station__station_record__door2__position
                                                             ) >= 0)
  
  function   station__station_record__altitude__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__altitude__first__bit_axiom : ((station__station_record__altitude__first__bit
                                                                  ) >= 0)
  
  axiom station__station_record__altitude__last__bit_axiom : ((station__station_record__altitude__last__bit
                                                                 )
                                                                > (station__station_record__altitude__first__bit
                                                                    ))
  
  axiom station__station_record__altitude__position_axiom : ((station__station_record__altitude__position
                                                                ) >= 0)
  
  function   user_eq (a : station_record b : station_record) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns station_record
  
  type station_record__ref  = { mutable station_record__content : station_record }
  
  function   station_record__ref_station_record__content__projection
    (a : station_record__ref) requires {  } ensures  {  } returns
    station_record = a.station_record__content
  
  meta model_projection function station_record__ref_station_record__content__projection
  
  meta inline:no function station_record__ref_station_record__content__projection
  
  function   station_record__havoc (x : station_record__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "station_record" defined at station.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__station_record
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_174) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_175) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Station__station_record.station__station_record__door1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_175))
        then
        (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_175).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
           = ( 1))
        ) /\
          (if
          (Station__station_record.station__station_record__door2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_175))
          then
          (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_175).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
             = ( 1))
          ))

end

(* Module for defining a ref holding the value of variable "s" defined at station.ads:32, created in Gnat2Why.Decls.Translate_Variable *)
module Station__update_height__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  val s__split_fields [model_projected] [name:S]
  [model_trace:1169] [sloc:station.ads:32]: Station__station_record.__split_fields

end

(* Module for defining the constant "new_height" defined at station.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Station__update_height__new_height
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:New_Height] [model_trace:1172] [sloc:station.ads:32]
    new_height () requires {  } ensures  {  } returns int

end

(* Module giving axioms for type "airlock_door" defined at station.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__airlock_door___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__airlock_door
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last))
       then
       (Station__airlock_door.dynamic_property Station__airlock_door.first
          Station__airlock_door.last ([mlw:proxy_symbol]
          [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s" defined at station.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__update_height__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "new_height" defined at station.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__update_height__new_height___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T1s" defined at station.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record__T1s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "update_height" defined at station.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Station__update_height__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__integer___axiom
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__update_height__s
  use        Station__update_height__new_height
  use        Station__station_record__T1s
  use        Station__station_record__T1s__rep
  use        Standard__integer___axiom
  use        Station__airlock_door___axiom
  use        Station__station_record___axiom
  use        Station__update_height__s___axiom
  use        Station__update_height__new_height___axiom
  use        Station__station_record__T1s___axiom
  
  function [GP_Subp:station.ads:32] [sloc:station.ads:32] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:station.ads:34] ([GP_Id:10] [GP_Reason:VC_POSTCONDITION]
                             [GP_Shape:pragargs__cmp] [model_vc_post]
                             [comment:     Post => S.Altitude = New_Height;              ^ station.ads:34:14:VC_POSTCONDITION]
                             [GP_Sloc:station.ads:34:14] ([GP_Pretty_Ada:12098]
                                                         [GP_Sloc:station.ads:34:14] (
                                                         (Station__station_record__T1s__rep.to_rep
                                                            ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                                                           = Station__update_height__new_height.new_height)))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram station.ads:32 *);
        assume
        { (Station__station_record___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Station__update_height__new_height.new_height True False True
             True) };
        (* Assume moved pointers in outputs of the subprogram station.ads:32 *);
        (* Check for RTE in the Pre of the subprogram station.ads:32 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (Station__update_height__new_height.new_height
                             >= 820000)
                          (Station__update_height__new_height.new_height
                             <= 920000))
                       in ())  end;
        (* Assume Pre of the subprogram station.ads:32 *);
        assume
        { (([GP_Pretty_Ada:1183] (Station__update_height__new_height.new_height
                                    >= 820000)) /\
             ([GP_Pretty_Ada:1187] (Station__update_height__new_height.new_height
                                      <= 920000))) };
        (try
        ();
          ([GP_Sloc:station.adb:52:7] ([sloc:station.adb:52] (if
                                                             ([sloc:station.adb:52] ([branch_id=986]
                                                             _gnatprove_standard.Main.spark__branch
                                                             :=
                                                             (_gnatprove_standard.Boolean.orb
                                                                (Station__update_height__new_height.new_height
                                                                   < 820000)
                                                                (Station__update_height__new_height.new_height
                                                                   > 920000))));
                                                             ([branch_id=986] _gnatprove_standard.Main.spark__branch).bool__content
                                                             then
                                                             ();
                                                             ([GP_Sloc:station.adb:53:10] 
                                                             ([sloc:station.adb:53] 
                                                             ([sloc:station.adb:53] 
                                                             ([GP_Shape:if__raise_program_error]
                                                             [GP_Reason:VC_RAISE]
                                                             [vc:annotation]
                                                             [comment:         raise Program_Error with "Invalid height specified";          ^ station.adb:53:10:VC_RAISE]
                                                             [GP_Sloc:station.adb:53:10]
                                                             [GP_Id:8] absurd))))
                                                              else
                                                             ();
                                                             ([GP_Sloc:station.adb:55:21] 
                                                             ([sloc:station.adb:55] (let ([mlw:proxy_symbol]
                                                             [introduced] temp___237)
                                                             =
                                                             (let ([mlw:proxy_symbol]
                                                               [introduced] temp___236)
                                                               =
                                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                                               in abstract
                                                               ensures
                                                               { True } begin 
                                                                (let _ =
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___236).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude
                                                               in ())  end;
                                                               --pp_record_update NOT IMPLEMENTED)
                                                             in (
                                                             Station__update_height__s.s__split_fields
                                                             :=
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___237).Station__station_record.__split_fields)))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Station__station_record__T1s__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                          = Station__update_height__new_height.new_height)
                       in ())  end

end
