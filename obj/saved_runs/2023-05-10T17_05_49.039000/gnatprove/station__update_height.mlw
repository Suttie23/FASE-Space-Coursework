module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type airlock_door
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = airlock_door,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref = { mutable airlock_door__content : airlock_door }
  
  function airlock_door__ref_airlock_door__content__projection (a: airlock_door__ref) : airlock_door =
    a.airlock_door__content
  
  meta "model_projection" function airlock_door__ref_airlock_door__content__projection
  
  meta "inline:no" function airlock_door__ref_airlock_door__content__projection
  
  val airlock_door__havoc (x: airlock_door__ref) : unit
    writes { x }
end

module Station__airlock_door__rep
  use Station__airlock_door as Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__T1s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t1s = <range 820000 920000>
  
  val function first : int
    ensures { result = (820000 : int) }
  
  val function last : int
    ensures { result = (920000 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t1s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t1s__ref = { mutable t1s__content : t1s }
  
  function t1s__ref_t1s__content__projection (a: t1s__ref) : t1s =
    a.t1s__content
  
  meta "model_projection" function t1s__ref_t1s__content__projection
  
  meta "inline:no" function t1s__ref_t1s__content__projection
  
  val t1s__havoc (x: t1s__ref) : unit
    writes { x }
end

module Station__station_record__T1s__rep
  use Station__station_record__T1s as Station__station_record__T1s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Station__station_record__T1s.t1s) : int =
    Station__station_record__T1s.t1s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__station_record__T1s.t1s,
    predicate in_range = Station__station_record__T1s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Station__station_record__T1s as Station__station_record__T1s
  use Station__station_record__T1s__rep as Station__station_record__T1s__rep
  
  type __split_fields = {
                       rec__station__station_record__door1 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__door2 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__altitude :
                         Station__station_record__T1s.t1s
                       }
  
  function __split_fields_rec__station__station_record__door1__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door1
  
  meta "model_projection" function __split_fields_rec__station__station_record__door1__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door1__projection
  
  function __split_fields_rec__station__station_record__door2__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door2
  
  meta "model_projection" function __split_fields_rec__station__station_record__door2__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door2__projection
  
  function __split_fields_rec__station__station_record__altitude__projection (a: __split_fields) : 
    Station__station_record__T1s.t1s =
    a.rec__station__station_record__altitude
  
  meta "model_projection" function __split_fields_rec__station__station_record__altitude__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__altitude__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate station__station_record__door1__pred (a: __rep) = true
  
  val station__station_record__door1__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door1__pred (a : __rep)) }
  
  val rec__station__station_record__door1_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door1__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door1)) }
  
  predicate station__station_record__door2__pred (a: __rep) = true
  
  val station__station_record__door2__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door2__pred (a : __rep)) }
  
  val rec__station__station_record__door2_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door2__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door2)) }
  
  predicate station__station_record__altitude__pred (a: __rep) = true
  
  val station__station_record__altitude__pred (a: __rep) : bool
    ensures { result
                <->
                (station__station_record__altitude__pred (a : __rep)) }
  
  val rec__station__station_record__altitude_ (a: __rep) : Station__station_record__T1s.t1s
    requires { station__station_record__altitude__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__altitude)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Station__airlock_door__rep.to_rep
             ((__split_fields a).rec__station__station_record__door1))
            = (Station__airlock_door__rep.to_rep
                 ((__split_fields b).rec__station__station_record__door1))) /\
           ((Station__airlock_door__rep.to_rep
               ((__split_fields a).rec__station__station_record__door2))
              = (Station__airlock_door__rep.to_rep
                   ((__split_fields b).rec__station__station_record__door2)))) /\
          ((Station__station_record__T1s__rep.to_rep
              ((__split_fields a).rec__station__station_record__altitude))
             = (Station__station_record__T1s__rep.to_rep
                  ((__split_fields b).rec__station__station_record__altitude)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Station__station_record
  use export Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type station_record = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function station__station_record__door1__first__bit : int
  
  val function station__station_record__door1__last__bit : int
  
  val function station__station_record__door1__position : int
  
  axiom station__station_record__door1__first__bit_axiom:
    (station__station_record__door1__first__bit >= (0 : int))
  
  axiom station__station_record__door1__last__bit_axiom:
    (station__station_record__door1__last__bit
       > station__station_record__door1__first__bit)
  
  axiom station__station_record__door1__position_axiom:
    (station__station_record__door1__position >= (0 : int))
  
  val function station__station_record__door2__first__bit : int
  
  val function station__station_record__door2__last__bit : int
  
  val function station__station_record__door2__position : int
  
  axiom station__station_record__door2__first__bit_axiom:
    (station__station_record__door2__first__bit >= (0 : int))
  
  axiom station__station_record__door2__last__bit_axiom:
    (station__station_record__door2__last__bit
       > station__station_record__door2__first__bit)
  
  axiom station__station_record__door2__position_axiom:
    (station__station_record__door2__position >= (0 : int))
  
  val function station__station_record__altitude__first__bit : int
  
  val function station__station_record__altitude__last__bit : int
  
  val function station__station_record__altitude__position : int
  
  axiom station__station_record__altitude__first__bit_axiom:
    (station__station_record__altitude__first__bit >= (0 : int))
  
  axiom station__station_record__altitude__last__bit_axiom:
    (station__station_record__altitude__last__bit
       > station__station_record__altitude__first__bit)
  
  axiom station__station_record__altitude__position_axiom:
    (station__station_record__altitude__position >= (0 : int))
  
  val function user_eq (a: station_record) (b: station_record) : bool
  
  val function dummy : station_record
  
  type station_record__ref = {
                            mutable station_record__content : station_record
                            }
  
  function station_record__ref_station_record__content__projection (a: station_record__ref) : station_record =
    a.station_record__content
  
  meta "model_projection" function station_record__ref_station_record__content__projection
  
  meta "inline:no" function station_record__ref_station_record__content__projection
  
  val station_record__havoc (x: station_record__ref) : unit
    writes { x }
end

module Station__station_record___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__station_record as Station__station_record
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  predicate dynamic_invariant (temp___expr_174: Station__station_record.station_record) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) =
    true
  
  val dynamic_invariant (temp___expr_174: Station__station_record.station_record) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_174 :
                          Station__station_record.station_record))
                      (temp___is_init_170 : bool))
                     (temp___skip_constant_171 : bool))
                    (temp___do_toplevel_172 : bool))
                   (temp___do_typ_inv_173 : bool)) }
  
  predicate default_initial_assumption (temp___expr_175: Station__station_record.station_record) (temp___skip_top_level_176: bool) =
    ((if (Station__station_record.station__station_record__door1__pred
            temp___expr_175) then
        ((Station__airlock_door__rep.to_rep
            ((Station__station_record.__split_fields temp___expr_175).
               Station__station_record.rec__station__station_record__door1))
           = (1 : int))
      else true) /\
       (if (Station__station_record.station__station_record__door2__pred
              temp___expr_175) then
          ((Station__airlock_door__rep.to_rep
              ((Station__station_record.__split_fields temp___expr_175).
                 Station__station_record.rec__station__station_record__door2))
             = (1 : int))
        else true))
  
  val default_initial_assumption (temp___expr_175: Station__station_record.station_record) (temp___skip_top_level_176: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_175 : Station__station_record.station_record))
                   (temp___skip_top_level_176 : bool)) }
end

module Station__update_height__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Station__update_height__new_height
  use _gnatprove_standard.Main
  use int.Int
  
  val function new_height : int
end

module Station__airlock_door___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__airlock_door as Station__airlock_door
  
  predicate dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) =
    if ((temp___is_init_163 = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last)) then
      (((Station__airlock_door.dynamic_property Station__airlock_door.first)
          Station__airlock_door.last)
         temp___expr_167)
    else true
  
  val dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_167 : int))
                      (temp___is_init_163 : bool))
                     (temp___skip_constant_164 : bool))
                    (temp___do_toplevel_165 : bool))
                   (temp___do_typ_inv_166 : bool)) }
  
  predicate default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) =
    true
  
  val default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_168 : int))
                   (temp___skip_top_level_169 : bool)) }
end

module Station__update_height__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__update_height__new_height___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__station_record__T1s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__update_height__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer___axiom as Standard__integer___axiom
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__update_height__s as Station__update_height__s
  use Station__update_height__new_height as Station__update_height__new_height
  use Station__station_record__T1s as Station__station_record__T1s
  use Station__station_record__T1s__rep as Station__station_record__T1s__rep
  use Standard__integer___axiom as Standard__integer___axiom
  use Station__airlock_door___axiom as Station__airlock_door___axiom
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__update_height__s___axiom as Station__update_height__s___axiom
  use Station__update_height__new_height___axiom as Station__update_height__new_height___axiom
  use Station__station_record__T1s___axiom as Station__station_record__T1s___axiom
  
  let def (__void_param : unit)
    requires { [#"station.ads" 32 0 0] true }
    ensures { [#"station.ads" 32 0 0]
              [#"station.ads" 34 0 0]
              [@GP_Id:10]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@model_vc_post]
              [@comment:     Post => S.Altitude = New_Height;              ^ station.ads:34:14:VC_POSTCONDITION]
              [@GP_Sloc:station.ads:34:14]
              [@GP_Pretty_Ada:12098]
              [@GP_Sloc:station.ads:34:14]
              ((Station__station_record__T1s__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__update_height__s.s__split_fields) }).
                     Station__station_record.rec__station__station_record__altitude))
                 = Station__update_height__new_height.new_height) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram station.ads:32]
      ());
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__update_height__s.s__split_fields) })
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             Station__update_height__new_height.new_height)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram station.ads:32]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram station.ads:32]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               (Station__update_height__new_height.new_height
                  >= (820000 : int)))
              (Station__update_height__new_height.new_height
                 <= (920000 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram station.ads:32] ());
     assume {
       (([@GP_Pretty_Ada:1183]
         (Station__update_height__new_height.new_height >= (820000 : int))) /\
          ([@GP_Pretty_Ada:1187]
           (Station__update_height__new_height.new_height <= (920000 : int)))) };
     (try
        ([@GP_Sloc:station.adb:52:7]
         [#"station.adb" 52 0 0]
         (if (([#"station.adb" 52 0 0]
               [#"station.adb" 52 0 0]
               (([@branch_id=986] Main.spark__branch).bool__content <-
                  ((Boolean.orb
                      (Station__update_height__new_height.new_height
                         < (820000 : int)))
                     (Station__update_height__new_height.new_height
                        > (920000 : int)))));
              (([@branch_id=986] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:station.adb:53:10]
             [#"station.adb" 53 0 0]
             [#"station.adb" 53 0 0]
             [@GP_Shape:if__raise_program_error]
             [@GP_Reason:VC_RAISE]
             [@vc:annotation]
             [@comment:         raise Program_Error with "Invalid height specified";          ^ station.adb:53:10:VC_RAISE]
             [@GP_Sloc:station.adb:53:10] [@GP_Id:8] absurd)
          else
            ([@GP_Sloc:station.adb:55:21]
             [#"station.adb" 55 0 0]
             (let temp___237 =
                let temp___236 =
                  { Station__station_record.__split_fields =
                      (Station__station_record.__split_fields__content
                          Station__update_height__s.s__split_fields) } in
                ([#"station.adb" 55 0 0]
                 (begin
                    ensures { true }
                    let _ =
                      let _ =
                        (Station__station_record.__split_fields temp___236).
                          Station__station_record.rec__station__station_record__altitude in
                      () in
                    ()
                  end));
                ({ temp___236 with
                   Station__station_record.__split_fields =
                     ({ (Station__station_record.__split_fields temp___236) with
                        Station__station_record.rec__station__station_record__altitude =
                          (Station__station_record__T1s__rep.of_rep
                             ([#"station.adb" 55 0 0]
                              [@GP_Sloc:station.adb:55:24]
                              [@vc:annotation]
                              [@comment:         S.Altitude := New_Height;                        ^ station.adb:55:24:VC_RANGE_CHECK]
                              [@GP_Reason:VC_RANGE_CHECK]
                              [@GP_Shape:if__s_assign]
                              [@GP_Id:9]
                              (Station__station_record__T1s.range_check_
                                 Station__update_height__new_height.new_height))) }) }) in
              Station__update_height__s.s__split_fields.Station__station_record.__split_fields__content <-
                (Station__station_record.__split_fields temp___237)))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Station__station_record__T1s__rep.to_rep
                ((Station__station_record.__split_fields
                     { Station__station_record.__split_fields =
                         (Station__station_record.__split_fields__content
                             Station__update_height__s.s__split_fields) }).
                   Station__station_record.rec__station__station_record__altitude))
               = Station__update_height__new_height.new_height) in
          () in
        ()
      end))
end
