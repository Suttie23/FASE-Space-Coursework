module Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type airlock_door
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = airlock_door,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref = { mutable airlock_door__content : airlock_door }
  
  function airlock_door__ref_airlock_door__content__projection (a: airlock_door__ref) : airlock_door =
    a.airlock_door__content
  
  meta "model_projection" function airlock_door__ref_airlock_door__content__projection
  
  meta "inline:no" function airlock_door__ref_airlock_door__content__projection
  
  val airlock_door__havoc (x: airlock_door__ref) : unit
    writes { x }
end

module Station__airlock_door__rep
  use Station__airlock_door as Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__altituderange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type altituderange = <range 820000 920000>
  
  val function first : int
    ensures { result = (820000 : int) }
  
  val function last : int
    ensures { result = (920000 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = altituderange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type altituderange__ref = {
                           mutable altituderange__content : altituderange
                           }
  
  function altituderange__ref_altituderange__content__projection (a: altituderange__ref) : altituderange =
    a.altituderange__content
  
  meta "model_projection" function altituderange__ref_altituderange__content__projection
  
  meta "inline:no" function altituderange__ref_altituderange__content__projection
  
  val altituderange__havoc (x: altituderange__ref) : unit
    writes { x }
end

module Station__altituderange__rep
  use Station__altituderange as Station__altituderange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Station__altituderange.altituderange) : int =
    Station__altituderange.altituderange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__altituderange.altituderange,
    predicate in_range = Station__altituderange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Station__altituderange as Station__altituderange
  use Station__altituderange__rep as Station__altituderange__rep
  
  type __split_fields = {
                       rec__station__station_record__door1 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__door2 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__altitude :
                         Station__altituderange.altituderange
                       }
  
  function __split_fields_rec__station__station_record__door1__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door1
  
  meta "model_projection" function __split_fields_rec__station__station_record__door1__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door1__projection
  
  function __split_fields_rec__station__station_record__door2__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door2
  
  meta "model_projection" function __split_fields_rec__station__station_record__door2__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door2__projection
  
  function __split_fields_rec__station__station_record__altitude__projection (a: __split_fields) : 
    Station__altituderange.altituderange =
    a.rec__station__station_record__altitude
  
  meta "model_projection" function __split_fields_rec__station__station_record__altitude__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__altitude__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate station__station_record__door1__pred (a: __rep) = true
  
  val station__station_record__door1__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door1__pred (a : __rep)) }
  
  val rec__station__station_record__door1_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door1__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door1)) }
  
  predicate station__station_record__door2__pred (a: __rep) = true
  
  val station__station_record__door2__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door2__pred (a : __rep)) }
  
  val rec__station__station_record__door2_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door2__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door2)) }
  
  predicate station__station_record__altitude__pred (a: __rep) = true
  
  val station__station_record__altitude__pred (a: __rep) : bool
    ensures { result
                <->
                (station__station_record__altitude__pred (a : __rep)) }
  
  val rec__station__station_record__altitude_ (a: __rep) : Station__altituderange.altituderange
    requires { station__station_record__altitude__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__altitude)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Station__airlock_door__rep.to_rep
             ((__split_fields a).rec__station__station_record__door1))
            = (Station__airlock_door__rep.to_rep
                 ((__split_fields b).rec__station__station_record__door1))) /\
           ((Station__airlock_door__rep.to_rep
               ((__split_fields a).rec__station__station_record__door2))
              = (Station__airlock_door__rep.to_rep
                   ((__split_fields b).rec__station__station_record__door2)))) /\
          ((Station__altituderange__rep.to_rep
              ((__split_fields a).rec__station__station_record__altitude))
             = (Station__altituderange__rep.to_rep
                  ((__split_fields b).rec__station__station_record__altitude)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Station__station_record
  use export Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type station_record = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function station__station_record__door1__first__bit : int
  
  val function station__station_record__door1__last__bit : int
  
  val function station__station_record__door1__position : int
  
  axiom station__station_record__door1__first__bit_axiom:
    (station__station_record__door1__first__bit >= (0 : int))
  
  axiom station__station_record__door1__last__bit_axiom:
    (station__station_record__door1__last__bit
       > station__station_record__door1__first__bit)
  
  axiom station__station_record__door1__position_axiom:
    (station__station_record__door1__position >= (0 : int))
  
  val function station__station_record__door2__first__bit : int
  
  val function station__station_record__door2__last__bit : int
  
  val function station__station_record__door2__position : int
  
  axiom station__station_record__door2__first__bit_axiom:
    (station__station_record__door2__first__bit >= (0 : int))
  
  axiom station__station_record__door2__last__bit_axiom:
    (station__station_record__door2__last__bit
       > station__station_record__door2__first__bit)
  
  axiom station__station_record__door2__position_axiom:
    (station__station_record__door2__position >= (0 : int))
  
  val function station__station_record__altitude__first__bit : int
  
  val function station__station_record__altitude__last__bit : int
  
  val function station__station_record__altitude__position : int
  
  axiom station__station_record__altitude__first__bit_axiom:
    (station__station_record__altitude__first__bit >= (0 : int))
  
  axiom station__station_record__altitude__last__bit_axiom:
    (station__station_record__altitude__last__bit
       > station__station_record__altitude__first__bit)
  
  axiom station__station_record__altitude__position_axiom:
    (station__station_record__altitude__position >= (0 : int))
  
  val function user_eq (a: station_record) (b: station_record) : bool
  
  val function dummy : station_record
  
  type station_record__ref = {
                            mutable station_record__content : station_record
                            }
  
  function station_record__ref_station_record__content__projection (a: station_record__ref) : station_record =
    a.station_record__content
  
  meta "model_projection" function station_record__ref_station_record__content__projection
  
  meta "inline:no" function station_record__ref_station_record__content__projection
  
  val station_record__havoc (x: station_record__ref) : unit
    writes { x }
end

module Station__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Station__station_record___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__station_record as Station__station_record
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  predicate dynamic_invariant (temp___expr_182: Station__station_record.station_record) (temp___is_init_178: bool) (temp___skip_constant_179: bool) (temp___do_toplevel_180: bool) (temp___do_typ_inv_181: bool) =
    true
  
  val dynamic_invariant (temp___expr_182: Station__station_record.station_record) (temp___is_init_178: bool) (temp___skip_constant_179: bool) (temp___do_toplevel_180: bool) (temp___do_typ_inv_181: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_182 :
                          Station__station_record.station_record))
                      (temp___is_init_178 : bool))
                     (temp___skip_constant_179 : bool))
                    (temp___do_toplevel_180 : bool))
                   (temp___do_typ_inv_181 : bool)) }
  
  predicate default_initial_assumption (temp___expr_183: Station__station_record.station_record) (temp___skip_top_level_184: bool) =
    ((if (Station__station_record.station__station_record__door1__pred
            temp___expr_183) then
        ((Station__airlock_door__rep.to_rep
            ((Station__station_record.__split_fields temp___expr_183).
               Station__station_record.rec__station__station_record__door1))
           = (1 : int))
      else true) /\
       (if (Station__station_record.station__station_record__door2__pred
              temp___expr_183) then
          ((Station__airlock_door__rep.to_rep
              ((Station__station_record.__split_fields temp___expr_183).
                 Station__station_record.rec__station__station_record__door2))
             = (1 : int))
        else true))
  
  val default_initial_assumption (temp___expr_183: Station__station_record.station_record) (temp___skip_top_level_184: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_183 : Station__station_record.station_record))
                   (temp___skip_top_level_184 : bool)) }
end

module Station__sealedinvariant
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val function sealedinvariant (Station__s___s__split_fields___: Station__station_record.__split_fields) : 
    bool
  
  val predicate sealedinvariant__function_guard (temp___result_161: bool) (Station__s___s__split_fields___: 
    Station__station_record.__split_fields)
end

module Station__sealedinvariant___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__s as Station__s
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__sealedinvariant as Station__sealedinvariant
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  val sealedinvariant (__void_param: unit) : bool
    reads { Station__s.s__split_fields }
    requires { true }
    writes {  }
    ensures { (((result
                   = (Station__sealedinvariant.sealedinvariant
                        (Station__station_record.__split_fields__content
                            Station__s.s__split_fields))) /\
                  ((Station__sealedinvariant.sealedinvariant__function_guard
                      result)
                     (Station__station_record.__split_fields__content
                         Station__s.s__split_fields))) /\
                 (result
                    = (((Station__airlock_door__rep.to_rep
                           ((Station__station_record.__split_fields
                                { Station__station_record.__split_fields =
                                    (Station__station_record.__split_fields__content
                                        Station__s.s__split_fields) }).
                              Station__station_record.rec__station__station_record__door1))
                          = (1 : int)) /\
                         ((Station__airlock_door__rep.to_rep
                             ((Station__station_record.__split_fields
                                  { Station__station_record.__split_fields =
                                      (Station__station_record.__split_fields__content
                                          Station__s.s__split_fields) }).
                                Station__station_record.rec__station__station_record__door2))
                            = (1 : int))))) }
  
  axiom sealedinvariant__post_axiom:
    forall Station__s___s__split_fields___ : Station__station_record.__split_fields
          [Station__sealedinvariant.sealedinvariant
             Station__s___s__split_fields___].
      ((((((Station__station_record___axiom.dynamic_invariant
              { Station__station_record.__split_fields =
                  Station__s___s__split_fields___ })
             True)
            True)
           True)
          True) ->
         (let result =
            Station__sealedinvariant.sealedinvariant
              Station__s___s__split_fields___ in
          if ((Station__sealedinvariant.sealedinvariant__function_guard
                 result)
                Station__s___s__split_fields___) then
            ((true /\ true) /\ true)
          else true))
  
  axiom sealedinvariant__def_axiom:
    forall Station__s___s__split_fields___ : Station__station_record.__split_fields
          [Station__sealedinvariant.sealedinvariant
             Station__s___s__split_fields___].
      ((Station__sealedinvariant.sealedinvariant
          Station__s___s__split_fields___)
         = (((Station__airlock_door__rep.to_rep
                ((Station__station_record.__split_fields
                     { Station__station_record.__split_fields =
                         Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
               = (1 : int)) /\
              ((Station__airlock_door__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                 = (1 : int))))
end

module Station__airlock_door___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__airlock_door as Station__airlock_door
  
  predicate dynamic_invariant (temp___expr_168: int) (temp___is_init_164: bool) (temp___skip_constant_165: bool) (temp___do_toplevel_166: bool) (temp___do_typ_inv_167: bool) =
    if ((temp___is_init_164 = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last)) then
      (((Station__airlock_door.dynamic_property Station__airlock_door.first)
          Station__airlock_door.last)
         temp___expr_168)
    else true
  
  val dynamic_invariant (temp___expr_168: int) (temp___is_init_164: bool) (temp___skip_constant_165: bool) (temp___do_toplevel_166: bool) (temp___do_typ_inv_167: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_168 : int))
                      (temp___is_init_164 : bool))
                     (temp___skip_constant_165 : bool))
                    (temp___do_toplevel_166 : bool))
                   (temp___do_typ_inv_167 : bool)) }
  
  predicate default_initial_assumption (temp___expr_169: int) (temp___skip_top_level_170: bool) =
    true
  
  val default_initial_assumption (temp___expr_169: int) (temp___skip_top_level_170: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_169 : int))
                   (temp___skip_top_level_170 : bool)) }
end

module Station__altituderange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__altituderange as Station__altituderange
  
  predicate dynamic_invariant (temp___expr_175: int) (temp___is_init_171: bool) (temp___skip_constant_172: bool) (temp___do_toplevel_173: bool) (temp___do_typ_inv_174: bool) =
    if ((temp___is_init_171 = True) \/
          (Station__altituderange.first <= Station__altituderange.last)) then
      (((Station__altituderange.dynamic_property Station__altituderange.first)
          Station__altituderange.last)
         temp___expr_175)
    else true
  
  val dynamic_invariant (temp___expr_175: int) (temp___is_init_171: bool) (temp___skip_constant_172: bool) (temp___do_toplevel_173: bool) (temp___do_typ_inv_174: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_175 : int))
                      (temp___is_init_171 : bool))
                     (temp___skip_constant_172 : bool))
                    (temp___do_toplevel_173 : bool))
                   (temp___do_typ_inv_174 : bool)) }
  
  predicate default_initial_assumption (temp___expr_176: int) (temp___skip_top_level_177: bool) =
    true
  
  val default_initial_assumption (temp___expr_176: int) (temp___skip_top_level_177: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_176 : int))
                   (temp___skip_top_level_177 : bool)) }
end

module Station__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__decreasealtitude__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Station__s as Station__s
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__sealedinvariant___axiom as Station__sealedinvariant___axiom
  use Station__altituderange as Station__altituderange
  use Station__altituderange__rep as Station__altituderange__rep
  use Station__airlock_door___axiom as Station__airlock_door___axiom
  use Station__altituderange___axiom as Station__altituderange___axiom
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__s___axiom as Station__s___axiom
  use Station__sealedinvariant___axiom as Station__sealedinvariant___axiom
  
  let def (__void_param : unit)
    requires { [#"station.ads" 43 0 0] true }
    ensures { [#"station.ads" 43 0 0]
              [#"station.ads" 46 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:     Post => (S.Altitude = S.Altitude'Old -1);              ^ station.ads:46:14:VC_POSTCONDITION]
              [@GP_Sloc:station.ads:46:14]
              [@model_vc_post]
              [@GP_Id:5]
              [@GP_Pretty_Ada:12163]
              [@GP_Sloc:station.ads:46:14]
              ((Station__altituderange__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__s.s__split_fields) }).Station__station_record.rec__station__station_record__altitude))
                 = ((Station__altituderange__rep.to_rep
                       (old ((Station__station_record.__split_fields
                                 { Station__station_record.__split_fields =
                                     (Station__station_record.__split_fields__content
                                         Station__s.s__split_fields) }).
                               Station__station_record.rec__station__station_record__altitude)))
                      - (1 : int))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram station.ads:43]
      ());
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__s.s__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram station.ads:43]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram station.ads:43]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Station__altituderange__rep.to_rep
                ((Station__station_record.__split_fields
                     { Station__station_record.__split_fields =
                         (Station__station_record.__split_fields__content
                             Station__s.s__split_fields) }).Station__station_record.rec__station__station_record__altitude))
               > (820000 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram station.ads:43] ());
     assume {
       [@GP_Pretty_Ada:12146]
       ((Station__altituderange__rep.to_rep
           ((Station__station_record.__split_fields
                { Station__station_record.__split_fields =
                    (Station__station_record.__split_fields__content
                        Station__s.s__split_fields) }).Station__station_record.rec__station__station_record__altitude))
          > (820000 : int)) };
     (let temp___old_219 =
        Station__altituderange__rep.to_rep
          ((Station__station_record.__split_fields
               { Station__station_record.__split_fields =
                   (Station__station_record.__split_fields__content
                       Station__s.s__split_fields) }).Station__station_record.rec__station__station_record__altitude) in
      (try
         ([@GP_Sloc:station.adb:38:31] [#"station.adb" 38 0 0] ());
         ([@GP_Sloc:station.adb:38:11] [#"station.adb" 38 0 0] ());
         ([@GP_Sloc:station.adb:38:7]
          [#"station.adb" 38 0 0]
          (if (([#"station.adb" 38 0 0]
                [#"station.adb" 38 0 0]
                (([@branch_id=926] Main.spark__branch).bool__content <-
                   ((Boolean.andb
                       (Station__sealedinvariant___axiom.sealedinvariant ()))
                      ((Station__altituderange__rep.to_rep
                          ((Station__station_record.__split_fields
                               { Station__station_record.__split_fields =
                                   (Station__station_record.__split_fields__content
                                       Station__s.s__split_fields) }).
                             Station__station_record.rec__station__station_record__altitude))
                         > (820000 : int)))));
               (([@branch_id=926] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:station.adb:40:10] [#"station.adb" 40 0 0] ());
              ([@GP_Sloc:station.adb:40:24] [#"station.adb" 40 0 0] ());
              ([@GP_Sloc:station.adb:40:21]
               [#"station.adb" 40 0 0]
               (let temp___218 =
                  let temp___217 =
                    { Station__station_record.__split_fields =
                        (Station__station_record.__split_fields__content
                            Station__s.s__split_fields) } in
                  ([#"station.adb" 40 0 0]
                   (begin
                      ensures { true }
                      let _ =
                        let _ =
                          (Station__station_record.__split_fields temp___217).
                            Station__station_record.rec__station__station_record__altitude in
                        () in
                      ()
                    end));
                  ({ temp___217 with
                     Station__station_record.__split_fields =
                       ({ (Station__station_record.__split_fields temp___217) with
                          Station__station_record.rec__station__station_record__altitude =
                            (Station__altituderange__rep.of_rep
                               ([#"station.adb" 40 0 0]
                                [@GP_Shape:if__s_assign__sub]
                                [@comment:         S.Altitude := S.Altitude - 1;                                   ^ station.adb:40:35:VC_RANGE_CHECK]
                                [@vc:annotation]
                                [@GP_Reason:VC_RANGE_CHECK]
                                [@GP_Id:4]
                                [@GP_Sloc:station.adb:40:35]
                                (Station__altituderange.range_check_
                                   ((Station__altituderange__rep.to_rep
                                       ((Station__station_record.__split_fields
                                            { Station__station_record.__split_fields =
                                                (Station__station_record.__split_fields__content
                                                    Station__s.s__split_fields) }).
                                          Station__station_record.rec__station__station_record__altitude))
                                      - (1 : int))))) }) }) in
                Station__s.s__split_fields.Station__station_record.__split_fields__content <-
                  (Station__station_record.__split_fields temp___218))))
           else ()));
         (raise Return__exc)
       with Return__exc -> ()
       end);
      (begin
         ensures { true }
         let _ =
           let _ =
             ((Station__altituderange__rep.to_rep
                 ((Station__station_record.__split_fields
                      { Station__station_record.__split_fields =
                          (Station__station_record.__split_fields__content
                              Station__s.s__split_fields) }).Station__station_record.rec__station__station_record__altitude))
                = (temp___old_219 - (1 : int))) in
           () in
         ()
       end)))
end
