module Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type airlock_door
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = airlock_door,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref = { mutable airlock_door__content : airlock_door }
  
  function airlock_door__ref_airlock_door__content__projection (a: airlock_door__ref) : airlock_door =
    a.airlock_door__content
  
  meta "model_projection" function airlock_door__ref_airlock_door__content__projection
  
  meta "inline:no" function airlock_door__ref_airlock_door__content__projection
  
  val airlock_door__havoc (x: airlock_door__ref) : unit
    writes { x }
end

module Station__airlock_door__rep
  use Station__airlock_door as Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  type __split_fields = {
                       rec__station__station_record__door1 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__door2 :
                         Station__airlock_door.airlock_door
                       }
  
  function __split_fields_rec__station__station_record__door1__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door1
  
  meta "model_projection" function __split_fields_rec__station__station_record__door1__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door1__projection
  
  function __split_fields_rec__station__station_record__door2__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door2
  
  meta "model_projection" function __split_fields_rec__station__station_record__door2__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door2__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate station__station_record__door1__pred (a: __rep) = true
  
  val station__station_record__door1__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door1__pred (a : __rep)) }
  
  val rec__station__station_record__door1_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door1__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door1)) }
  
  predicate station__station_record__door2__pred (a: __rep) = true
  
  val station__station_record__door2__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door2__pred (a : __rep)) }
  
  val rec__station__station_record__door2_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door2__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door2)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Station__airlock_door__rep.to_rep
            ((__split_fields a).rec__station__station_record__door1))
           = (Station__airlock_door__rep.to_rep
                ((__split_fields b).rec__station__station_record__door1))) /\
          ((Station__airlock_door__rep.to_rep
              ((__split_fields a).rec__station__station_record__door2))
             = (Station__airlock_door__rep.to_rep
                  ((__split_fields b).rec__station__station_record__door2)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Station__station_record
  use export Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type station_record = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function station__station_record__door1__first__bit : int
  
  val function station__station_record__door1__last__bit : int
  
  val function station__station_record__door1__position : int
  
  axiom station__station_record__door1__first__bit_axiom:
    (station__station_record__door1__first__bit >= (0 : int))
  
  axiom station__station_record__door1__last__bit_axiom:
    (station__station_record__door1__last__bit
       > station__station_record__door1__first__bit)
  
  axiom station__station_record__door1__position_axiom:
    (station__station_record__door1__position >= (0 : int))
  
  val function station__station_record__door2__first__bit : int
  
  val function station__station_record__door2__last__bit : int
  
  val function station__station_record__door2__position : int
  
  axiom station__station_record__door2__first__bit_axiom:
    (station__station_record__door2__first__bit >= (0 : int))
  
  axiom station__station_record__door2__last__bit_axiom:
    (station__station_record__door2__last__bit
       > station__station_record__door2__first__bit)
  
  axiom station__station_record__door2__position_axiom:
    (station__station_record__door2__position >= (0 : int))
  
  val function user_eq (a: station_record) (b: station_record) : bool
  
  val function dummy : station_record
  
  type station_record__ref = {
                            mutable station_record__content : station_record
                            }
  
  function station_record__ref_station_record__content__projection (a: station_record__ref) : station_record =
    a.station_record__content
  
  meta "model_projection" function station_record__ref_station_record__content__projection
  
  meta "inline:no" function station_record__ref_station_record__content__projection
  
  val station_record__havoc (x: station_record__ref) : unit
    writes { x }
end

module Station__station_record___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__station_record as Station__station_record
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  predicate dynamic_invariant (temp___expr_174: Station__station_record.station_record) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) =
    true
  
  val dynamic_invariant (temp___expr_174: Station__station_record.station_record) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_174 :
                          Station__station_record.station_record))
                      (temp___is_init_170 : bool))
                     (temp___skip_constant_171 : bool))
                    (temp___do_toplevel_172 : bool))
                   (temp___do_typ_inv_173 : bool)) }
  
  predicate default_initial_assumption (temp___expr_175: Station__station_record.station_record) (temp___skip_top_level_176: bool) =
    ((if (Station__station_record.station__station_record__door1__pred
            temp___expr_175) then
        ((Station__airlock_door__rep.to_rep
            ((Station__station_record.__split_fields temp___expr_175).
               Station__station_record.rec__station__station_record__door1))
           = (1 : int))
      else true) /\
       (if (Station__station_record.station__station_record__door2__pred
              temp___expr_175) then
          ((Station__airlock_door__rep.to_rep
              ((Station__station_record.__split_fields temp___expr_175).
                 Station__station_record.rec__station__station_record__door2))
             = (1 : int))
        else true))
  
  val default_initial_assumption (temp___expr_175: Station__station_record.station_record) (temp___skip_top_level_176: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_175 : Station__station_record.station_record))
                   (temp___skip_top_level_176 : bool)) }
end

module Station__seal_airlock__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Station__airlock_door___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__airlock_door as Station__airlock_door
  
  predicate dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) =
    if ((temp___is_init_163 = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last)) then
      (((Station__airlock_door.dynamic_property Station__airlock_door.first)
          Station__airlock_door.last)
         temp___expr_167)
    else true
  
  val dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_167 : int))
                      (temp___is_init_163 : bool))
                     (temp___skip_constant_164 : bool))
                    (temp___do_toplevel_165 : bool))
                   (temp___do_typ_inv_166 : bool)) }
  
  predicate default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) =
    true
  
  val default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_168 : int))
                   (temp___skip_top_level_169 : bool)) }
end

module Station__seal_airlock__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__seal_airlock__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__seal_airlock__s as Station__seal_airlock__s
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Station__airlock_door___axiom as Station__airlock_door___axiom
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__seal_airlock__s___axiom as Station__seal_airlock__s___axiom
  
  let def (__void_param : unit)
    requires { [#"station.ads" 19 0 0] true }
    ensures { [#"station.ads" 19 0 0]
              [#"station.ads" 21 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@comment:     Post => S.Door1 = Closed and S.Door2 = Closed;              ^ station.ads:21:14:VC_POSTCONDITION]
              [@GP_Sloc:station.ads:21:14]
              [@model_vc_post]
              [@GP_Id:1]
              [@GP_Shape:pragargs__and]
              (([@GP_Sloc:station.ads:21:14]
                [@GP_Pretty_Ada:1016]
                ((Station__airlock_door__rep.to_rep
                    ((Station__station_record.__split_fields
                         { Station__station_record.__split_fields =
                             (Station__station_record.__split_fields__content
                                 Station__seal_airlock__s.s__split_fields) }).
                       Station__station_record.rec__station__station_record__door1))
                   = (1 : int))) /\
                 ([@GP_Sloc:station.ads:21:35]
                  [@GP_Pretty_Ada:1022]
                  ((Station__airlock_door__rep.to_rep
                      ((Station__station_record.__split_fields
                           { Station__station_record.__split_fields =
                               (Station__station_record.__split_fields__content
                                   Station__seal_airlock__s.s__split_fields) }).
                         Station__station_record.rec__station__station_record__door2))
                     = (1 : int)))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram station.ads:19]
      ());
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__seal_airlock__s.s__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram station.ads:19]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram station.ads:19]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.orb
               ((Station__airlock_door__rep.to_rep
                   ((Station__station_record.__split_fields
                        { Station__station_record.__split_fields =
                            (Station__station_record.__split_fields__content
                                Station__seal_airlock__s.s__split_fields) }).
                      Station__station_record.rec__station__station_record__door1))
                  = (0 : int)))
              ((Station__airlock_door__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__seal_airlock__s.s__split_fields) }).
                     Station__station_record.rec__station__station_record__door2))
                 = (0 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram station.ads:19] ());
     assume {
       [@GP_Pretty_Ada:11853]
       (((Station__airlock_door__rep.to_rep
            ((Station__station_record.__split_fields
                 { Station__station_record.__split_fields =
                     (Station__station_record.__split_fields__content
                         Station__seal_airlock__s.s__split_fields) }).
               Station__station_record.rec__station__station_record__door1))
           = (0 : int)) \/
          ((Station__airlock_door__rep.to_rep
              ((Station__station_record.__split_fields
                   { Station__station_record.__split_fields =
                       (Station__station_record.__split_fields__content
                           Station__seal_airlock__s.s__split_fields) }).
                 Station__station_record.rec__station__station_record__door2))
             = (0 : int))) };
     (try
        ([@GP_Sloc:station.adb:19:10]
         [#"station.adb" 19 0 0]
         (if (([#"station.adb" 19 0 0]
               [#"station.adb" 19 0 0]
               (([@branch_id=875] Main.spark__branch).bool__content <-
                  ((Station__airlock_door__rep.to_rep
                      ((Station__station_record.__split_fields
                           { Station__station_record.__split_fields =
                               (Station__station_record.__split_fields__content
                                   Station__seal_airlock__s.s__split_fields) }).
                         Station__station_record.rec__station__station_record__door1))
                     = (0 : int))));
              (([@branch_id=875] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:station.adb:20:18]
             [#"station.adb" 20 0 0]
             (let temp___199 =
                let temp___198 =
                  { Station__station_record.__split_fields =
                      (Station__station_record.__split_fields__content
                          Station__seal_airlock__s.s__split_fields) } in
                ([#"station.adb" 20 0 0]
                 (begin
                    ensures { true }
                    let _ =
                      let _ =
                        (Station__station_record.__split_fields temp___198).
                          Station__station_record.rec__station__station_record__door1 in
                      () in
                    ()
                  end));
                ({ temp___198 with
                   Station__station_record.__split_fields =
                     ({ (Station__station_record.__split_fields temp___198) with
                        Station__station_record.rec__station__station_record__door1 =
                          (Station__airlock_door__rep.of_rep (1 : int)) }) }) in
              [#"station.adb" 20 0 0]
              (Station__seal_airlock__s.s__split_fields.Station__station_record.__split_fields__content <-
                 (Station__station_record.__split_fields temp___199))))
          else
            ([@GP_Sloc:station.adb:21:7]
             (if (([#"station.adb" 21 0 0]
                   [#"station.adb" 21 0 0]
                   (([@branch_id=887] Main.spark__branch).bool__content <-
                      ((Station__airlock_door__rep.to_rep
                          ((Station__station_record.__split_fields
                               { Station__station_record.__split_fields =
                                   (Station__station_record.__split_fields__content
                                       Station__seal_airlock__s.s__split_fields) }).
                             Station__station_record.rec__station__station_record__door2))
                         = (0 : int))));
                  (([@branch_id=887] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:station.adb:22:18]
                 [#"station.adb" 22 0 0]
                 (let temp___202 =
                    let temp___201 =
                      { Station__station_record.__split_fields =
                          (Station__station_record.__split_fields__content
                              Station__seal_airlock__s.s__split_fields) } in
                    ([#"station.adb" 22 0 0]
                     (begin
                        ensures { true }
                        let _ =
                          let _ =
                            (Station__station_record.__split_fields
                                temp___201).Station__station_record.rec__station__station_record__door2 in
                          () in
                        ()
                      end));
                    ({ temp___201 with
                       Station__station_record.__split_fields =
                         ({ (Station__station_record.__split_fields
                                temp___201) with
                            Station__station_record.rec__station__station_record__door2 =
                              (Station__airlock_door__rep.of_rep (1 : int)) }) }) in
                  [#"station.adb" 22 0 0]
                  (Station__seal_airlock__s.s__split_fields.Station__station_record.__split_fields__content <-
                     (Station__station_record.__split_fields temp___202))))
              else ()))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((Station__airlock_door__rep.to_rep
                   ((Station__station_record.__split_fields
                        { Station__station_record.__split_fields =
                            (Station__station_record.__split_fields__content
                                Station__seal_airlock__s.s__split_fields) }).
                      Station__station_record.rec__station__station_record__door1))
                  = (1 : int)))
              ((Station__airlock_door__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__seal_airlock__s.s__split_fields) }).
                     Station__station_record.rec__station__station_record__door2))
                 = (1 : int)) in
          () in
        ()
      end))
end
