module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard_String__Img
  use int.Int
  use Standard__string as Standard__string
  use _gnatprove_standard.Main
  use int.Int
  
  val function to_string (x: Main.__image) (s: int) : Standard__string.string__
  
  val function from_string (x: Standard__string.string__) : Main.__image
  
  axiom to_string__first:
    forall x : Main.__image.
      forall s : int [(to_string x) s].
        ((Standard__string.first ((to_string x) s)) = (1 : int))
  
  axiom to_string__length:
    forall x : Main.__image.
      forall s : int [(to_string x) s].
        ((s >= (0 : int)) ->
           ((Standard__string.length ((to_string x) s)) <= s))
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Array__Int__Standard__character__Concat
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  function index_Index_one : int = 1 : int
  
  clone export _gnatprove_standard.Array__1__Concat with
    axiom .,
    type component_type = Array__Int__Standard__character.component_type,
    type map = Array__Int__Standard__character.map,
    type Index.t = int,
    predicate Index.le = Int.( <= ),
    predicate Index.lt = Int.( < ),
    predicate Index.gt = Int.( > ),
    function Index.add = Int.( + ),
    function Index.sub = Int.( - ),
    function Index.one = index_Index_one,
    function get = Array__Int__Standard__character.get
end

module Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type airlock_door
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = airlock_door,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref = { mutable airlock_door__content : airlock_door }
  
  function airlock_door__ref_airlock_door__content__projection (a: airlock_door__ref) : airlock_door =
    a.airlock_door__content
  
  meta "model_projection" function airlock_door__ref_airlock_door__content__projection
  
  meta "inline:no" function airlock_door__ref_airlock_door__content__projection
  
  val airlock_door__havoc (x: airlock_door__ref) : unit
    writes { x }
end

module Station__airlock_door__rep
  use Station__airlock_door as Station__airlock_door
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__T1s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t1s = <range 820000 920000>
  
  val function first : int
    ensures { result = (820000 : int) }
  
  val function last : int
    ensures { result = (920000 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t1s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t1s__ref = { mutable t1s__content : t1s }
  
  function t1s__ref_t1s__content__projection (a: t1s__ref) : t1s =
    a.t1s__content
  
  meta "model_projection" function t1s__ref_t1s__content__projection
  
  meta "inline:no" function t1s__ref_t1s__content__projection
  
  val t1s__havoc (x: t1s__ref) : unit
    writes { x }
end

module Station__station_record__T1s__rep
  use Station__station_record__T1s as Station__station_record__T1s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Station__station_record__T1s.t1s) : int =
    Station__station_record__T1s.t1s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Station__station_record__T1s.t1s,
    predicate in_range = Station__station_record__T1s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Station__station_record__T1s as Station__station_record__T1s
  use Station__station_record__T1s__rep as Station__station_record__T1s__rep
  
  type __split_fields = {
                       rec__station__station_record__door1 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__door2 :
                         Station__airlock_door.airlock_door;
                       rec__station__station_record__altitude :
                         Station__station_record__T1s.t1s
                       }
  
  function __split_fields_rec__station__station_record__door1__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door1
  
  meta "model_projection" function __split_fields_rec__station__station_record__door1__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door1__projection
  
  function __split_fields_rec__station__station_record__door2__projection (a: __split_fields) : 
    Station__airlock_door.airlock_door =
    a.rec__station__station_record__door2
  
  meta "model_projection" function __split_fields_rec__station__station_record__door2__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__door2__projection
  
  function __split_fields_rec__station__station_record__altitude__projection (a: __split_fields) : 
    Station__station_record__T1s.t1s =
    a.rec__station__station_record__altitude
  
  meta "model_projection" function __split_fields_rec__station__station_record__altitude__projection
  
  meta "inline:no" function __split_fields_rec__station__station_record__altitude__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate station__station_record__door1__pred (a: __rep) = true
  
  val station__station_record__door1__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door1__pred (a : __rep)) }
  
  val rec__station__station_record__door1_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door1__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door1)) }
  
  predicate station__station_record__door2__pred (a: __rep) = true
  
  val station__station_record__door2__pred (a: __rep) : bool
    ensures { result <-> (station__station_record__door2__pred (a : __rep)) }
  
  val rec__station__station_record__door2_ (a: __rep) : Station__airlock_door.airlock_door
    requires { station__station_record__door2__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__door2)) }
  
  predicate station__station_record__altitude__pred (a: __rep) = true
  
  val station__station_record__altitude__pred (a: __rep) : bool
    ensures { result
                <->
                (station__station_record__altitude__pred (a : __rep)) }
  
  val rec__station__station_record__altitude_ (a: __rep) : Station__station_record__T1s.t1s
    requires { station__station_record__altitude__pred a }
    ensures { (result
                 = ((__split_fields a).rec__station__station_record__altitude)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Station__airlock_door__rep.to_rep
             ((__split_fields a).rec__station__station_record__door1))
            = (Station__airlock_door__rep.to_rep
                 ((__split_fields b).rec__station__station_record__door1))) /\
           ((Station__airlock_door__rep.to_rep
               ((__split_fields a).rec__station__station_record__door2))
              = (Station__airlock_door__rep.to_rep
                   ((__split_fields b).rec__station__station_record__door2)))) /\
          ((Station__station_record__T1s__rep.to_rep
              ((__split_fields a).rec__station__station_record__altitude))
             = (Station__station_record__T1s__rep.to_rep
                  ((__split_fields b).rec__station__station_record__altitude)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Station__station_record
  use export Station__station_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type station_record = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function station__station_record__door1__first__bit : int
  
  val function station__station_record__door1__last__bit : int
  
  val function station__station_record__door1__position : int
  
  axiom station__station_record__door1__first__bit_axiom:
    (station__station_record__door1__first__bit >= (0 : int))
  
  axiom station__station_record__door1__last__bit_axiom:
    (station__station_record__door1__last__bit
       > station__station_record__door1__first__bit)
  
  axiom station__station_record__door1__position_axiom:
    (station__station_record__door1__position >= (0 : int))
  
  val function station__station_record__door2__first__bit : int
  
  val function station__station_record__door2__last__bit : int
  
  val function station__station_record__door2__position : int
  
  axiom station__station_record__door2__first__bit_axiom:
    (station__station_record__door2__first__bit >= (0 : int))
  
  axiom station__station_record__door2__last__bit_axiom:
    (station__station_record__door2__last__bit
       > station__station_record__door2__first__bit)
  
  axiom station__station_record__door2__position_axiom:
    (station__station_record__door2__position >= (0 : int))
  
  val function station__station_record__altitude__first__bit : int
  
  val function station__station_record__altitude__last__bit : int
  
  val function station__station_record__altitude__position : int
  
  axiom station__station_record__altitude__first__bit_axiom:
    (station__station_record__altitude__first__bit >= (0 : int))
  
  axiom station__station_record__altitude__last__bit_axiom:
    (station__station_record__altitude__last__bit
       > station__station_record__altitude__first__bit)
  
  axiom station__station_record__altitude__position_axiom:
    (station__station_record__altitude__position >= (0 : int))
  
  val function user_eq (a: station_record) (b: station_record) : bool
  
  val function dummy : station_record
  
  type station_record__ref = {
                            mutable station_record__content : station_record
                            }
  
  function station_record__ref_station_record__content__projection (a: station_record__ref) : station_record =
    a.station_record__content
  
  meta "model_projection" function station_record__ref_station_record__content__projection
  
  meta "inline:no" function station_record__ref_station_record__content__projection
  
  val station_record__havoc (x: station_record__ref) : unit
    writes { x }
end

module Station__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Station__station_record___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__station_record as Station__station_record
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  predicate dynamic_invariant (temp___expr_175: Station__station_record.station_record) (temp___is_init_171: bool) (temp___skip_constant_172: bool) (temp___do_toplevel_173: bool) (temp___do_typ_inv_174: bool) =
    true
  
  val dynamic_invariant (temp___expr_175: Station__station_record.station_record) (temp___is_init_171: bool) (temp___skip_constant_172: bool) (temp___do_toplevel_173: bool) (temp___do_typ_inv_174: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_175 :
                          Station__station_record.station_record))
                      (temp___is_init_171 : bool))
                     (temp___skip_constant_172 : bool))
                    (temp___do_toplevel_173 : bool))
                   (temp___do_typ_inv_174 : bool)) }
  
  predicate default_initial_assumption (temp___expr_176: Station__station_record.station_record) (temp___skip_top_level_177: bool) =
    ((if (Station__station_record.station__station_record__door1__pred
            temp___expr_176) then
        ((Station__airlock_door__rep.to_rep
            ((Station__station_record.__split_fields temp___expr_176).
               Station__station_record.rec__station__station_record__door1))
           = (1 : int))
      else true) /\
       (if (Station__station_record.station__station_record__door2__pred
              temp___expr_176) then
          ((Station__airlock_door__rep.to_rep
              ((Station__station_record.__split_fields temp___expr_176).
                 Station__station_record.rec__station__station_record__door2))
             = (1 : int))
        else true))
  
  val default_initial_assumption (temp___expr_176: Station__station_record.station_record) (temp___skip_top_level_177: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_176 : Station__station_record.station_record))
                   (temp___skip_top_level_177 : bool)) }
end

module Station__sealedinvariant
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val function sealedinvariant (Station__s___s__split_fields___: Station__station_record.__split_fields) : 
    bool
  
  val predicate sealedinvariant__function_guard (temp___result_161: bool) (Station__s___s__split_fields___: 
    Station__station_record.__split_fields)
end

module Station__sealedinvariant___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__s as Station__s
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__sealedinvariant as Station__sealedinvariant
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  
  val sealedinvariant (__void_param: unit) : bool
    reads { Station__s.s__split_fields }
    requires { true }
    writes {  }
    ensures { (((result
                   = (Station__sealedinvariant.sealedinvariant
                        (Station__station_record.__split_fields__content
                            Station__s.s__split_fields))) /\
                  ((Station__sealedinvariant.sealedinvariant__function_guard
                      result)
                     (Station__station_record.__split_fields__content
                         Station__s.s__split_fields))) /\
                 (result
                    = (((((Station__airlock_door__rep.to_rep
                             ((Station__station_record.__split_fields
                                  { Station__station_record.__split_fields =
                                      (Station__station_record.__split_fields__content
                                          Station__s.s__split_fields) }).
                                Station__station_record.rec__station__station_record__door1))
                            = (0 : int)) /\
                           ((Station__airlock_door__rep.to_rep
                               ((Station__station_record.__split_fields
                                    { Station__station_record.__split_fields =
                                        (Station__station_record.__split_fields__content
                                            Station__s.s__split_fields) }).
                                  Station__station_record.rec__station__station_record__door2))
                              = (1 : int))) \/
                          (((Station__airlock_door__rep.to_rep
                               ((Station__station_record.__split_fields
                                    { Station__station_record.__split_fields =
                                        (Station__station_record.__split_fields__content
                                            Station__s.s__split_fields) }).
                                  Station__station_record.rec__station__station_record__door1))
                              = (1 : int)) /\
                             ((Station__airlock_door__rep.to_rep
                                 ((Station__station_record.__split_fields
                                      { Station__station_record.__split_fields =
                                          (Station__station_record.__split_fields__content
                                              Station__s.s__split_fields) }).
                                    Station__station_record.rec__station__station_record__door2))
                                = (0 : int)))) \/
                         (((Station__airlock_door__rep.to_rep
                              ((Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__door1))
                             = (1 : int)) /\
                            ((Station__airlock_door__rep.to_rep
                                ((Station__station_record.__split_fields
                                     { Station__station_record.__split_fields =
                                         (Station__station_record.__split_fields__content
                                             Station__s.s__split_fields) }).
                                   Station__station_record.rec__station__station_record__door2))
                               = (1 : int)))))) }
  
  axiom sealedinvariant__post_axiom:
    forall Station__s___s__split_fields___ : Station__station_record.__split_fields
          [Station__sealedinvariant.sealedinvariant
             Station__s___s__split_fields___].
      ((((((Station__station_record___axiom.dynamic_invariant
              { Station__station_record.__split_fields =
                  Station__s___s__split_fields___ })
             True)
            True)
           True)
          True) ->
         (let result =
            Station__sealedinvariant.sealedinvariant
              Station__s___s__split_fields___ in
          if ((Station__sealedinvariant.sealedinvariant__function_guard
                 result)
                Station__s___s__split_fields___) then
            ((true /\ true) /\ true)
          else true))
  
  axiom sealedinvariant__def_axiom:
    forall Station__s___s__split_fields___ : Station__station_record.__split_fields
          [Station__sealedinvariant.sealedinvariant
             Station__s___s__split_fields___].
      ((Station__sealedinvariant.sealedinvariant
          Station__s___s__split_fields___)
         = (((((Station__airlock_door__rep.to_rep
                  ((Station__station_record.__split_fields
                       { Station__station_record.__split_fields =
                           Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
                 = (0 : int)) /\
                ((Station__airlock_door__rep.to_rep
                    ((Station__station_record.__split_fields
                         { Station__station_record.__split_fields =
                             Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                   = (1 : int))) \/
               (((Station__airlock_door__rep.to_rep
                    ((Station__station_record.__split_fields
                         { Station__station_record.__split_fields =
                             Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
                   = (1 : int)) /\
                  ((Station__airlock_door__rep.to_rep
                      ((Station__station_record.__split_fields
                           { Station__station_record.__split_fields =
                               Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                     = (0 : int)))) \/
              (((Station__airlock_door__rep.to_rep
                   ((Station__station_record.__split_fields
                        { Station__station_record.__split_fields =
                            Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door1))
                  = (1 : int)) /\
                 ((Station__airlock_door__rep.to_rep
                     ((Station__station_record.__split_fields
                          { Station__station_record.__split_fields =
                              Station__s___s__split_fields___ }).Station__station_record.rec__station__station_record__door2))
                    = (1 : int)))))
end

module Station__open_door__s
  use _gnatprove_standard.Main
  use int.Int
  use Station__station_record as Station__station_record
  
  val s__split_fields : Station__station_record.__split_fields__ref
end

module Station__open_door__airlock_number
  use _gnatprove_standard.Main
  use int.Int
  
  val function airlock_number : int
end

module Ada___ada__text_io__line_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function line_length (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) : int
  
  val predicate line_length__function_guard (temp___result_162: int) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private)
end

module Ada___ada__text_io__page_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function page_length (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) : int
  
  val predicate page_length__function_guard (temp___result_163: int) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private)
end

module Ada___ada__text_io__file_system
  use _gnatprove_standard.Main
  use int.Int
  
  val file_system : Main.__private__ref
end

module Ada___ada__text_io__standard_in
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_in : Main.__private__ref
end

module Ada___ada__text_io__standard_out
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_out : Main.__private__ref
end

module Ada___ada__text_io__standard_err
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_err : Main.__private__ref
end

module Ada___ada__text_io__current_in
  use _gnatprove_standard.Main
  use int.Int
  
  val current_in : Main.__private__ref
end

module Ada___ada__text_io__current_out
  use _gnatprove_standard.Main
  use int.Int
  
  val current_out : Main.__private__ref
end

module Ada___ada__text_io__current_err
  use _gnatprove_standard.Main
  use int.Int
  
  val current_err : Main.__private__ref
end

module Ada___ada__text_io__put_line__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val put_line (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err }
    ensures { (([@GP_Pretty_Ada:3516]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err)))) /\
                 ([@GP_Pretty_Ada:3522]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__file_system.file_system))
                                (Main.__private__content
                                    Ada___ada__text_io__standard_in.standard_in))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_out.standard_out))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_err.standard_err))
                             (Main.__private__content
                                 Ada___ada__text_io__current_in.current_in))
                            (Main.__private__content
                                Ada___ada__text_io__current_out.current_out))
                           (Main.__private__content
                               Ada___ada__text_io__current_err.current_err)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out))
                          (Main.__private__content
                              Ada___ada__text_io__current_err.current_err))))) }
end

module Temp___String_Literal_201
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_201 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_201__def_axiom:
    forall __void_param : unit [temp___String_Literal_201 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_201 __void_param))
               (1 : int)))
           = (79 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_201 __void_param))
                 (2 : int)))
             = (112 : int))) /\
         (((((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_201 __void_param))
                     (3 : int)))
                 = (101 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_201 __void_param))
                       (4 : int)))
                   = (110 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_201 __void_param))
                      (5 : int)))
                  = (105 : int))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_201 __void_param))
                       (6 : int)))
                   = (110 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_201 __void_param))
                         (7 : int)))
                     = (103 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_201 __void_param))
                        (8 : int)))
                    = (32 : int)))) /\
             (((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_201 __void_param))
                       (9 : int)))
                   = (73 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_201 __void_param))
                         (10 : int)))
                     = (110 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_201 __void_param))
                        (11 : int)))
                    = (116 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_201 __void_param))
                        (12 : int)))
                    = (101 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_201 __void_param))
                          (13 : int)))
                      = (114 : int))))) /\
            ((((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_201 __void_param))
                       (14 : int)))
                   = (105 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_201 __void_param))
                         (15 : int)))
                     = (111 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_201 __void_param))
                        (16 : int)))
                    = (114 : int))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_201 __void_param))
                         (17 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_201 __void_param))
                           (18 : int)))
                       = (68 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_201 __void_param))
                          (19 : int)))
                      = (111 : int)))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_201 __void_param))
                         (20 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_201 __void_param))
                           (21 : int)))
                       = (114 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_201 __void_param))
                          (22 : int)))
                      = (46 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_201 __void_param))
                          (23 : int)))
                      = (46 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_201 __void_param))
                            (24 : int)))
                        = (46 : int)))))))
end

module Temp___String_Literal_203
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_203 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_203__def_axiom:
    forall __void_param : unit [temp___String_Literal_203 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_203 __void_param))
               (1 : int)))
           = (68 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_203 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_203 __void_param))
                   (3 : int)))
               = (111 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_203 __void_param))
                     (4 : int)))
                 = (114 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_203 __void_param))
                     (5 : int)))
                 = (32 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_203 __void_param))
                       (6 : int)))
                   = (49 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_203 __void_param))
                     (7 : int)))
                 = (32 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_203 __void_param))
                       (8 : int)))
                   = (105 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_203 __void_param))
                       (9 : int)))
                   = (115 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_203 __void_param))
                         (10 : int)))
                     = (58 : int))))))
end

module Temp___String_Literal_206
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_206 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_206__def_axiom:
    forall __void_param : unit [temp___String_Literal_206 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_206 __void_param))
               (1 : int)))
           = (68 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_206 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_206 __void_param))
                   (3 : int)))
               = (111 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_206 __void_param))
                     (4 : int)))
                 = (114 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_206 __void_param))
                     (5 : int)))
                 = (32 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_206 __void_param))
                       (6 : int)))
                   = (50 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_206 __void_param))
                     (7 : int)))
                 = (32 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_206 __void_param))
                       (8 : int)))
                   = (105 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_206 __void_param))
                       (9 : int)))
                   = (115 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_206 __void_param))
                         (10 : int)))
                     = (58 : int))))))
end

module Temp___String_Literal_209
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_209 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_209__def_axiom:
    forall __void_param : unit [temp___String_Literal_209 __void_param]. true
end

module Temp___String_Literal_211
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_211 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_211__def_axiom:
    forall __void_param : unit [temp___String_Literal_211 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_211 __void_param))
               (1 : int)))
           = (85 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_211 __void_param))
                 (2 : int)))
             = (110 : int))) /\
         ((((Standard__character__rep.to_rep
               ((Array__Int__Standard__character.get
                   (temp___String_Literal_211 __void_param))
                  (3 : int)))
              = (115 : int)) /\
             ((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_211 __void_param))
                    (4 : int)))
                = (97 : int))) /\
            (((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_211 __void_param))
                    (5 : int)))
                = (102 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_211 __void_param))
                      (6 : int)))
                  = (101 : int)))))
end

module Temp___String_Literal_219
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_219 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_219__def_axiom:
    forall __void_param : unit [temp___String_Literal_219 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_219 __void_param))
               (1 : int)))
           = (79 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_219 __void_param))
                 (2 : int)))
             = (112 : int))) /\
         (((((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_219 __void_param))
                     (3 : int)))
                 = (101 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_219 __void_param))
                       (4 : int)))
                   = (110 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_219 __void_param))
                      (5 : int)))
                  = (105 : int))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_219 __void_param))
                       (6 : int)))
                   = (110 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_219 __void_param))
                         (7 : int)))
                     = (103 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_219 __void_param))
                        (8 : int)))
                    = (32 : int)))) /\
             (((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_219 __void_param))
                       (9 : int)))
                   = (69 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_219 __void_param))
                         (10 : int)))
                     = (120 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_219 __void_param))
                        (11 : int)))
                    = (116 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_219 __void_param))
                        (12 : int)))
                    = (101 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_219 __void_param))
                          (13 : int)))
                      = (114 : int))))) /\
            ((((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_219 __void_param))
                       (14 : int)))
                   = (105 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_219 __void_param))
                         (15 : int)))
                     = (111 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_219 __void_param))
                        (16 : int)))
                    = (114 : int))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_219 __void_param))
                         (17 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_219 __void_param))
                           (18 : int)))
                       = (68 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_219 __void_param))
                          (19 : int)))
                      = (111 : int)))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_219 __void_param))
                         (20 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_219 __void_param))
                           (21 : int)))
                       = (114 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_219 __void_param))
                          (22 : int)))
                      = (46 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_219 __void_param))
                          (23 : int)))
                      = (46 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_219 __void_param))
                            (24 : int)))
                        = (46 : int)))))))
end

module Temp___String_Literal_221
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_221 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_221__def_axiom:
    forall __void_param : unit [temp___String_Literal_221 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_221 __void_param))
               (1 : int)))
           = (68 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_221 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_221 __void_param))
                    (3 : int)))
                = (111 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_221 __void_param))
                      (4 : int)))
                  = (114 : int))) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_221 __void_param))
                     (5 : int)))
                 = (32 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_221 __void_param))
                     (6 : int)))
                 = (49 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_221 __void_param))
                       (7 : int)))
                   = (32 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_221 __void_param))
                     (8 : int)))
                 = (105 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_221 __void_param))
                       (9 : int)))
                   = (115 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_221 __void_param))
                       (10 : int)))
                   = (58 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_221 __void_param))
                         (11 : int)))
                     = (32 : int))))))
end

module Temp___String_Literal_224
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_224 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_224__def_axiom:
    forall __void_param : unit [temp___String_Literal_224 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_224 __void_param))
               (1 : int)))
           = (68 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_224 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_224 __void_param))
                    (3 : int)))
                = (111 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_224 __void_param))
                      (4 : int)))
                  = (114 : int))) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_224 __void_param))
                     (5 : int)))
                 = (32 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_224 __void_param))
                     (6 : int)))
                 = (50 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_224 __void_param))
                       (7 : int)))
                   = (32 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_224 __void_param))
                     (8 : int)))
                 = (105 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_224 __void_param))
                       (9 : int)))
                   = (115 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_224 __void_param))
                       (10 : int)))
                   = (58 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_224 __void_param))
                         (11 : int)))
                     = (32 : int))))))
end

module Temp___String_Literal_227
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_227 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_227__def_axiom:
    forall __void_param : unit [temp___String_Literal_227 __void_param]. true
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Station__airlock_door___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Station__airlock_door as Station__airlock_door
  
  predicate dynamic_invariant (temp___expr_168: int) (temp___is_init_164: bool) (temp___skip_constant_165: bool) (temp___do_toplevel_166: bool) (temp___do_typ_inv_167: bool) =
    if ((temp___is_init_164 = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last)) then
      (((Station__airlock_door.dynamic_property Station__airlock_door.first)
          Station__airlock_door.last)
         temp___expr_168)
    else true
  
  val dynamic_invariant (temp___expr_168: int) (temp___is_init_164: bool) (temp___skip_constant_165: bool) (temp___do_toplevel_166: bool) (temp___do_typ_inv_167: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_168 : int))
                      (temp___is_init_164 : bool))
                     (temp___skip_constant_165 : bool))
                    (temp___do_toplevel_166 : bool))
                   (temp___do_typ_inv_167 : bool)) }
  
  predicate default_initial_assumption (temp___expr_169: int) (temp___skip_top_level_170: bool) =
    true
  
  val default_initial_assumption (temp___expr_169: int) (temp___skip_top_level_170: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_169 : int))
                   (temp___skip_top_level_170 : bool)) }
end

module Station__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__open_door__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__open_door__airlock_number___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Ada___ada__text_io__count
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type count = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = count,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type count__ref = { mutable count__content : count }
  
  function count__ref_count__content__projection (a: count__ref) : count =
    a.count__content
  
  meta "model_projection" function count__ref_count__content__projection
  
  meta "inline:no" function count__ref_count__content__projection
  
  val count__havoc (x: count__ref) : unit
    writes { x }
end

module Ada___ada__text_io__count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Ada___ada__text_io__count as Ada___ada__text_io__count
  
  predicate dynamic_invariant (temp___expr_188: int) (temp___is_init_184: bool) (temp___skip_constant_185: bool) (temp___do_toplevel_186: bool) (temp___do_typ_inv_187: bool) =
    if ((temp___is_init_184 = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last)) then
      (((Ada___ada__text_io__count.dynamic_property
           Ada___ada__text_io__count.first)
          Ada___ada__text_io__count.last)
         temp___expr_188)
    else true
  
  val dynamic_invariant (temp___expr_188: int) (temp___is_init_184: bool) (temp___skip_constant_185: bool) (temp___do_toplevel_186: bool) (temp___do_typ_inv_187: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_188 : int))
                      (temp___is_init_184 : bool))
                     (temp___skip_constant_185 : bool))
                    (temp___do_toplevel_186 : bool))
                   (temp___do_typ_inv_187 : bool)) }
  
  predicate default_initial_assumption (temp___expr_189: int) (temp___skip_top_level_190: bool) =
    true
  
  val default_initial_assumption (temp___expr_189: int) (temp___skip_top_level_190: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_189 : int))
                   (temp___skip_top_level_190 : bool)) }
end

module Ada___ada__text_io__line_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val line_length (__void_param: unit) : int
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom line_length__post_axiom:
    forall Ada___ada__text_io__file_system___file_system___ : Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private
          [((((((Ada___ada__text_io__line_length__2.line_length
                   Ada___ada__text_io__file_system___file_system___)
                  Ada___ada__text_io__standard_in___standard_in___)
                 Ada___ada__text_io__standard_out___standard_out___)
                Ada___ada__text_io__standard_err___standard_err___)
               Ada___ada__text_io__current_in___current_in___)
              Ada___ada__text_io__current_out___current_out___)
             Ada___ada__text_io__current_err___current_err___].
      let result =
        ((((((Ada___ada__text_io__line_length__2.line_length
                Ada___ada__text_io__file_system___file_system___)
               Ada___ada__text_io__standard_in___standard_in___)
              Ada___ada__text_io__standard_out___standard_out___)
             Ada___ada__text_io__standard_err___standard_err___)
            Ada___ada__text_io__current_in___current_in___)
           Ada___ada__text_io__current_out___current_out___)
          Ada___ada__text_io__current_err___current_err___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Ada___ada__text_io__page_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val page_length (__void_param: unit) : int
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__page_length__2.page_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom page_length__post_axiom:
    forall Ada___ada__text_io__file_system___file_system___ : Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private
          [((((((Ada___ada__text_io__page_length__2.page_length
                   Ada___ada__text_io__file_system___file_system___)
                  Ada___ada__text_io__standard_in___standard_in___)
                 Ada___ada__text_io__standard_out___standard_out___)
                Ada___ada__text_io__standard_err___standard_err___)
               Ada___ada__text_io__current_in___current_in___)
              Ada___ada__text_io__current_out___current_out___)
             Ada___ada__text_io__current_err___current_err___].
      let result =
        ((((((Ada___ada__text_io__page_length__2.page_length
                Ada___ada__text_io__file_system___file_system___)
               Ada___ada__text_io__standard_in___standard_in___)
              Ada___ada__text_io__standard_out___standard_out___)
             Ada___ada__text_io__standard_err___standard_err___)
            Ada___ada__text_io__current_in___current_in___)
           Ada___ada__text_io__current_out___current_out___)
          Ada___ada__text_io__current_err___current_err___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Station__station_record__T1s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Station__open_door__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Integer as Integer
  use _gnatprove_standard.Boolean as Boolean
  use Standard_String__Img as Standard_String__Img
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__positive as Standard__positive
  use Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
  use Standard__string as Standard__string
  use Station__s as Station__s
  use Station__station_record as Station__station_record
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__sealedinvariant as Station__sealedinvariant
  use Station__sealedinvariant___axiom as Station__sealedinvariant___axiom
  use Station__open_door__s as Station__open_door__s
  use Station__open_door__airlock_number as Station__open_door__airlock_number
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Station__airlock_door as Station__airlock_door
  use Station__airlock_door__rep as Station__airlock_door__rep
  use Temp___String_Literal_201 as Temp___String_Literal_201
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_203 as Temp___String_Literal_203
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_206 as Temp___String_Literal_206
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_209 as Temp___String_Literal_209
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_211 as Temp___String_Literal_211
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_219 as Temp___String_Literal_219
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_221 as Temp___String_Literal_221
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_224 as Temp___String_Literal_224
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_227 as Temp___String_Literal_227
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Station__airlock_door___axiom as Station__airlock_door___axiom
  use Station__station_record___axiom as Station__station_record___axiom
  use Station__s___axiom as Station__s___axiom
  use Station__sealedinvariant___axiom as Station__sealedinvariant___axiom
  use Station__open_door__s___axiom as Station__open_door__s___axiom
  use Station__open_door__airlock_number___axiom as Station__open_door__airlock_number___axiom
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
  use Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Station__station_record__T1s___axiom as Station__station_record__T1s___axiom
  
  let def (__void_param : unit)
    requires { [#"station.ads" 25 0 0] true }
    ensures { [#"station.ads" 25 0 0]
              [#"station.ads" 27 0 0]
              [@GP_Sloc:station.ads:27:14]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__or]
              [@comment:     Post => (Airlock_Number = 1 and SealedInvariant) or              ^ station.ads:27:14:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:4]
              [@GP_Sloc:station.ads:27:14]
              [@GP_Pretty_Ada:12014]
              (((Station__open_door__airlock_number.airlock_number
                   = (1 : int)) /\
                  ((epsilon temp___result_230: bool.
                      ((temp___result_230
                          = (Station__sealedinvariant.sealedinvariant
                               (Station__station_record.__split_fields__content
                                   Station__s.s__split_fields))) /\
                         ((Station__sealedinvariant.sealedinvariant__function_guard
                             temp___result_230)
                            (Station__station_record.__split_fields__content
                                Station__s.s__split_fields))))
                     = True)) \/
                 ((Station__open_door__airlock_number.airlock_number
                     = (2 : int)) /\
                    ((epsilon temp___result_231: bool.
                        ((temp___result_231
                            = (Station__sealedinvariant.sealedinvariant
                                 (Station__station_record.__split_fields__content
                                     Station__s.s__split_fields))) /\
                           ((Station__sealedinvariant.sealedinvariant__function_guard
                               temp___result_231)
                              (Station__station_record.__split_fields__content
                                  Station__s.s__split_fields))))
                       = True))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram station.ads:25]
      ());
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__s.s__split_fields) })
            True)
           False)
          True)
         True };
     assume {
       ((((Station__station_record___axiom.dynamic_invariant
             { Station__station_record.__split_fields =
                 (Station__station_record.__split_fields__content
                     Station__open_door__s.s__split_fields) })
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             Station__open_door__airlock_number.airlock_number)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram station.ads:25]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram station.ads:25]
      ());
     (begin
        ensures { true }
        let _ =
          let _ = Station__sealedinvariant___axiom.sealedinvariant () in () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram station.ads:25] ());
     assume {
       [@GP_Pretty_Ada:11996]
       ((epsilon temp___result_229: bool.
           ((temp___result_229
               = (Station__sealedinvariant.sealedinvariant
                    (Station__station_record.__split_fields__content
                        Station__s.s__split_fields))) /\
              ((Station__sealedinvariant.sealedinvariant__function_guard
                  temp___result_229)
                 (Station__station_record.__split_fields__content
                     Station__s.s__split_fields))))
          = True) };
     (try
        ([@GP_Sloc:station.adb:10:33] [#"station.adb" 10 0 0] ());
        ([@GP_Sloc:station.adb:10:7]
         [#"station.adb" 10 0 0]
         (if (([#"station.adb" 10 0 0]
               [#"station.adb" 10 0 0]
               (([@branch_id=839] Main.spark__branch).bool__content <-
                  ((Boolean.andb
                      (Station__open_door__airlock_number.airlock_number
                         = (1 : int)))
                     (Station__sealedinvariant___axiom.sealedinvariant ()))));
              (([@branch_id=839] Main.spark__branch).bool__content)) then
            (([@GP_Sloc:station.adb:11:18]
              [#"station.adb" 11 0 0]
              (let temp___197 =
                 let temp___196 =
                   { Station__station_record.__split_fields =
                       (Station__station_record.__split_fields__content
                           Station__open_door__s.s__split_fields) } in
                 ([#"station.adb" 11 0 0]
                  (begin
                     ensures { true }
                     let _ =
                       let _ =
                         (Station__station_record.__split_fields temp___196).
                           Station__station_record.rec__station__station_record__door1 in
                       () in
                     ()
                   end));
                 ({ temp___196 with
                    Station__station_record.__split_fields =
                      ({ (Station__station_record.__split_fields temp___196) with
                         Station__station_record.rec__station__station_record__door1 =
                           (Station__airlock_door__rep.of_rep (0 : int)) }) }) in
               [#"station.adb" 11 0 0]
               (Station__open_door__s.s__split_fields.Station__station_record.__split_fields__content <-
                  (Station__station_record.__split_fields temp___197))));
             ([@GP_Sloc:station.adb:12:18]
              [#"station.adb" 12 0 0]
              (let temp___200 =
                 let temp___199 =
                   { Station__station_record.__split_fields =
                       (Station__station_record.__split_fields__content
                           Station__open_door__s.s__split_fields) } in
                 ([#"station.adb" 12 0 0]
                  (begin
                     ensures { true }
                     let _ =
                       let _ =
                         (Station__station_record.__split_fields temp___199).
                           Station__station_record.rec__station__station_record__door2 in
                       () in
                     ()
                   end));
                 ({ temp___199 with
                    Station__station_record.__split_fields =
                      ({ (Station__station_record.__split_fields temp___199) with
                         Station__station_record.rec__station__station_record__door2 =
                           (Station__airlock_door__rep.of_rep (1 : int)) }) }) in
               [#"station.adb" 12 0 0]
               (Station__open_door__s.s__split_fields.Station__station_record.__split_fields__content <-
                  (Station__station_record.__split_fields temp___200))));
             ([@GP_Sloc:station.adb:13:10] [#"station.adb" 13 0 0] ());
             ([@GP_Sloc:station.adb:13:10]
              [#"station.adb" 13 0 0]
              (([#"station.adb" 13 0 0] (val _f : unit in
                                         _f));
               (Ada___ada__text_io__put_line__2___axiom.put_line
                  (let temp___202 =
                     Temp___String_Literal_201.temp___String_Literal_201 () in
                   ((Standard__string.of_array temp___202) (1 : int))
                     (24 : int)))));
             ([@GP_Sloc:station.adb:14:10]
              [#"station.adb" 14 0 0] [#"station.adb" 14 0 0] ());
             ([@GP_Sloc:station.adb:15:10] [#"station.adb" 15 0 0] ());
             ([@GP_Sloc:station.adb:15:10]
              [#"station.adb" 15 0 0]
              (([#"station.adb" 15 0 0] (val _f : unit in
                                         _f));
               (Ada___ada__text_io__put_line__2___axiom.put_line
                  (let temp___205 =
                     (Standard_String__Img.to_string
                        (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                           (Station__airlock_door__rep.to_rep
                              ((Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__open_door__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__door1))))
                       (2040 : int) in
                   let temp___204 =
                     Temp___String_Literal_203.temp___String_Literal_203 () in
                   ((Standard__string.of_array
                       ((((((Array__Int__Standard__character__Concat.concat
                               temp___204)
                              (1 : int))
                             (10 : int))
                            (Standard__string.to_array temp___205))
                           (Standard__string.first temp___205))
                          (Standard__string.last temp___205)))
                      (1 : int))
                     ([#"station.adb" 15 0 0]
                      [@comment:         Put_Line ("Door 1 is:" & S.Door1'Image);                                 ^ station.adb:15:33:VC_RANGE_CHECK]
                      [@vc:annotation]
                      [@GP_Reason:VC_RANGE_CHECK]
                      [@GP_Shape:if__call_put_line__concat]
                      [@GP_Sloc:station.adb:15:33]
                      [@GP_Id:0]
                      (Standard__positive.range_check_
                         (((1 : int)
                             + (((Integer.length (1 : int)) (10 : int))
                                  + ((Integer.length
                                        (Standard__string.first temp___205))
                                       (Standard__string.last temp___205))))
                            - (1 : int))))))));
             ([@GP_Sloc:station.adb:16:10] [#"station.adb" 16 0 0] ());
             ([@GP_Sloc:station.adb:16:10]
              [#"station.adb" 16 0 0]
              (([#"station.adb" 16 0 0] (val _f : unit in
                                         _f));
               (Ada___ada__text_io__put_line__2___axiom.put_line
                  (let temp___208 =
                     (Standard_String__Img.to_string
                        (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                           (Station__airlock_door__rep.to_rep
                              ((Station__station_record.__split_fields
                                   { Station__station_record.__split_fields =
                                       (Station__station_record.__split_fields__content
                                           Station__open_door__s.s__split_fields) }).
                                 Station__station_record.rec__station__station_record__door2))))
                       (2040 : int) in
                   let temp___207 =
                     Temp___String_Literal_206.temp___String_Literal_206 () in
                   ((Standard__string.of_array
                       ((((((Array__Int__Standard__character__Concat.concat
                               temp___207)
                              (1 : int))
                             (10 : int))
                            (Standard__string.to_array temp___208))
                           (Standard__string.first temp___208))
                          (Standard__string.last temp___208)))
                      (1 : int))
                     ([#"station.adb" 16 0 0]
                      [@GP_Sloc:station.adb:16:33]
                      [@vc:annotation]
                      [@comment:         Put_Line ("Door 2 is:" & S.Door2'Image);                                 ^ station.adb:16:33:VC_RANGE_CHECK]
                      [@GP_Reason:VC_RANGE_CHECK]
                      [@GP_Shape:if__call_put_line__concat]
                      [@GP_Id:1]
                      (Standard__positive.range_check_
                         (((1 : int)
                             + (((Integer.length (1 : int)) (10 : int))
                                  + ((Integer.length
                                        (Standard__string.first temp___208))
                                       (Standard__string.last temp___208))))
                            - (1 : int))))))));
             ([@GP_Sloc:station.adb:17:10] [#"station.adb" 17 0 0] ());
             ([@GP_Sloc:station.adb:17:10]
              [#"station.adb" 17 0 0]
              (([#"station.adb" 17 0 0] (val _f : unit in
                                         _f));
               (Ada___ada__text_io__put_line__2___axiom.put_line
                  (let temp___210 =
                     Temp___String_Literal_209.temp___String_Literal_209 () in
                   ((Standard__string.of_array temp___210) (1 : int))
                     (0 : int))))))
          else
            ([@GP_Sloc:station.adb:19:7]
             (if (([#"station.adb" 19 0 0]
                   [#"station.adb" 19 0 0]
                   (([@branch_id=882] Main.spark__branch).bool__content <-
                      ((Boolean.andb
                          (Station__open_door__airlock_number.airlock_number
                             = (2 : int)))
                         (Station__sealedinvariant___axiom.sealedinvariant ()))));
                  (([@branch_id=882] Main.spark__branch).bool__content)) then
                (([@GP_Sloc:station.adb:20:18]
                  [#"station.adb" 20 0 0]
                  (let temp___215 =
                     let temp___214 =
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__open_door__s.s__split_fields) } in
                     ([#"station.adb" 20 0 0]
                      (begin
                         ensures { true }
                         let _ =
                           let _ =
                             (Station__station_record.__split_fields
                                 temp___214).Station__station_record.rec__station__station_record__door2 in
                           () in
                         ()
                       end));
                     ({ temp___214 with
                        Station__station_record.__split_fields =
                          ({ (Station__station_record.__split_fields
                                 temp___214) with
                             Station__station_record.rec__station__station_record__door2 =
                               (Station__airlock_door__rep.of_rep (0 : int)) }) }) in
                   [#"station.adb" 20 0 0]
                   (Station__open_door__s.s__split_fields.Station__station_record.__split_fields__content <-
                      (Station__station_record.__split_fields temp___215))));
                 ([@GP_Sloc:station.adb:21:18]
                  [#"station.adb" 21 0 0]
                  (let temp___218 =
                     let temp___217 =
                       { Station__station_record.__split_fields =
                           (Station__station_record.__split_fields__content
                               Station__open_door__s.s__split_fields) } in
                     ([#"station.adb" 21 0 0]
                      (begin
                         ensures { true }
                         let _ =
                           let _ =
                             (Station__station_record.__split_fields
                                 temp___217).Station__station_record.rec__station__station_record__door1 in
                           () in
                         ()
                       end));
                     ({ temp___217 with
                        Station__station_record.__split_fields =
                          ({ (Station__station_record.__split_fields
                                 temp___217) with
                             Station__station_record.rec__station__station_record__door1 =
                               (Station__airlock_door__rep.of_rep (1 : int)) }) }) in
                   [#"station.adb" 21 0 0]
                   (Station__open_door__s.s__split_fields.Station__station_record.__split_fields__content <-
                      (Station__station_record.__split_fields temp___218))));
                 ([@GP_Sloc:station.adb:23:10] [#"station.adb" 23 0 0] ());
                 ([@GP_Sloc:station.adb:23:10]
                  [#"station.adb" 23 0 0]
                  (([#"station.adb" 23 0 0] (val _f : unit in
                                             _f));
                   (Ada___ada__text_io__put_line__2___axiom.put_line
                      (let temp___220 =
                         Temp___String_Literal_219.temp___String_Literal_219
                           () in
                       ((Standard__string.of_array temp___220) (1 : int))
                         (24 : int)))));
                 ([@GP_Sloc:station.adb:24:10]
                  [#"station.adb" 24 0 0] [#"station.adb" 24 0 0] ());
                 ([@GP_Sloc:station.adb:25:10] [#"station.adb" 25 0 0] ());
                 ([@GP_Sloc:station.adb:25:10]
                  [#"station.adb" 25 0 0]
                  (([#"station.adb" 25 0 0] (val _f : unit in
                                             _f));
                   (Ada___ada__text_io__put_line__2___axiom.put_line
                      (let temp___223 =
                         (Standard_String__Img.to_string
                            (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                               (Station__airlock_door__rep.to_rep
                                  ((Station__station_record.__split_fields
                                       { Station__station_record.__split_fields =
                                           (Station__station_record.__split_fields__content
                                               Station__open_door__s.s__split_fields) }).
                                     Station__station_record.rec__station__station_record__door1))))
                           (2040 : int) in
                       let temp___222 =
                         Temp___String_Literal_221.temp___String_Literal_221
                           () in
                       ((Standard__string.of_array
                           ((((((Array__Int__Standard__character__Concat.concat
                                   temp___222)
                                  (1 : int))
                                 (11 : int))
                                (Standard__string.to_array temp___223))
                               (Standard__string.first temp___223))
                              (Standard__string.last temp___223)))
                          (1 : int))
                         ([#"station.adb" 25 0 0]
                          [@comment:         Put_Line ("Door 1 is: " & S.Door1'Image);                                  ^ station.adb:25:34:VC_RANGE_CHECK]
                          [@vc:annotation]
                          [@GP_Reason:VC_RANGE_CHECK]
                          [@GP_Shape:if__call_put_line__concat]
                          [@GP_Sloc:station.adb:25:34]
                          [@GP_Id:2]
                          (Standard__positive.range_check_
                             (((1 : int)
                                 + (((Integer.length (1 : int)) (11 : int))
                                      + ((Integer.length
                                            (Standard__string.first
                                               temp___223))
                                           (Standard__string.last temp___223))))
                                - (1 : int))))))));
                 ([@GP_Sloc:station.adb:26:10] [#"station.adb" 26 0 0] ());
                 ([@GP_Sloc:station.adb:26:10]
                  [#"station.adb" 26 0 0]
                  (([#"station.adb" 26 0 0] (val _f : unit in
                                             _f));
                   (Ada___ada__text_io__put_line__2___axiom.put_line
                      (let temp___226 =
                         (Standard_String__Img.to_string
                            (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                               (Station__airlock_door__rep.to_rep
                                  ((Station__station_record.__split_fields
                                       { Station__station_record.__split_fields =
                                           (Station__station_record.__split_fields__content
                                               Station__open_door__s.s__split_fields) }).
                                     Station__station_record.rec__station__station_record__door2))))
                           (2040 : int) in
                       let temp___225 =
                         Temp___String_Literal_224.temp___String_Literal_224
                           () in
                       ((Standard__string.of_array
                           ((((((Array__Int__Standard__character__Concat.concat
                                   temp___225)
                                  (1 : int))
                                 (11 : int))
                                (Standard__string.to_array temp___226))
                               (Standard__string.first temp___226))
                              (Standard__string.last temp___226)))
                          (1 : int))
                         ([#"station.adb" 26 0 0]
                          [@GP_Sloc:station.adb:26:34]
                          [@vc:annotation]
                          [@GP_Reason:VC_RANGE_CHECK]
                          [@GP_Shape:if__call_put_line__concat]
                          [@GP_Id:3]
                          [@comment:         Put_Line ("Door 2 is: " & S.Door2'Image);                                  ^ station.adb:26:34:VC_RANGE_CHECK]
                          (Standard__positive.range_check_
                             (((1 : int)
                                 + (((Integer.length (1 : int)) (11 : int))
                                      + ((Integer.length
                                            (Standard__string.first
                                               temp___226))
                                           (Standard__string.last temp___226))))
                                - (1 : int))))))));
                 ([@GP_Sloc:station.adb:27:10] [#"station.adb" 27 0 0] ());
                 ([@GP_Sloc:station.adb:27:10]
                  [#"station.adb" 27 0 0]
                  (([#"station.adb" 27 0 0] (val _f : unit in
                                             _f));
                   (Ada___ada__text_io__put_line__2___axiom.put_line
                      (let temp___228 =
                         Temp___String_Literal_227.temp___String_Literal_227
                           () in
                       ((Standard__string.of_array temp___228) (1 : int))
                         (0 : int))))))
              else
                (([@GP_Sloc:station.adb:29:10] [#"station.adb" 29 0 0] ());
                 ([@GP_Sloc:station.adb:29:10]
                  [#"station.adb" 29 0 0]
                  (([#"station.adb" 29 0 0] (val _f : unit in
                                             _f));
                   (Ada___ada__text_io__put_line__2___axiom.put_line
                      (let temp___212 =
                         Temp___String_Literal_211.temp___String_Literal_211
                           () in
                       ((Standard__string.of_array temp___212) (1 : int))
                         (6 : int))))))))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.orb
               ((Boolean.andb
                   (Station__open_door__airlock_number.airlock_number
                      = (1 : int)))
                  (Station__sealedinvariant___axiom.sealedinvariant ())))
              ((Boolean.andb
                  (Station__open_door__airlock_number.airlock_number
                     = (2 : int)))
                 (Station__sealedinvariant___axiom.sealedinvariant ())) in
          () in
        ()
      end))
end
