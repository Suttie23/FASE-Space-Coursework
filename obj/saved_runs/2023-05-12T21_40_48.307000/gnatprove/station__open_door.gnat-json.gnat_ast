(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
  
  use import int.Int
  use        Standard__string
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_string (x : _gnatprove_standard.Main.__image s : int)
    requires { True } ensures  { True } returns Standard__string.string__
  
  function   from_string (x : Standard__string.string__) requires { True }
    ensures  { True } returns _gnatprove_standard.Main.__image
  
  axiom to_string__first : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom to_string__length : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Array__Int__Standard__character
  
  function   index_Index_one () requires { True } ensures  { True } returns
    int = 1
  
  clone export _gnatprove_standard.Array__1__Concat with axiom . type component_type = Array__Int__Standard__character.component_type,
    type map = Array__Int__Standard__character.map, type Index.t = int,
    predicate Index.le = <=, predicate Index.lt = <, predicate Index.gt = >,
    function Index.add = +, function Index.sub = -,
    function Index.one = index_Index_one,
    function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing type "airlock_door" defined at station.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlock_door  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlock_door,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlock_door__ref  = { mutable airlock_door__content : airlock_door }
  
  function   airlock_door__ref_airlock_door__content__projection
    (a : airlock_door__ref) requires {  } ensures  {  } returns
    airlock_door = a.airlock_door__content
  
  meta model_projection function airlock_door__ref_airlock_door__content__projection
  
  meta inline:no function airlock_door__ref_airlock_door__content__projection
  
  function   airlock_door__havoc (x : airlock_door__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlock_door" defined at station.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Station__airlock_door__rep
  
  use        Station__airlock_door
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__airlock_door.airlock_door,
    predicate in_range = Station__airlock_door.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "module" defined at station.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Station__module
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type module__  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 4
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = module__,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type module____ref  = { mutable module____content : module__ }
  
  function   module____ref_module____content__projection (a : module____ref)
    requires {  } ensures  {  } returns module__ = a.module____content
  
  meta model_projection function module____ref_module____content__projection
  
  meta inline:no function module____ref_module____content__projection
  
  function   module____havoc (x : module____ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "module" defined at station.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Station__module__rep
  
  use        Station__module
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__module.module__,
    predicate in_range = Station__module.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tmodule_arrayB" defined at station.ads:13, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Station__module
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__module
  use        Station__module__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "module_array" defined at station.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Station__module_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__module
  use        Array__Int__Station__module
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 3
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Station__module.map,
    function array_bool_eq = Array__Int__Station__module.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing type "crewmember" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__crewmember
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type crewmember  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = crewmember,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type crewmember__ref  = { mutable crewmember__content : crewmember }
  
  function   crewmember__ref_crewmember__content__projection
    (a : crewmember__ref) requires {  } ensures  {  } returns
    crewmember = a.crewmember__content
  
  meta model_projection function crewmember__ref_crewmember__content__projection
  
  meta inline:no function crewmember__ref_crewmember__content__projection
  
  function   crewmember__havoc (x : crewmember__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "crewmember" defined at station.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Station__crewmember__rep
  
  use        Station__crewmember
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__crewmember.crewmember,
    predicate in_range = Station__crewmember.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "crewmemberstatus" defined at station.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Station__crewmemberstatus
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type crewmemberstatus  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = crewmemberstatus,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type crewmemberstatus__ref  = { mutable crewmemberstatus__content : crewmemberstatus }
  
  function   crewmemberstatus__ref_crewmemberstatus__content__projection
    (a : crewmemberstatus__ref) requires {  } ensures  {  } returns
    crewmemberstatus = a.crewmemberstatus__content
  
  meta model_projection function crewmemberstatus__ref_crewmemberstatus__content__projection
  
  meta inline:no function crewmemberstatus__ref_crewmemberstatus__content__projection
  
  function   crewmemberstatus__havoc (x : crewmemberstatus__ref) requires
    {  } ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "crewmemberstatus" defined at station.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Station__crewmemberstatus__rep
  
  use        Station__crewmemberstatus
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__crewmemberstatus.crewmemberstatus,
    predicate in_range = Station__crewmemberstatus.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "crew_record" defined at station.ads:20, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Station__crew_record__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__module
  use        Station__module__rep
  use        Station__crewmember
  use        Station__crewmember__rep
  use        Station__crewmemberstatus
  use        Station__crewmemberstatus__rep
  
  type __split_fields  = { [model_trace:.1940]
                           [name:Name]rec__station__crew_record__name : Station__crewmember.crewmember;
                           [model_trace:.1945]
                           [name:Status]rec__station__crew_record__status : Station__crewmemberstatus.crewmemberstatus;
                           [model_trace:.1949]
                           [name:Location]rec__station__crew_record__location : Station__module.module__ }
  
  function [model_trace:.1940] [name:Name] 
    __split_fields_rec__station__crew_record__name__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__crewmember.crewmember = a.rec__station__crew_record__name
  
  meta model_projection function __split_fields_rec__station__crew_record__name__projection
  
  meta inline:no function __split_fields_rec__station__crew_record__name__projection
  
  function [model_trace:.1945] [name:Status] 
    __split_fields_rec__station__crew_record__status__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__crewmemberstatus.crewmemberstatus = a.rec__station__crew_record__status
  
  meta model_projection function __split_fields_rec__station__crew_record__status__projection
  
  meta inline:no function __split_fields_rec__station__crew_record__status__projection
  
  function [model_trace:.1949] [name:Location] 
    __split_fields_rec__station__crew_record__location__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__module.module__ = a.rec__station__crew_record__location
  
  meta model_projection function __split_fields_rec__station__crew_record__location__projection
  
  meta inline:no function __split_fields_rec__station__crew_record__location__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   station__crew_record__name__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__station__crew_record__name_ (a : __rep) requires
    { (station__crew_record__name__pred a) } ensures 
    { (result = a.__split_fields.rec__station__crew_record__name) } returns
    Station__crewmember.crewmember
  
  function   station__crew_record__status__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__station__crew_record__status_ (a : __rep) requires
    { (station__crew_record__status__pred a) } ensures 
    { (result = a.__split_fields.rec__station__crew_record__status) } returns
    Station__crewmemberstatus.crewmemberstatus
  
  function   station__crew_record__location__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__crew_record__location_ (a : __rep) requires
    { (station__crew_record__location__pred a) } ensures 
    { (result = a.__split_fields.rec__station__crew_record__location) }
    returns Station__module.module__
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Station__crewmember__rep.to_rep
                a.__split_fields.rec__station__crew_record__name)
               = (Station__crewmember__rep.to_rep
                    b.__split_fields.rec__station__crew_record__name)) /\
              ((Station__crewmemberstatus__rep.to_rep
                  a.__split_fields.rec__station__crew_record__status)
                 = (Station__crewmemberstatus__rep.to_rep
                      b.__split_fields.rec__station__crew_record__status)) /\
              ((Station__module__rep.to_rep
                  a.__split_fields.rec__station__crew_record__location)
                 = (Station__module__rep.to_rep
                      b.__split_fields.rec__station__crew_record__location)))
           then True  else False)

end

(* Module for axiomatizing type "crew_record" defined at station.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Station__crew_record
  
  use export Station__crew_record__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type crew_record  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   station__crew_record__name__first__bit () requires {  } ensures 
    {  } returns int
  
  function   station__crew_record__name__last__bit () requires {  } ensures 
    {  } returns int
  
  function   station__crew_record__name__position () requires {  } ensures 
    {  } returns int
  
  axiom station__crew_record__name__first__bit_axiom : ((station__crew_record__name__first__bit
                                                           ) >= 0)
  
  axiom station__crew_record__name__last__bit_axiom : ((station__crew_record__name__last__bit
                                                          )
                                                         > (station__crew_record__name__first__bit
                                                              ))
  
  axiom station__crew_record__name__position_axiom : ((station__crew_record__name__position
                                                         ) >= 0)
  
  function   station__crew_record__status__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__crew_record__status__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__crew_record__status__position () requires {  } ensures 
    {  } returns int
  
  axiom station__crew_record__status__first__bit_axiom : ((station__crew_record__status__first__bit
                                                             ) >= 0)
  
  axiom station__crew_record__status__last__bit_axiom : ((station__crew_record__status__last__bit
                                                            )
                                                           > (station__crew_record__status__first__bit
                                                                ))
  
  axiom station__crew_record__status__position_axiom : ((station__crew_record__status__position
                                                           ) >= 0)
  
  function   station__crew_record__location__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__crew_record__location__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__crew_record__location__position () requires {  }
    ensures  {  } returns int
  
  axiom station__crew_record__location__first__bit_axiom : ((station__crew_record__location__first__bit
                                                               ) >= 0)
  
  axiom station__crew_record__location__last__bit_axiom : ((station__crew_record__location__last__bit
                                                              )
                                                             > (station__crew_record__location__first__bit
                                                                  ))
  
  axiom station__crew_record__location__position_axiom : ((station__crew_record__location__position
                                                             ) >= 0)
  
  function   user_eq (a : crew_record b : crew_record) requires { True }
    ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns crew_record
  
  type crew_record__ref  = { mutable crew_record__content : crew_record }
  
  function   crew_record__ref_crew_record__content__projection
    (a : crew_record__ref) requires {  } ensures  {  } returns
    crew_record = a.crew_record__content
  
  meta model_projection function crew_record__ref_crew_record__content__projection
  
  meta inline:no function crew_record__ref_crew_record__content__projection
  
  function   crew_record__havoc (x : crew_record__ref) requires {  } ensures 
    {  } returns unit

end

(* Module for axiomatizing the array theory associated to type "Tcrew_arrayB" defined at station.ads:27, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Station__crew_record
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__crew_record
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "crew_array" defined at station.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Station__crew_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__crew_record
  use        Array__Int__Station__crew_record
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 3
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Station__crew_record.map,
    function array_bool_eq = Array__Int__Station__crew_record.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing type "T5s" defined at station.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T5s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t5s  = <range 820000 920000>
  
  function   first () requires { True } ensures  { True } returns
    int = 820000
  
  function   last () requires { True } ensures  { True } returns int = 920000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t5s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t5s__ref  = { mutable t5s__content : t5s }
  
  function   t5s__ref_t5s__content__projection (a : t5s__ref) requires {  }
    ensures  {  } returns t5s = a.t5s__content
  
  meta model_projection function t5s__ref_t5s__content__projection
  
  meta inline:no function t5s__ref_t5s__content__projection
  
  function   t5s__havoc (x : t5s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T5s" defined at station.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T5s__rep
  
  use        Station__station_record__T5s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Station__station_record__T5s.t5s) requires { True }
    ensures  { True } returns int = (Station__station_record__T5s.t5s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__station_record__T5s.t5s,
    predicate in_range = Station__station_record__T5s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "T6s" defined at station.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T6s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t6s  = <range 1 3>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 3
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t6s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t6s__ref  = { mutable t6s__content : t6s }
  
  function   t6s__ref_t6s__content__projection (a : t6s__ref) requires {  }
    ensures  {  } returns t6s = a.t6s__content
  
  meta model_projection function t6s__ref_t6s__content__projection
  
  meta inline:no function t6s__ref_t6s__content__projection
  
  function   t6s__havoc (x : t6s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T6s" defined at station.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record__T6s__rep
  
  use        Station__station_record__T6s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Station__station_record__T6s.t6s) requires { True }
    ensures  { True } returns int = (Station__station_record__T6s.t6s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Station__station_record__T6s.t6s,
    predicate in_range = Station__station_record__T6s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "station_record" defined at station.ads:30, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Station__station_record__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Station__airlock_door
  use        Station__airlock_door__rep
  use        Station__module_array
  use        Station__crew_array
  use        Station__station_record__T5s
  use        Station__station_record__T5s__rep
  use        Station__station_record__T6s
  use        Station__station_record__T6s__rep
  use        Array__Int__Station__module
  use        Array__Int__Station__crew_record
  use        Array__Int__Station__module
  use        Array__Int__Station__crew_record
  use        Array__Int__Station__module
  use        Array__Int__Station__module
  use        Array__Int__Station__crew_record
  use        Array__Int__Station__crew_record
  
  type __split_fields  = { [model_trace:.1965]
                           [name:Door1]rec__station__station_record__door1 : Station__airlock_door.airlock_door;
                           [model_trace:.1971]
                           [name:Door2]rec__station__station_record__door2 : Station__airlock_door.airlock_door;
                           [name:Altitude]
                           [model_trace:.1976]rec__station__station_record__altitude : Station__station_record__T5s.t5s;
                           [name:Modules]
                           [model_trace:.1985]rec__station__station_record__modules : Array__Int__Station__module.map;
                           [model_trace:.1989]
                           [name:Top_Module_Index]rec__station__station_record__top_module_index : Station__station_record__T6s.t6s;
                           [name:Crew]
                           [model_trace:.1998]rec__station__station_record__crew : Array__Int__Station__crew_record.map;
                           [name:ActiveSpaceWalk]
                           [model_trace:.2002]rec__station__station_record__activespacewalk : bool }
  
  function [model_trace:.1965] [name:Door1] 
    __split_fields_rec__station__station_record__door1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door1
  
  meta model_projection function __split_fields_rec__station__station_record__door1__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door1__projection
  
  function [model_trace:.1971] [name:Door2] 
    __split_fields_rec__station__station_record__door2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__airlock_door.airlock_door = a.rec__station__station_record__door2
  
  meta model_projection function __split_fields_rec__station__station_record__door2__projection
  
  meta inline:no function __split_fields_rec__station__station_record__door2__projection
  
  function [name:Altitude] [model_trace:.1976] 
    __split_fields_rec__station__station_record__altitude__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__station_record__T5s.t5s = a.rec__station__station_record__altitude
  
  meta model_projection function __split_fields_rec__station__station_record__altitude__projection
  
  meta inline:no function __split_fields_rec__station__station_record__altitude__projection
  
  function [name:Modules] [model_trace:.1985] 
    __split_fields_rec__station__station_record__modules__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Station__module.map = a.rec__station__station_record__modules
  
  meta model_projection function __split_fields_rec__station__station_record__modules__projection
  
  meta inline:no function __split_fields_rec__station__station_record__modules__projection
  
  function [model_trace:.1989] [name:Top_Module_Index] 
    __split_fields_rec__station__station_record__top_module_index__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Station__station_record__T6s.t6s = a.rec__station__station_record__top_module_index
  
  meta model_projection function __split_fields_rec__station__station_record__top_module_index__projection
  
  meta inline:no function __split_fields_rec__station__station_record__top_module_index__projection
  
  function [name:Crew] [model_trace:.1998] 
    __split_fields_rec__station__station_record__crew__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Station__crew_record.map = a.rec__station__station_record__crew
  
  meta model_projection function __split_fields_rec__station__station_record__crew__projection
  
  meta inline:no function __split_fields_rec__station__station_record__crew__projection
  
  function [name:ActiveSpaceWalk] [model_trace:.2002] 
    __split_fields_rec__station__station_record__activespacewalk__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    bool = a.rec__station__station_record__activespacewalk
  
  meta model_projection function __split_fields_rec__station__station_record__activespacewalk__projection
  
  meta inline:no function __split_fields_rec__station__station_record__activespacewalk__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   station__station_record__door1__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door1_ (a : __rep) requires
    { (station__station_record__door1__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door1) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__door2__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__door2_ (a : __rep) requires
    { (station__station_record__door2__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__door2) }
    returns Station__airlock_door.airlock_door
  
  function   station__station_record__altitude__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__altitude_ (a : __rep) requires
    { (station__station_record__altitude__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__altitude) }
    returns Station__station_record__T5s.t5s
  
  function   station__station_record__modules__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__modules_ (a : __rep) requires
    { (station__station_record__modules__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__modules) }
    returns Array__Int__Station__module.map
  
  function   station__station_record__top_module_index__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__top_module_index_ (a : __rep)
    requires { (station__station_record__top_module_index__pred a) } ensures 
    { (result
         = a.__split_fields.rec__station__station_record__top_module_index) }
    returns Station__station_record__T6s.t6s
  
  function   station__station_record__crew__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__crew_ (a : __rep) requires
    { (station__station_record__crew__pred a) } ensures 
    { (result = a.__split_fields.rec__station__station_record__crew) }
    returns Array__Int__Station__crew_record.map
  
  function   station__station_record__activespacewalk__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__station__station_record__activespacewalk_ (a : __rep)
    requires { (station__station_record__activespacewalk__pred a) } ensures 
    { (result
         = a.__split_fields.rec__station__station_record__activespacewalk) }
    returns bool
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Station__airlock_door__rep.to_rep
                a.__split_fields.rec__station__station_record__door1)
               = (Station__airlock_door__rep.to_rep
                    b.__split_fields.rec__station__station_record__door1)) /\
              ((Station__airlock_door__rep.to_rep
                  a.__split_fields.rec__station__station_record__door2)
                 = (Station__airlock_door__rep.to_rep
                      b.__split_fields.rec__station__station_record__door2))
              /\
              ((Station__station_record__T5s__rep.to_rep
                  a.__split_fields.rec__station__station_record__altitude)
                 = (Station__station_record__T5s__rep.to_rep
                      b.__split_fields.rec__station__station_record__altitude))
              /\
              (Station__module_array.bool_eq
                 a.__split_fields.rec__station__station_record__modules
                 b.__split_fields.rec__station__station_record__modules) /\
              ((Station__station_record__T6s__rep.to_rep
                  a.__split_fields.rec__station__station_record__top_module_index)
                 = (Station__station_record__T6s__rep.to_rep
                      b.__split_fields.rec__station__station_record__top_module_index))
              /\
              (Station__crew_array.bool_eq
                 a.__split_fields.rec__station__station_record__crew
                 b.__split_fields.rec__station__station_record__crew) /\
              ((_gnatprove_standard.Boolean.to_int
                  a.__split_fields.rec__station__station_record__activespacewalk)
                 = (_gnatprove_standard.Boolean.to_int
                      b.__split_fields.rec__station__station_record__activespacewalk)))
           then True  else False)

end

(* Module for axiomatizing type "station_record" defined at station.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Station__station_record
  
  use export Station__station_record__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type station_record  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   station__station_record__door1__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door1__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door1__first__bit_axiom : ((station__station_record__door1__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door1__last__bit_axiom : ((station__station_record__door1__last__bit
                                                              )
                                                             > (station__station_record__door1__first__bit
                                                                  ))
  
  axiom station__station_record__door1__position_axiom : ((station__station_record__door1__position
                                                             ) >= 0)
  
  function   station__station_record__door2__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__door2__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__door2__first__bit_axiom : ((station__station_record__door2__first__bit
                                                               ) >= 0)
  
  axiom station__station_record__door2__last__bit_axiom : ((station__station_record__door2__last__bit
                                                              )
                                                             > (station__station_record__door2__first__bit
                                                                  ))
  
  axiom station__station_record__door2__position_axiom : ((station__station_record__door2__position
                                                             ) >= 0)
  
  function   station__station_record__altitude__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__altitude__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__altitude__first__bit_axiom : ((station__station_record__altitude__first__bit
                                                                  ) >= 0)
  
  axiom station__station_record__altitude__last__bit_axiom : ((station__station_record__altitude__last__bit
                                                                 )
                                                                > (station__station_record__altitude__first__bit
                                                                    ))
  
  axiom station__station_record__altitude__position_axiom : ((station__station_record__altitude__position
                                                                ) >= 0)
  
  function   station__station_record__modules__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__modules__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__modules__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__modules__first__bit_axiom : ((station__station_record__modules__first__bit
                                                                 ) >= 0)
  
  axiom station__station_record__modules__last__bit_axiom : ((station__station_record__modules__last__bit
                                                                )
                                                               > (station__station_record__modules__first__bit
                                                                    ))
  
  axiom station__station_record__modules__position_axiom : ((station__station_record__modules__position
                                                               ) >= 0)
  
  function   station__station_record__top_module_index__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   station__station_record__top_module_index__last__bit () requires
    {  } ensures  {  } returns int
  
  function   station__station_record__top_module_index__position () requires
    {  } ensures  {  } returns int
  
  axiom station__station_record__top_module_index__first__bit_axiom : 
  ((station__station_record__top_module_index__first__bit ) >= 0)
  
  axiom station__station_record__top_module_index__last__bit_axiom : 
  ((station__station_record__top_module_index__last__bit )
     > (station__station_record__top_module_index__first__bit ))
  
  axiom station__station_record__top_module_index__position_axiom : ((station__station_record__top_module_index__position
                                                                    ) >= 0)
  
  function   station__station_record__crew__first__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__crew__last__bit () requires {  }
    ensures  {  } returns int
  
  function   station__station_record__crew__position () requires {  }
    ensures  {  } returns int
  
  axiom station__station_record__crew__first__bit_axiom : ((station__station_record__crew__first__bit
                                                              ) >= 0)
  
  axiom station__station_record__crew__last__bit_axiom : ((station__station_record__crew__last__bit
                                                             )
                                                            > (station__station_record__crew__first__bit
                                                                 ))
  
  axiom station__station_record__crew__position_axiom : ((station__station_record__crew__position
                                                            ) >= 0)
  
  function   station__station_record__activespacewalk__first__bit () requires
    {  } ensures  {  } returns int
  
  function   station__station_record__activespacewalk__last__bit () requires
    {  } ensures  {  } returns int
  
  function   station__station_record__activespacewalk__position () requires
    {  } ensures  {  } returns int
  
  axiom station__station_record__activespacewalk__first__bit_axiom : 
  ((station__station_record__activespacewalk__first__bit ) >= 0)
  
  axiom station__station_record__activespacewalk__last__bit_axiom : ((station__station_record__activespacewalk__last__bit
                                                                    )
                                                                    > (station__station_record__activespacewalk__first__bit
                                                                    ))
  
  axiom station__station_record__activespacewalk__position_axiom : ((station__station_record__activespacewalk__position
                                                                    ) >= 0)
  
  function   user_eq (a : station_record b : station_record) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns station_record
  
  type station_record__ref  = { mutable station_record__content : station_record }
  
  function   station_record__ref_station_record__content__projection
    (a : station_record__ref) requires {  } ensures  {  } returns
    station_record = a.station_record__content
  
  meta model_projection function station_record__ref_station_record__content__projection
  
  meta inline:no function station_record__ref_station_record__content__projection
  
  function   station_record__havoc (x : station_record__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "s" defined at station.ads:41, created in Gnat2Why.Decls.Translate_Variable *)
module Station__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  val s__split_fields [model_projected] [model_trace:2009]
  [name:S] [sloc:station.ads:41]: Station__station_record.__split_fields

end

(* Module giving axioms for type "station_record" defined at station.ads:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Station__station_record
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_232) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___is_init_228) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_229) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_230) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_231) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_235) : Station__station_record.station_record
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_236) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Station__station_record.station__station_record__door1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_235))
        then
        (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_235).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
           = ( 1))
        ) /\
          (if
          (Station__station_record.station__station_record__door2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_235))
          then
          (( (Station__airlock_door__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_235).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
             = ( 1))
          ) /\
          (if
          (Station__station_record.station__station_record__activespacewalk__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_235))
          then
          (([mlw:proxy_symbol]
             [introduced] temp___expr_235).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__activespacewalk
             = (_gnatprove_standard.Boolean.of_int 0))
          ))

end

(* Module for possibly declaring a logic function for "sealedinvariant" defined at station.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Station__sealedinvariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  function   sealedinvariant
    (Station__s___s__split_fields___ : Station__station_record.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   sealedinvariant__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_163) : bool
    Station__s___s__split_fields___ : Station__station_record.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "sealedinvariant" defined at station.ads:51, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Station__sealedinvariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__s
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__sealedinvariant
  use        Station__airlock_door
  use        Station__airlock_door__rep
  
  function   sealedinvariant (__void_param : unit) requires { True } ensures 
    { ((result
          = (Station__sealedinvariant.sealedinvariant
               !Station__s.s__split_fields)) /\
         (Station__sealedinvariant.sealedinvariant__function_guard result
            !Station__s.s__split_fields) /\
         (result
            = (((((Station__airlock_door__rep.to_rep
                     ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                    = 0) /\
                   ((Station__airlock_door__rep.to_rep
                       ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                      = 1)) \/
                  (((Station__airlock_door__rep.to_rep
                       ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                      = 1) /\
                     ((Station__airlock_door__rep.to_rep
                         ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                        = 0))) \/
                 (((Station__airlock_door__rep.to_rep
                      ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1)
                     = 1) /\
                    ((Station__airlock_door__rep.to_rep
                        ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2)
                       = 1))))) } returns bool
  
  axiom sealedinvariant__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom sealedinvariant__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for possibly declaring a logic function for "altitudeinvariant" defined at station.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Station__altitudeinvariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  function   altitudeinvariant
    (Station__s___s__split_fields___ : Station__station_record.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   altitudeinvariant__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_164) : bool
    Station__s___s__split_fields___ : Station__station_record.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "altitudeinvariant" defined at station.ads:56, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Station__altitudeinvariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__s
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__altitudeinvariant
  use        Station__station_record__T5s
  use        Station__station_record__T5s__rep
  
  function   altitudeinvariant (__void_param : unit) requires { True }
    ensures 
    { ((result
          = (Station__altitudeinvariant.altitudeinvariant
               !Station__s.s__split_fields)) /\
         (Station__altitudeinvariant.altitudeinvariant__function_guard result
            !Station__s.s__split_fields) /\
         (result
            = (((Station__station_record__T5s__rep.to_rep
                   ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                  >= 820000) /\
                 ((Station__station_record__T5s__rep.to_rep
                     ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__altitude)
                    <= 920000)))) } returns bool
  
  axiom altitudeinvariant__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom altitudeinvariant__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "s" defined at station.ads:60, created in Gnat2Why.Decls.Translate_Variable *)
module Station__open_door__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__station_record
  
  val s__split_fields [model_trace:2128] [model_projected]
  [name:S] [sloc:station.ads:60]: Station__station_record.__split_fields

end

(* Module for defining the constant "airlock_number" defined at station.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Station__open_door__airlock_number
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:Airlock_Number] [model_trace:2131] [sloc:station.ads:60]
    airlock_number () requires {  } ensures  {  } returns int

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_165) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_166) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:4808] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out
                                     !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:4814] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out
                                       !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for defining a value for string literal  defined at station.adb:11, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_366
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_366 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_366__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:17, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_374
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_374 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_374__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:19, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_376
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_376 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_376__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:20, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_379
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_379 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_379__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:21, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_382
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_382 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_382__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:37, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_390
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_390 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_390__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:38, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_392
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_392 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_392__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:39, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_394
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_394 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_394__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:27, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_402
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_402 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_402__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:29, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_404
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_404 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_404__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:30, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_407
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_407 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_407__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at station.adb:31, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_410
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_410 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_410__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving axioms for type "airlock_door" defined at station.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__airlock_door___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__airlock_door
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_171) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_167) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_170) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_167) = True) \/
          (Station__airlock_door.first <= Station__airlock_door.last))
       then
       (Station__airlock_door.dynamic_property Station__airlock_door.first
          Station__airlock_door.last ([mlw:proxy_symbol]
          [introduced] temp___expr_171))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_173) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "module" defined at station.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__module___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__module
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_178) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_174) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_175) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_177) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_174) = True) \/
          (Station__module.first <= Station__module.last))
       then
       (Station__module.dynamic_property Station__module.first
          Station__module.last ([mlw:proxy_symbol]
          [introduced] temp___expr_178))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_179) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_180) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "module_array" defined at station.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__module_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Station__module
  use        Array__Int__Station__module
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_185) : Array__Int__Station__module.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_181) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_182) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_183) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_184) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_187) : Array__Int__Station__module.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_188) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "crewmember" defined at station.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__crewmember___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__crewmember
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_195) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_194) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_191) = True) \/
          (Station__crewmember.first <= Station__crewmember.last))
       then
       (Station__crewmember.dynamic_property Station__crewmember.first
          Station__crewmember.last ([mlw:proxy_symbol]
          [introduced] temp___expr_195))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_196) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_197) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "crewmemberstatus" defined at station.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__crewmemberstatus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Station__crewmemberstatus
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_202) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_199) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_200) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_201) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_198) = True) \/
          (Station__crewmemberstatus.first <= Station__crewmemberstatus.last))
       then
       (Station__crewmemberstatus.dynamic_property
          Station__crewmemberstatus.first Station__crewmemberstatus.last
          ([mlw:proxy_symbol] [introduced] temp___expr_202))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_203) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_204) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "crew_record" defined at station.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__crew_record___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Station__crew_record
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_209) : Station__crew_record.crew_record
    ([mlw:proxy_symbol] [introduced] temp___is_init_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_206) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_207) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_208) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_210) : Station__crew_record.crew_record
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_211) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "crew_array" defined at station.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__crew_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Station__crew_record
  use        Array__Int__Station__crew_record
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_219) : Array__Int__Station__crew_record.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_215) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_216) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_217) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_218) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_221) : Array__Int__Station__crew_record.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_222) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s" defined at station.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "s" defined at station.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__open_door__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "airlock_number" defined at station.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Station__open_door__airlock_number___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_340) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_336) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_337) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_338) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_339) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_336) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_340))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_341) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_342) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "T5s" defined at station.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record__T5s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T6s" defined at station.ads:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Station__station_record__T6s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "open_door" defined at station.ads:60, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Station__open_door__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Integer
  use        _gnatprove_standard.Boolean
  use        Standard_String__Img
  use        Standard__integer___axiom
  use        Standard__positive
  use        Array__Int__Standard__character__Concat
  use        Standard__string
  use        Station__s
  use        Station__station_record
  use        Station__station_record___axiom
  use        Station__sealedinvariant
  use        Station__sealedinvariant___axiom
  use        Station__altitudeinvariant
  use        Station__altitudeinvariant___axiom
  use        Station__open_door__s
  use        Station__open_door__airlock_number
  use        Ada___ada__text_io__put_line__2___axiom
  use        Station__airlock_door
  use        Station__airlock_door__rep
  use        Temp___String_Literal_366
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_374
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_376
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_379
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_382
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_390
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_392
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_394
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_402
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_404
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_407
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_410
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Station__airlock_door___axiom
  use        Station__module___axiom
  use        Station__module_array___axiom
  use        Station__crewmember___axiom
  use        Station__crewmemberstatus___axiom
  use        Station__crew_record___axiom
  use        Station__crew_array___axiom
  use        Station__station_record___axiom
  use        Station__s___axiom
  use        Station__sealedinvariant___axiom
  use        Station__altitudeinvariant___axiom
  use        Station__open_door__s___axiom
  use        Station__open_door__airlock_number___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Station__station_record__T5s___axiom
  use        Station__station_record__T6s___axiom
  
  function [GP_Subp:station.ads:60] [sloc:station.ads:60] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:station.ads:62] ([GP_Reason:VC_POSTCONDITION]
                             [comment:     Post => SealedInvariant and AltitudeInvariant;              ^ station.ads:62:14:VC_POSTCONDITION]
                             [GP_Sloc:station.ads:62:14] [model_vc_post]
                             [GP_Id:4]
                             [GP_Shape:pragargs__and] (([GP_Sloc:station.ads:62:14]
                                                       [GP_Pretty_Ada:2146] (
                                                       (epsilon ([mlw:proxy_symbol]
                                                       [introduced] temp___result_420) : bool {
                                                       ((([mlw:proxy_symbol]
                                                           [introduced] temp___result_420)
                                                           = (Station__sealedinvariant.sealedinvariant
                                                                !Station__s.s__split_fields))
                                                          /\
                                                          (Station__sealedinvariant.sealedinvariant__function_guard
                                                             ([mlw:proxy_symbol]
                                                             [introduced] temp___result_420)
                                                             !Station__s.s__split_fields))})
                                                         = True)) /\
                                                         ([GP_Sloc:station.ads:62:34]
                                                         [GP_Pretty_Ada:2147] (
                                                         (epsilon ([mlw:proxy_symbol]
                                                         [introduced] temp___result_421) : bool {
                                                         ((([mlw:proxy_symbol]
                                                             [introduced] temp___result_421)
                                                             = (Station__altitudeinvariant.altitudeinvariant
                                                                  !Station__s.s__split_fields))
                                                            /\
                                                            (Station__altitudeinvariant.altitudeinvariant__function_guard
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___result_421)
                                                               !Station__s.s__split_fields))})
                                                           = True))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram station.ads:60 *);
        assume
        { (Station__station_record___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Station__station_record___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Station__open_door__airlock_number.airlock_number True False
             True True) };
        (* Assume moved pointers in outputs of the subprogram station.ads:60 *);
        (* Check for RTE in the Pre of the subprogram station.ads:60 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (Station__sealedinvariant___axiom.sealedinvariant
                             ())
                          (Station__altitudeinvariant___axiom.altitudeinvariant
                             ()))
                       in ())  end;
        (* Assume Pre of the subprogram station.ads:60 *);
        assume
        { (([GP_Pretty_Ada:2140] ((epsilon ([mlw:proxy_symbol]
                                  [introduced] temp___result_418) : bool {
                                  ((([mlw:proxy_symbol]
                                      [introduced] temp___result_418)
                                      = (Station__sealedinvariant.sealedinvariant
                                           !Station__s.s__split_fields)) /\
                                     (Station__sealedinvariant.sealedinvariant__function_guard
                                        ([mlw:proxy_symbol]
                                        [introduced] temp___result_418)
                                        !Station__s.s__split_fields))})
                                    = True)) /\
             ([GP_Pretty_Ada:2141] ((epsilon ([mlw:proxy_symbol]
                                    [introduced] temp___result_419) : bool {
                                    ((([mlw:proxy_symbol]
                                        [introduced] temp___result_419)
                                        = (Station__altitudeinvariant.altitudeinvariant
                                             !Station__s.s__split_fields)) /\
                                       (Station__altitudeinvariant.altitudeinvariant__function_guard
                                          ([mlw:proxy_symbol]
                                          [introduced] temp___result_419)
                                          !Station__s.s__split_fields))})
                                      = True))) };
        (try
        ();
          ([GP_Sloc:station.adb:11:7] ([sloc:station.adb:11] ()));
          ([GP_Sloc:station.adb:11:7] ([sloc:station.adb:11] ( any
                                                                --pp_effects NOT IMPLEMENTED
                                                                pre {
                                                                }
                                      post {} return unit);
          (Ada___ada__text_io__put_line__2___axiom.put_line
             (let ([mlw:proxy_symbol] [introduced] temp___367) =
             ( (Temp___String_Literal_366.temp___String_Literal_366 ())) in
             (Standard__string.of_array ([mlw:proxy_symbol]
                [introduced] temp___367) 1 0)));
          ()));
        ([GP_Sloc:station.adb:14:33] ([sloc:station.adb:14] ()));
        ([GP_Sloc:station.adb:14:7] ([sloc:station.adb:14] (if
                                                           ([sloc:station.adb:14] ([branch_id=842]
                                                           _gnatprove_standard.Main.spark__branch
                                                           :=
                                                           (_gnatprove_standard.Boolean.andb
                                                              (Station__open_door__airlock_number.airlock_number
                                                                 = 1)
                                                              (Station__sealedinvariant___axiom.sealedinvariant
                                                                 ()))));
                                                           ([branch_id=842] _gnatprove_standard.Main.spark__branch).bool__content
                                                           then
                                                           ();
                                                           ([GP_Sloc:station.adb:15:18] 
                                                           ([sloc:station.adb:15] (let ([mlw:proxy_symbol]
                                                           [introduced] temp___370)
                                                           =
                                                           (let ([mlw:proxy_symbol]
                                                             [introduced] temp___369)
                                                             =
                                                             ( --pp_record_aggregate NOT IMPLEMENTED)
                                                             in abstract
                                                             ensures
                                                             { True } begin 
                                                              (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___369).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1
                                                             in ())  end;
                                                             --pp_record_update NOT IMPLEMENTED)
                                                           in (
                                                           Station__open_door__s.s__split_fields
                                                           :=
                                                           ([mlw:proxy_symbol]
                                                             [introduced] temp___370).Station__station_record.__split_fields))));
                                                           ([GP_Sloc:station.adb:16:18] 
                                                           ([sloc:station.adb:16] (let ([mlw:proxy_symbol]
                                                           [introduced] temp___373)
                                                           =
                                                           (let ([mlw:proxy_symbol]
                                                             [introduced] temp___372)
                                                             =
                                                             ( --pp_record_aggregate NOT IMPLEMENTED)
                                                             in abstract
                                                             ensures
                                                             { True } begin 
                                                              (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___372).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2
                                                             in ())  end;
                                                             --pp_record_update NOT IMPLEMENTED)
                                                           in (
                                                           Station__open_door__s.s__split_fields
                                                           :=
                                                           ([mlw:proxy_symbol]
                                                             [introduced] temp___373).Station__station_record.__split_fields))));
                                                           ([GP_Sloc:station.adb:17:10] 
                                                           ([sloc:station.adb:17] ()));
                                                           ([GP_Sloc:station.adb:17:10] 
                                                           ([sloc:station.adb:17] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                                                           (Ada___ada__text_io__put_line__2___axiom.put_line
                                                              (let ([mlw:proxy_symbol]
                                                              [introduced] temp___375)
                                                              =
                                                              ( (Temp___String_Literal_374.temp___String_Literal_374
                                                                   ())) in
                                                              (Standard__string.of_array
                                                                 ([mlw:proxy_symbol]
                                                                 [introduced] temp___375)
                                                                 1 24)));
                                                           ()));
                                                           ([GP_Sloc:station.adb:18:10] 
                                                           ([sloc:station.adb:18] abstract
                                                           ensures
                                                           { True } begin 
                                                            (let _ =
                                                           ( 500000000) in
                                                           ())  end));
                                                           ([GP_Sloc:station.adb:19:10] 
                                                           ([sloc:station.adb:19] ()));
                                                           ([GP_Sloc:station.adb:19:10] 
                                                           ([sloc:station.adb:19] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                                                           (Ada___ada__text_io__put_line__2___axiom.put_line
                                                              (let ([mlw:proxy_symbol]
                                                              [introduced] temp___378)
                                                              =
                                                              (Standard_String__Img.to_string
                                                                 (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                                                                    (
                                                                    Station__airlock_door__rep.to_rep
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
                                                                 2040) in
                                                              (let ([mlw:proxy_symbol]
                                                              [introduced] temp___377)
                                                              =
                                                              (Temp___String_Literal_376.temp___String_Literal_376
                                                                 ()) in
                                                              (Standard__string.of_array
                                                                 (Array__Int__Standard__character__Concat.concat
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___377)
                                                                    1 10
                                                                    (
                                                                    Standard__string.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___378))
                                                                    (
                                                                    Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___378))
                                                                    (
                                                                    Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___378)))
                                                                 1
                                                                 ([sloc:station.adb:19] 
                                                                 ([vc:annotation]
                                                                 [comment:         Put_Line ("Door 1 is:" & S.Door1'Image);                                 ^ station.adb:19:33:VC_RANGE_CHECK]
                                                                 [GP_Sloc:station.adb:19:33]
                                                                 [GP_Reason:VC_RANGE_CHECK]
                                                                 [GP_Shape:if__call_put_line__concat]
                                                                 [GP_Id:0] (
                                                                 Standard__positive.range_check_
                                                                   ((1
                                                                    + ((_gnatprove_standard.Integer.length
                                                                    1 10)
                                                                    + (_gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___378))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___378)))))
                                                                    - 1))))))));
                                                           ()));
                                    ([GP_Sloc:station.adb:20:10] ([sloc:station.adb:20] ()));
                                    ([GP_Sloc:station.adb:20:10] ([sloc:station.adb:20] (
                                                                  any
                                                                   --pp_effects NOT IMPLEMENTED
                                                                   pre {
                                                                   }
                                                                 post {
                                                                 } return
                                                                 unit);
                                    (Ada___ada__text_io__put_line__2___axiom.put_line
                                       (let ([mlw:proxy_symbol]
                                       [introduced] temp___381) =
                                       (Standard_String__Img.to_string
                                          (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                                             (Station__airlock_door__rep.to_rep
                                                ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
                                          2040) in (let ([mlw:proxy_symbol]
                                       [introduced] temp___380) =
                                       (Temp___String_Literal_379.temp___String_Literal_379
                                          ()) in
                                       (Standard__string.of_array
                                          (Array__Int__Standard__character__Concat.concat
                                             ([mlw:proxy_symbol]
                                             [introduced] temp___380) 1 10
                                             (Standard__string.to_array
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___381))
                                             (Standard__string.first
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___381))
                                             (Standard__string.last
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___381))) 1
                                          ([sloc:station.adb:20] ([comment:         Put_Line ("Door 2 is:" & S.Door2'Image);                                 ^ station.adb:20:33:VC_RANGE_CHECK]
                                                                 [vc:annotation]
                                                                 [GP_Reason:VC_RANGE_CHECK]
                                                                 [GP_Shape:if__call_put_line__concat]
                                                                 [GP_Sloc:station.adb:20:33]
                                                                 [GP_Id:1] (
                                                                 Standard__positive.range_check_
                                                                   ((1
                                                                    + ((_gnatprove_standard.Integer.length
                                                                    1 10)
                                                                    + (_gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___381))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___381)))))
                                                                    - 1))))))));
                                    ()));
        ([GP_Sloc:station.adb:21:10] ([sloc:station.adb:21] ()));
        ([GP_Sloc:station.adb:21:10] ([sloc:station.adb:21] ( any
                                                               --pp_effects NOT IMPLEMENTED
                                                               pre {}
                                     post {} return unit);
        (Ada___ada__text_io__put_line__2___axiom.put_line
           (let ([mlw:proxy_symbol] [introduced] temp___383) =
           ( (Temp___String_Literal_382.temp___String_Literal_382 ())) in
           (Standard__string.of_array ([mlw:proxy_symbol]
              [introduced] temp___383) 1 0)));
        ()))  else
    ([GP_Sloc:station.adb:24:7] (if
                                ([sloc:station.adb:24] ([branch_id=885]
                                _gnatprove_standard.Main.spark__branch :=
                                (_gnatprove_standard.Boolean.andb
                                   (Station__open_door__airlock_number.airlock_number
                                      = 2)
                                   (Station__sealedinvariant___axiom.sealedinvariant
                                      ()))));
                                ([branch_id=885] _gnatprove_standard.Main.spark__branch).bool__content
                                then
                                ();
                                ([GP_Sloc:station.adb:25:18] ([sloc:station.adb:25] (let ([mlw:proxy_symbol]
                                                             [introduced] temp___398)
                                                             =
                                                             (let ([mlw:proxy_symbol]
                                                               [introduced] temp___397)
                                                               =
                                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                                               in abstract
                                                               ensures
                                                               { True } begin 
                                                                (let _ =
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___397).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2
                                                               in ())  end;
                                                               --pp_record_update NOT IMPLEMENTED)
                                                             in (
                                                             Station__open_door__s.s__split_fields
                                                             :=
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___398).Station__station_record.__split_fields))));
                                ([GP_Sloc:station.adb:26:18] ([sloc:station.adb:26] (let ([mlw:proxy_symbol]
                                                             [introduced] temp___401)
                                                             =
                                                             (let ([mlw:proxy_symbol]
                                                               [introduced] temp___400)
                                                               =
                                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                                               in abstract
                                                               ensures
                                                               { True } begin 
                                                                (let _ =
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___400).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1
                                                               in ())  end;
                                                               --pp_record_update NOT IMPLEMENTED)
                                                             in (
                                                             Station__open_door__s.s__split_fields
                                                             :=
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___401).Station__station_record.__split_fields))));
                                ([GP_Sloc:station.adb:27:10] ([sloc:station.adb:27] ()));
                                ([GP_Sloc:station.adb:27:10] ([sloc:station.adb:27] (
                                                              any
                                                               --pp_effects NOT IMPLEMENTED
                                                               pre {}
                                                             post {} return
                                                             unit);
                                (Ada___ada__text_io__put_line__2___axiom.put_line
                                   (let ([mlw:proxy_symbol]
                                   [introduced] temp___403) =
                                   ( (Temp___String_Literal_402.temp___String_Literal_402
                                        ())) in
                                   (Standard__string.of_array
                                      ([mlw:proxy_symbol]
                                      [introduced] temp___403) 1 24)));
                                ()));
                                ([GP_Sloc:station.adb:28:10] ([sloc:station.adb:28] abstract
                                                             ensures
                                                             { True } begin 
                                                              (let _ =
                                                             ( 500000000) in
                                                             ())  end));
                                ([GP_Sloc:station.adb:29:10] ([sloc:station.adb:29] ()));
                                ([GP_Sloc:station.adb:29:10] ([sloc:station.adb:29] (
                                                              any
                                                               --pp_effects NOT IMPLEMENTED
                                                               pre {}
                                                             post {} return
                                                             unit);
                                (Ada___ada__text_io__put_line__2___axiom.put_line
                                   (let ([mlw:proxy_symbol]
                                   [introduced] temp___406) =
                                   (Standard_String__Img.to_string
                                      (Station__airlock_door.attr__ATTRIBUTE_IMAGE
                                         (Station__airlock_door__rep.to_rep
                                            ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1))
                                      2040) in (let ([mlw:proxy_symbol]
                                   [introduced] temp___405) =
                                   (Temp___String_Literal_404.temp___String_Literal_404
                                      ()) in
                                   (Standard__string.of_array
                                      (Array__Int__Standard__character__Concat.concat
                                         ([mlw:proxy_symbol]
                                         [introduced] temp___405) 1 11
                                         (Standard__string.to_array
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___406))
                                         (Standard__string.first
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___406))
                                         (Standard__string.last
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___406))) 1
                                      ([sloc:station.adb:29] ([vc:annotation]
                                                             [comment:         Put_Line ("Door 1 is: " & S.Door1'Image);                                  ^ station.adb:29:34:VC_RANGE_CHECK]
                                                             [GP_Sloc:station.adb:29:34]
                                                             [GP_Reason:VC_RANGE_CHECK]
                                                             [GP_Shape:if__call_put_line__concat]
                                                             [GP_Id:2] (
                                                             Standard__positive.range_check_
                                                               ((1
                                                                   + (
                                                                   (_gnatprove_standard.Integer.length
                                                                    1 11)
                                                                    + (
                                                                    _gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___406))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___406)))))
                                                                  - 1))))))));
                                ()));
    ([GP_Sloc:station.adb:30:10] ([sloc:station.adb:30] ()));
    ([GP_Sloc:station.adb:30:10] ([sloc:station.adb:30] ( any
                                                           --pp_effects NOT IMPLEMENTED
                                                           pre {}
                                 post {} return unit);
    (Ada___ada__text_io__put_line__2___axiom.put_line
       (let ([mlw:proxy_symbol] [introduced] temp___409) =
       (Standard_String__Img.to_string
          (Station__airlock_door.attr__ATTRIBUTE_IMAGE
             (Station__airlock_door__rep.to_rep
                ( --pp_record_aggregate NOT IMPLEMENTED).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2))
          2040) in (let ([mlw:proxy_symbol] [introduced] temp___408) =
       (Temp___String_Literal_407.temp___String_Literal_407 ()) in
       (Standard__string.of_array
          (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
             [introduced] temp___408) 1 11
             (Standard__string.to_array ([mlw:proxy_symbol]
                [introduced] temp___409))
             (Standard__string.first ([mlw:proxy_symbol]
                [introduced] temp___409))
             (Standard__string.last ([mlw:proxy_symbol]
                [introduced] temp___409))) 1
          ([sloc:station.adb:30] ([vc:annotation] [GP_Reason:VC_RANGE_CHECK]
                                 [GP_Shape:if__call_put_line__concat]
                                 [comment:         Put_Line ("Door 2 is: " & S.Door2'Image);                                  ^ station.adb:30:34:VC_RANGE_CHECK]
                                 [GP_Id:3]
                                 [GP_Sloc:station.adb:30:34] (Standard__positive.range_check_
                                                                ((1
                                                                    + (
                                                                    (_gnatprove_standard.Integer.length
                                                                    1 11)
                                                                    + (
                                                                    _gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___409))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___409)))))
                                                                   - 1))))))));
    ()));
    ([GP_Sloc:station.adb:31:10] ([sloc:station.adb:31] ()));
    ([GP_Sloc:station.adb:31:10] ([sloc:station.adb:31] ( any
                                                           --pp_effects NOT IMPLEMENTED
                                                           pre {}
                                 post {} return unit);
    (Ada___ada__text_io__put_line__2___axiom.put_line
       (let ([mlw:proxy_symbol] [introduced] temp___411) =
       ( (Temp___String_Literal_410.temp___String_Literal_410 ())) in
       (Standard__string.of_array ([mlw:proxy_symbol]
          [introduced] temp___411) 1 0)));
    ()))  else
  ([GP_Sloc:station.adb:34:7] (if
                              ([sloc:station.adb:34] ([branch_id=927]
                              _gnatprove_standard.Main.spark__branch :=
                              ((_gnatprove_standard.Boolean.to_int
                                  (Station__sealedinvariant___axiom.sealedinvariant
                                     ()))
                                 = (_gnatprove_standard.Boolean.to_int
                                      (_gnatprove_standard.Boolean.of_int 0)))));
                              ([branch_id=927] _gnatprove_standard.Main.spark__branch).bool__content
                              then
                              ();
                              ([GP_Sloc:station.adb:35:18] ([sloc:station.adb:35] (let ([mlw:proxy_symbol]
                                                           [introduced] temp___386)
                                                           =
                                                           (let ([mlw:proxy_symbol]
                                                             [introduced] temp___385)
                                                             =
                                                             ( --pp_record_aggregate NOT IMPLEMENTED)
                                                             in abstract
                                                             ensures
                                                             { True } begin 
                                                              (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___385).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door2
                                                             in ())  end;
                                                             --pp_record_update NOT IMPLEMENTED)
                                                           in (
                                                           Station__open_door__s.s__split_fields
                                                           :=
                                                           ([mlw:proxy_symbol]
                                                             [introduced] temp___386).Station__station_record.__split_fields))));
                              ([GP_Sloc:station.adb:36:18] ([sloc:station.adb:36] (let ([mlw:proxy_symbol]
                                                           [introduced] temp___389)
                                                           =
                                                           (let ([mlw:proxy_symbol]
                                                             [introduced] temp___388)
                                                             =
                                                             ( --pp_record_aggregate NOT IMPLEMENTED)
                                                             in abstract
                                                             ensures
                                                             { True } begin 
                                                              (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___388).Station__station_record.__split_fields.Station__station_record.rec__station__station_record__door1
                                                             in ())  end;
                                                             --pp_record_update NOT IMPLEMENTED)
                                                           in (
                                                           Station__open_door__s.s__split_fields
                                                           :=
                                                           ([mlw:proxy_symbol]
                                                             [introduced] temp___389).Station__station_record.__split_fields))));
                              ([GP_Sloc:station.adb:37:10] ([sloc:station.adb:37] ()));
                              ([GP_Sloc:station.adb:37:10] ([sloc:station.adb:37] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                              (Ada___ada__text_io__put_line__2___axiom.put_line
                                 (let ([mlw:proxy_symbol]
                                 [introduced] temp___391) =
                                 ( (Temp___String_Literal_390.temp___String_Literal_390
                                      ())) in
                                 (Standard__string.of_array
                                    ([mlw:proxy_symbol]
                                    [introduced] temp___391) 1 0)));
                              ()));
                              ([GP_Sloc:station.adb:38:10] ([sloc:station.adb:38] ()));
                              ([GP_Sloc:station.adb:38:10] ([sloc:station.adb:38] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                              (Ada___ada__text_io__put_line__2___axiom.put_line
                                 (let ([mlw:proxy_symbol]
                                 [introduced] temp___393) =
                                 ( (Temp___String_Literal_392.temp___String_Literal_392
                                      ())) in
                                 (Standard__string.of_array
                                    ([mlw:proxy_symbol]
                                    [introduced] temp___393) 1 63)));
                              ()));
  ([GP_Sloc:station.adb:39:10] ([sloc:station.adb:39] ()));
  ([GP_Sloc:station.adb:39:10] ([sloc:station.adb:39] ( any
                                                         --pp_effects NOT IMPLEMENTED
                                                         pre {}
                               post {} return unit);
  (Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
     [introduced] temp___395) =
     ( (Temp___String_Literal_394.temp___String_Literal_394 ())) in
     (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___395)
        1 0)));
  ()))  else ())))))));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ =
               (_gnatprove_standard.Boolean.andb
                  (Station__sealedinvariant___axiom.sealedinvariant ())
                  (Station__altitudeinvariant___axiom.altitudeinvariant ()))
               in ())  end

end
